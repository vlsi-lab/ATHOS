
sw/applications/PQClean-ATHOS/test/crypto_kem/testvectors-kyber768_clean.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <__vector_start>:

.section .vectors, "ax"
.option norvc
vector_table:
	//  0 : exception Handler and user software interrupt
	j handler_exception
   0:	5ec0206f          	j	25ec <handler_exception>
	//  1 : supervisor software interrupt
	j __no_irq_handler
   4:	3eb0006f          	j	bee <__no_irq_handler>
	//  2 : unmapped
	j __no_irq_handler
   8:	3e70006f          	j	bee <__no_irq_handler>
	//  3 : machine software interrupt handler
	j handler_irq_software
   c:	7780206f          	j	2784 <handler_irq_software>
	//  4 : user timer interrupt
	j __no_irq_handler
  10:	3df0006f          	j	bee <__no_irq_handler>
	//  5 : supervisor timer interrupt
	j __no_irq_handler
  14:	3db0006f          	j	bee <__no_irq_handler>
	//  6 : unmapped
	j __no_irq_handler
  18:	3d70006f          	j	bee <__no_irq_handler>
	//  7 : machine timer interrupt handler
	j handler_irq_timer
  1c:	7980206f          	j	27b4 <handler_irq_timer>
	//  8 : user external interrupt
	j __no_irq_handler
  20:	3cf0006f          	j	bee <__no_irq_handler>
	//  9 : supervisor external interrupt
	j __no_irq_handler
  24:	3cb0006f          	j	bee <__no_irq_handler>
	// 10 : unmapped
	j __no_irq_handler
  28:	3c70006f          	j	bee <__no_irq_handler>
	// 11 : machine external interrupt handler
	j handler_irq_external
  2c:	7b80206f          	j	27e4 <handler_irq_external>
	// 12 : unmapped
	j __no_irq_handler
  30:	3bf0006f          	j	bee <__no_irq_handler>
	// 13 : unmapped
	j __no_irq_handler
  34:	3bb0006f          	j	bee <__no_irq_handler>
	// 14 : unmapped
	j __no_irq_handler
  38:	3b70006f          	j	bee <__no_irq_handler>
	// 15 : unmapped
	j __no_irq_handler
  3c:	3b30006f          	j	bee <__no_irq_handler>
	// 16 : fast interrupt - timer_1
	j handler_irq_fast_timer_1
  40:	0510206f          	j	2890 <handler_irq_fast_timer_1>
	// 17 : fast interrupt - timer_2
	j handler_irq_fast_timer_2
  44:	0a50206f          	j	28e8 <handler_irq_fast_timer_2>
	// 18 : fast interrupt - timer_3
	j handler_irq_fast_timer_3
  48:	0f90206f          	j	2940 <handler_irq_fast_timer_3>
	// 19 : fast interrupt - dma
	j handler_irq_fast_dma
  4c:	0210206f          	j	286c <handler_irq_fast_dma>
	// 20 : fast interrupt - spi
	j handler_irq_fast_spi
  50:	1490206f          	j	2998 <handler_irq_fast_spi>
	// 21 : fast interrupt - spi_flash
	j handler_irq_fast_spi_flash
  54:	19d0206f          	j	29f0 <handler_irq_fast_spi_flash>
	// 22 : fast interrupt - gpio_0
	j handler_irq_fast_gpio_0
  58:	1f10206f          	j	2a48 <handler_irq_fast_gpio_0>
	// 23 : fast interrupt - gpio_1
	j handler_irq_fast_gpio_1
  5c:	2450206f          	j	2aa0 <handler_irq_fast_gpio_1>
	// 24 : fast interrupt - gpio_2
	j handler_irq_fast_gpio_2
  60:	2990206f          	j	2af8 <handler_irq_fast_gpio_2>
	// 25 : fast interrupt - gpio_3
	j handler_irq_fast_gpio_3
  64:	2ed0206f          	j	2b50 <handler_irq_fast_gpio_3>
	// 26 : fast interrupt - gpio_4
	j handler_irq_fast_gpio_4
  68:	3410206f          	j	2ba8 <handler_irq_fast_gpio_4>
	// 27 : fast interrupt - gpio_5
	j handler_irq_fast_gpio_5
  6c:	3950206f          	j	2c00 <handler_irq_fast_gpio_5>
	// 28 : fast interrupt - gpio_6
	j handler_irq_fast_gpio_6
  70:	3ed0206f          	j	2c5c <handler_irq_fast_gpio_6>
	// 29 : fast interrupt - gpio_7
	j handler_irq_fast_gpio_7
  74:	4410206f          	j	2cb4 <handler_irq_fast_gpio_7>
	// 30 : fast interrupt - unmapped
	j __no_irq_handler
  78:	3770006f          	j	bee <__no_irq_handler>
	// vendor interrupts: on Ibex interrupt id 31 is for non-maskable interrupts
	j __no_irq_handler
  7c:	3730006f          	j	bee <__no_irq_handler>
	// 64-32 : not connected on Ibex
	j verification_irq_handler
  80:	3f70006f          	j	c76 <verification_irq_handler>
	j __no_irq_handler
  84:	36b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  88:	3670006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  8c:	3630006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  90:	35f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  94:	35b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  98:	3570006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  9c:	3530006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  a0:	34f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  a4:	34b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  a8:	3470006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  ac:	3430006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  b0:	33f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  b4:	33b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  b8:	3370006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  bc:	3330006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  c0:	32f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  c4:	32b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  c8:	3270006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  cc:	3230006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  d0:	31f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  d4:	31b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  d8:	3170006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  dc:	3130006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  e0:	30f0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  e4:	30b0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  e8:	3070006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  ec:	3030006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  f0:	2ff0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  f4:	2fb0006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  f8:	2f70006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
  fc:	2f30006f          	j	bee <__no_irq_handler>
	j __no_irq_handler
 100:	2ef0006f          	j	bee <__no_irq_handler>

Disassembly of section .init:

00000180 <_start>:

_start:
/* initialize global pointer */
.option push
.option norelax
1: auipc gp, %pcrel_hi(__global_pointer$)
 180:	00081197          	auipc	gp,0x81
   addi  gp, gp, %pcrel_lo(1b)
 184:	cb418193          	addi	gp,gp,-844 # 80e34 <__global_pointer$>
.option pop

/* initialize stack pointer */
   la sp, _sp
 188:	000e0117          	auipc	sp,0xe0
 18c:	72810113          	addi	sp,sp,1832 # e08b0 <_sp>

/* set the frequency */
   li a0, SOC_CTRL_START_ADDRESS
 190:	20000537          	lui	a0,0x20000
   li a2, REFERENCE_CLOCK_Hz
 194:	05f5e637          	lui	a2,0x5f5e
 198:	10060613          	addi	a2,a2,256 # 5f5e100 <_sp+0x5e7d850>
   sw a2, SOC_CTRL_SYSTEM_FREQUENCY_HZ_REG_OFFSET(a0)
 19c:	cd50                	sw	a2,28(a0)
    sub    a2, a2, a0
    li     a1, 0
    call   memset
#else
/* clear the bss segment */
   la a0, __bss_start
 19e:	00080517          	auipc	a0,0x80
 1a2:	50650513          	addi	a0,a0,1286 # 806a4 <outleft>
   la a2, __bss_end
 1a6:	00080617          	auipc	a2,0x80
 1aa:	6fe60613          	addi	a2,a2,1790 # 808a4 <__BSS_END__>
   sub a2, a2, a0
 1ae:	8e09                	sub	a2,a2,a0
   li a1, 0
 1b0:	4581                	li	a1,0
   call memset
 1b2:	403020ef          	jal	ra,2db4 <memset>
    blt a1, a2, loop_init_data
    end_init_data:
#endif

/* set vector table address and vectored mode */
    la a0, __vector_start
 1b6:	00000517          	auipc	a0,0x0
 1ba:	e4a50513          	addi	a0,a0,-438 # 0 <__vector_start>
    ori a0, a0, 0x1
 1be:	00156513          	ori	a0,a0,1
    csrw mtvec, a0
 1c2:	30551073          	csrw	mtvec,a0

/* new-style constructors and destructors */
    la a0, __libc_fini_array
 1c6:	00003517          	auipc	a0,0x3
 1ca:	b4e50513          	addi	a0,a0,-1202 # 2d14 <__libc_fini_array>
    call atexit
 1ce:	33d020ef          	jal	ra,2d0a <atexit>
    call __libc_init_array
 1d2:	37d020ef          	jal	ra,2d4e <__libc_init_array>

/* call main */
    lw a0, 0(sp)                    /* a0 = argc */
 1d6:	4502                	lw	a0,0(sp)
    addi a1, sp, __SIZEOF_POINTER__ /* a1 = argv */
 1d8:	004c                	addi	a1,sp,4
    li a2, 0                        /* a2 = envp = NULL */
 1da:	4601                	li	a2,0
    call main
 1dc:	03a000ef          	jal	ra,216 <main>
    tail exit
 1e0:	00c0006f          	j	1ec <exit>

000001e4 <_init>:
.global _init
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
    call init
 1e4:	2f6020ef          	jal	ra,24da <init>

000001e8 <_fini>:
_fini:
 /* These don't have to do anything since we use init_array/fini_array. Prevent
    missing symbol error */
    ret
 1e8:	8082                	ret

Disassembly of section .text:

000001ec <exit>:
     1ec:	1141                	addi	sp,sp,-16
     1ee:	678d                	lui	a5,0x3
     1f0:	c422                	sw	s0,8(sp)
     1f2:	c606                	sw	ra,12(sp)
     1f4:	20678793          	addi	a5,a5,518 # 3206 <__call_exitprocs>
     1f8:	842a                	mv	s0,a0
     1fa:	c781                	beqz	a5,202 <exit+0x16>
     1fc:	4581                	li	a1,0
     1fe:	008030ef          	jal	ra,3206 <__call_exitprocs>
     202:	000807b7          	lui	a5,0x80
     206:	6947a503          	lw	a0,1684(a5) # 80694 <_global_impure_ptr>
     20a:	551c                	lw	a5,40(a0)
     20c:	c391                	beqz	a5,210 <exit+0x24>
     20e:	9782                	jalr	a5
     210:	8522                	mv	a0,s0
     212:	2d0020ef          	jal	ra,24e2 <_exit>

00000216 <main>:

#define crypto_kem_keypair NAMESPACE(crypto_kem_keypair)
#define crypto_kem_enc NAMESPACE(crypto_kem_enc)
#define crypto_kem_dec NAMESPACE(crypto_kem_dec)

int main(void) {
     216:	b6010113          	addi	sp,sp,-1184
     21a:	72f5                	lui	t0,0xffffd
    uint8_t sk_a[CRYPTO_SECRETKEYBYTES];
    int i, j;
    unsigned int cycles_keygen, cycles_enc, cycles_dec;
    

    printf("Hi testvectors KEM!\n");
     21c:	00080537          	lui	a0,0x80
int main(void) {
     220:	48112e23          	sw	ra,1180(sp)
     224:	48912c23          	sw	s1,1176(sp)
     228:	49212a23          	sw	s2,1172(sp)
     22c:	49312823          	sw	s3,1168(sp)
     230:	49412623          	sw	s4,1164(sp)
     234:	49512423          	sw	s5,1160(sp)
     238:	49612223          	sw	s6,1156(sp)
     23c:	49712023          	sw	s7,1152(sp)
     240:	47812e23          	sw	s8,1148(sp)
     244:	47912c23          	sw	s9,1144(sp)
     248:	47a12a23          	sw	s10,1140(sp)
    printf("Hi testvectors KEM!\n");
     24c:	0dc50513          	addi	a0,a0,220 # 800dc <no_exception_handler_msg+0x47>
int main(void) {
     250:	9116                	add	sp,sp,t0
    printf("Hi testvectors KEM!\n");
     252:	451020ef          	jal	ra,2ea2 <puts>
    init_athos();
     256:	329000ef          	jal	ra,d7e <init_athos>
    CSR_CLEAR_BITS(CSR_REG_MCOUNTINHIBIT, 0x1);
     25a:	4785                	li	a5,1
     25c:	3207b073          	csrc	mcountinhibit,a5
    // Starting the performance counter
    CSR_WRITE(CSR_REG_MCYCLE, 0);
     260:	4781                	li	a5,0
     262:	b0079073          	csrw	mcycle,a5
* Returns 0 (success)
**************************************************/
int PQCLEAN_KYBER768_CLEAN_crypto_kem_keypair(uint8_t *pk,
        uint8_t *sk) {
    uint8_t coins[2 * KYBER_SYMBYTES];
    randombytes(coins, 2 * KYBER_SYMBYTES);
     266:	6a0d                	lui	s4,0x3
     268:	7975                	lui	s2,0xffffd
     26a:	bc090993          	addi	s3,s2,-1088 # ffffcbc0 <_sp+0xfff1c310>
     26e:	460a0793          	addi	a5,s4,1120 # 3460 <_fflush_r+0x4c>
     272:	97ce                	add	a5,a5,s3
     274:	0818                	addi	a4,sp,16
     276:	00e789b3          	add	s3,a5,a4
     27a:	854e                	mv	a0,s3
     27c:	04000593          	li	a1,64
     280:	747000ef          	jal	ra,11c6 <randombytes>
    const uint8_t *noiseseed = buf + KYBER_SYMBYTES;
    uint8_t nonce = 0;
    polyvec a[KYBER_K], e, pkpv, skpv;

    //hash_g(buf, coins, KYBER_SYMBYTES);
    sha3_512(buf, coins, KYBER_SYMBYTES);
     284:	c0090493          	addi	s1,s2,-1024
     288:	460a0793          	addi	a5,s4,1120
     28c:	97a6                	add	a5,a5,s1
     28e:	0818                	addi	a4,sp,16
     290:	00e784b3          	add	s1,a5,a4
     294:	85ce                	mv	a1,s3
     296:	8526                	mv	a0,s1
     298:	02000613          	li	a2,32
     29c:	047010ef          	jal	ra,1ae2 <sha3_512>

    PQCLEAN_KYBER768_CLEAN_gen_matrix(a, publicseed, 0);
     2a0:	7bfd                	lui	s7,0xfffff
     2a2:	e00b8b93          	addi	s7,s7,-512 # ffffee00 <_sp+0xfff1e550>
     2a6:	460a0793          	addi	a5,s4,1120
     2aa:	97de                	add	a5,a5,s7
     2ac:	0818                	addi	a4,sp,16
     2ae:	00e78bb3          	add	s7,a5,a4
     2b2:	85a6                	mv	a1,s1
     2b4:	4601                	li	a2,0
     2b6:	855e                	mv	a0,s7
     2b8:	3ad010ef          	jal	ra,1e64 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0>
     2bc:	8d52                	mv	s10,s4

    for (i = 0; i < KYBER_K; i++) {
        PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
     2be:	79f9                	lui	s3,0xffffe
     2c0:	ea098a13          	addi	s4,s3,-352 # ffffdea0 <_sp+0xfff1d5f0>
     2c4:	460d0793          	addi	a5,s10,1120
     2c8:	97d2                	add	a5,a5,s4
     2ca:	0818                	addi	a4,sp,16
     2cc:	00e78a33          	add	s4,a5,a4
     2d0:	02048493          	addi	s1,s1,32
     2d4:	85a6                	mv	a1,s1
     2d6:	4601                	li	a2,0
     2d8:	8552                	mv	a0,s4
     2da:	209010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
     2de:	200a0c93          	addi	s9,s4,512
     2e2:	85a6                	mv	a1,s1
     2e4:	4605                	li	a2,1
     2e6:	8566                	mv	a0,s9
     2e8:	1fb010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
     2ec:	400a0c13          	addi	s8,s4,1024
     2f0:	85a6                	mv	a1,s1
     2f2:	4609                	li	a2,2
     2f4:	8562                	mv	a0,s8
     2f6:	1ed010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    }
    for (i = 0; i < KYBER_K; i++) {
        PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
     2fa:	2a090913          	addi	s2,s2,672
     2fe:	460d0793          	addi	a5,s10,1120
     302:	97ca                	add	a5,a5,s2
     304:	0818                	addi	a4,sp,16
     306:	00e78933          	add	s2,a5,a4
     30a:	85a6                	mv	a1,s1
     30c:	854a                	mv	a0,s2
     30e:	460d                	li	a2,3
     310:	1d3010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
     314:	20090b13          	addi	s6,s2,512
     318:	85a6                	mv	a1,s1
     31a:	855a                	mv	a0,s6
     31c:	4611                	li	a2,4
     31e:	1c5010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
     322:	40090a93          	addi	s5,s2,1024
     326:	4615                	li	a2,5
     328:	85a6                	mv	a1,s1
     32a:	8556                	mv	a0,s5
     32c:	1b7010ef          	jal	ra,1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    }

    //PQCLEAN_KYBER768_CLEAN_polyvec_ntt(&skpv);
    ntt_driver(skpv.vec[0].coeffs, skpv.vec[0].coeffs);
     330:	85d2                	mv	a1,s4
     332:	8552                	mv	a0,s4
     334:	1cc010ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(skpv.vec[1].coeffs, skpv.vec[1].coeffs);
     338:	85e6                	mv	a1,s9
     33a:	8566                	mv	a0,s9
     33c:	1c4010ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(skpv.vec[2].coeffs, skpv.vec[2].coeffs);
     340:	85e2                	mv	a1,s8
     342:	8562                	mv	a0,s8
     344:	1bc010ef          	jal	ra,1500 <ntt_driver>
    //PQCLEAN_KYBER768_CLEAN_polyvec_ntt(&e);
    ntt_driver(e.vec[0].coeffs, e.vec[0].coeffs);
     348:	85ca                	mv	a1,s2
     34a:	854a                	mv	a0,s2
     34c:	1b4010ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(e.vec[1].coeffs, e.vec[1].coeffs);
     350:	85da                	mv	a1,s6
     352:	855a                	mv	a0,s6
     354:	1ac010ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(e.vec[2].coeffs, e.vec[2].coeffs);
     358:	85d6                	mv	a1,s5
     35a:	8556                	mv	a0,s5
     35c:	1a4010ef          	jal	ra,1500 <ntt_driver>

    // matrix-vector multiplication
    for (i = 0; i < KYBER_K; i++) {
     360:	8a098913          	addi	s2,s3,-1888
     364:	460d0793          	addi	a5,s10,1120
     368:	97ca                	add	a5,a5,s2
     36a:	0818                	addi	a4,sp,16
     36c:	00e78933          	add	s2,a5,a4
     370:	60090993          	addi	s3,s2,1536
    ntt_driver(e.vec[2].coeffs, e.vec[2].coeffs);
     374:	84ca                	mv	s1,s2
void PQCLEAN_KYBER768_CLEAN_poly_tomont(poly *r) {
    size_t i;
    const int16_t f = (1ULL << 32) % KYBER_Q;
    for (i = 0; i < KYBER_N; i++) {
        //r->coeffs[i] = PQCLEAN_KYBER768_CLEAN_montgomery_reduce((int32_t)r->coeffs[i] * f);
        asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" ((int32_t)r->coeffs[i] * f) : );
     376:	54900b13          	li	s6,1353
    for (i = 0; i < KYBER_N; i++) {
     37a:	10000a93          	li	s5,256
        PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
     37e:	8652                	mv	a2,s4
     380:	85de                	mv	a1,s7
     382:	8526                	mv	a0,s1
     384:	511000ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
     388:	8626                	mv	a2,s1
     38a:	4701                	li	a4,0
        asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" ((int32_t)r->coeffs[i] * f) : );
     38c:	00061783          	lh	a5,0(a2)
     390:	036787b3          	mul	a5,a5,s6
     394:	0407b78b          	0x407b78b
     398:	00171693          	slli	a3,a4,0x1
     39c:	96a6                	add	a3,a3,s1
     39e:	00f69023          	sh	a5,0(a3)
    for (i = 0; i < KYBER_N; i++) {
     3a2:	0705                	addi	a4,a4,1
     3a4:	0609                	addi	a2,a2,2
     3a6:	ff5713e3          	bne	a4,s5,38c <main+0x176>
    for (i = 0; i < KYBER_K; i++) {
     3aa:	20048493          	addi	s1,s1,512
     3ae:	600b8b93          	addi	s7,s7,1536
     3b2:	fd3496e3          	bne	s1,s3,37e <main+0x168>
     3b6:	7575                	lui	a0,0xffffd
     3b8:	678d                	lui	a5,0x3
     3ba:	2a050513          	addi	a0,a0,672 # ffffd2a0 <_sp+0xfff1c9f0>
     3be:	46078793          	addi	a5,a5,1120 # 3460 <_fflush_r+0x4c>
     3c2:	6885                	lui	a7,0x1
     3c4:	20090813          	addi	a6,s2,512
     3c8:	97aa                	add	a5,a5,a0
     3ca:	0818                	addi	a4,sp,16
     3cc:	80088893          	addi	a7,a7,-2048 # 800 <main+0x5ea>
     3d0:	00e78533          	add	a0,a5,a4
     3d4:	85c2                	mv	a1,a6
     3d6:	98ca                	add	a7,a7,s2
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_KYBER768_CLEAN_poly_add(poly *r, const poly *a, const poly *b) {
    size_t i;
    for (i = 0; i < KYBER_N; i++) {
     3d8:	e0058793          	addi	a5,a1,-512
    for (i = 0; i < KYBER_N; i++) {
     3dc:	86aa                	mv	a3,a0
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
     3de:	0007d703          	lhu	a4,0(a5)
     3e2:	0006d603          	lhu	a2,0(a3)
    for (i = 0; i < KYBER_N; i++) {
     3e6:	0789                	addi	a5,a5,2
     3e8:	0689                	addi	a3,a3,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
     3ea:	9732                	add	a4,a4,a2
     3ec:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
     3f0:	fef597e3          	bne	a1,a5,3de <main+0x1c8>
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void PQCLEAN_KYBER768_CLEAN_polyvec_add(polyvec *r, const polyvec *a, const polyvec *b) {
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
     3f4:	20058593          	addi	a1,a1,512
     3f8:	20050513          	addi	a0,a0,512
     3fc:	fcb89ee3          	bne	a7,a1,3d8 <main+0x1c2>
    for (i = 0; i < KYBER_N; i++) {
     400:	10000593          	li	a1,256
        PQCLEAN_KYBER768_CLEAN_poly_reduce(&r->vec[i]);
     404:	864a                	mv	a2,s2
     406:	4781                	li	a5,0
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
     408:	00065683          	lhu	a3,0(a2)
     40c:	0006c68b          	0x6c68b
     410:	00179713          	slli	a4,a5,0x1
     414:	974a                	add	a4,a4,s2
     416:	00d71023          	sh	a3,0(a4)
    for (i = 0; i < KYBER_N; i++) {
     41a:	0785                	addi	a5,a5,1
     41c:	0609                	addi	a2,a2,2
     41e:	feb795e3          	bne	a5,a1,408 <main+0x1f2>
    for (i = 0; i < KYBER_K; i++) {
     422:	8942                	mv	s2,a6
     424:	01380563          	beq	a6,s3,42e <main+0x218>
     428:	20080813          	addi	a6,a6,512
     42c:	bfe1                	j	404 <main+0x1ee>
    PQCLEAN_KYBER768_CLEAN_polyvec_tobytes(r, sk);
     42e:	6a0d                	lui	s4,0x3
     430:	7979                	lui	s2,0xffffe
     432:	ea090593          	addi	a1,s2,-352 # ffffdea0 <_sp+0xfff1d5f0>
     436:	460a0793          	addi	a5,s4,1120 # 3460 <_fflush_r+0x4c>
     43a:	0818                	addi	a4,sp,16
     43c:	97ae                	add	a5,a5,a1
     43e:	00e785b3          	add	a1,a5,a4
     442:	4a090513          	addi	a0,s2,1184
     446:	460a0793          	addi	a5,s4,1120
     44a:	97aa                	add	a5,a5,a0
     44c:	00e78533          	add	a0,a5,a4
     450:	2bb000ef          	jal	ra,f0a <PQCLEAN_KYBER768_CLEAN_polyvec_tobytes>
    PQCLEAN_KYBER768_CLEAN_polyvec_tobytes(r, pk);
     454:	79f5                	lui	s3,0xffffd
     456:	e0098493          	addi	s1,s3,-512 # ffffce00 <_sp+0xfff1c550>
     45a:	460a0793          	addi	a5,s4,1120
     45e:	0818                	addi	a4,sp,16
     460:	97a6                	add	a5,a5,s1
     462:	00e784b3          	add	s1,a5,a4
     466:	8a090593          	addi	a1,s2,-1888
     46a:	460a0793          	addi	a5,s4,1120
     46e:	97ae                	add	a5,a5,a1
     470:	00e785b3          	add	a1,a5,a4
     474:	8526                	mv	a0,s1
     476:	295000ef          	jal	ra,f0a <PQCLEAN_KYBER768_CLEAN_polyvec_tobytes>
    memcpy(r + KYBER_POLYVECBYTES, seed, KYBER_SYMBYTES);
     47a:	c0098793          	addi	a5,s3,-1024
     47e:	460a0713          	addi	a4,s4,1120
     482:	973e                	add	a4,a4,a5
     484:	081c                	addi	a5,sp,16
     486:	97ba                	add	a5,a5,a4
     488:	0007a303          	lw	t1,0(a5)
     48c:	4f94                	lw	a3,24(a5)
     48e:	4fd8                	lw	a4,28(a5)
     490:	0047a883          	lw	a7,4(a5)
     494:	0087a803          	lw	a6,8(a5)
     498:	47c8                	lw	a0,12(a5)
     49a:	4b8c                	lw	a1,16(a5)
     49c:	4bd0                	lw	a2,20(a5)
    memcpy(sk + KYBER_INDCPA_SECRETKEYBYTES, pk, KYBER_PUBLICKEYBYTES);
     49e:	460a0793          	addi	a5,s4,1120
     4a2:	01010e93          	addi	t4,sp,16
     4a6:	97ca                	add	a5,a5,s2
     4a8:	97f6                	add	a5,a5,t4
     4aa:	c63e                	sw	a5,12(sp)
     4ac:	4864a023          	sw	t1,1152(s1)
     4b0:	48048793          	addi	a5,s1,1152
     4b4:	460a0493          	addi	s1,s4,1120
     4b8:	94ce                	add	s1,s1,s3
     4ba:	94f6                	add	s1,s1,t4
     4bc:	c426                	sw	s1,8(sp)
     4be:	44b2                	lw	s1,12(sp)
     4c0:	cf94                	sw	a3,24(a5)
     4c2:	cfd8                	sw	a4,28(a5)
     4c4:	46a2                	lw	a3,8(sp)
     4c6:	0117a223          	sw	a7,4(a5)
     4ca:	0107a423          	sw	a6,8(a5)
     4ce:	c7c8                	sw	a0,12(a5)
     4d0:	cb8c                	sw	a1,16(a5)
     4d2:	cbd0                	sw	a2,20(a5)
     4d4:	47a2                	lw	a5,8(sp)
     4d6:	6305                	lui	t1,0x1
     4d8:	949a                	add	s1,s1,t1
     4da:	c626                	sw	s1,12(sp)
     4dc:	e0078793          	addi	a5,a5,-512
     4e0:	92048713          	addi	a4,s1,-1760
     4e4:	2a068693          	addi	a3,a3,672
     4e8:	0007a803          	lw	a6,0(a5)
     4ec:	43c8                	lw	a0,4(a5)
     4ee:	478c                	lw	a1,8(a5)
     4f0:	47d0                	lw	a2,12(a5)
     4f2:	01072023          	sw	a6,0(a4)
     4f6:	c348                	sw	a0,4(a4)
     4f8:	c70c                	sw	a1,8(a4)
     4fa:	c750                	sw	a2,12(a4)
     4fc:	07c1                	addi	a5,a5,16
     4fe:	0741                	addi	a4,a4,16
     500:	fed794e3          	bne	a5,a3,4e8 <main+0x2d2>
    sha3_256(sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     504:	6a8d                	lui	s5,0x3
     506:	79f9                	lui	s3,0xffffe
     508:	4a098793          	addi	a5,s3,1184 # ffffe4a0 <_sp+0xfff1dbf0>
     50c:	460a8713          	addi	a4,s5,1120 # 3460 <_fflush_r+0x4c>
     510:	7a75                	lui	s4,0xffffd
     512:	973e                	add	a4,a4,a5
     514:	081c                	addi	a5,sp,16
     516:	00f704b3          	add	s1,a4,a5
     51a:	e00a0b13          	addi	s6,s4,-512 # ffffce00 <_sp+0xfff1c550>
     51e:	460a8793          	addi	a5,s5,1120
     522:	0818                	addi	a4,sp,16
     524:	6905                	lui	s2,0x1
     526:	97da                	add	a5,a5,s6
     528:	00e78b33          	add	s6,a5,a4
     52c:	92090513          	addi	a0,s2,-1760 # 920 <main+0x70a>
     530:	85da                	mv	a1,s6
     532:	9526                	add	a0,a0,s1
     534:	5ec010ef          	jal	ra,1b20 <sha3_256.constprop.0>
    memcpy(sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, coins + KYBER_SYMBYTES, KYBER_SYMBYTES);
     538:	bc0a0793          	addi	a5,s4,-1088
     53c:	460a8713          	addi	a4,s5,1120
     540:	973e                	add	a4,a4,a5
     542:	081c                	addi	a5,sp,16
     544:	97ba                	add	a5,a5,a4
     546:	0207a303          	lw	t1,32(a5)
     54a:	0247a883          	lw	a7,36(a5)
     54e:	0287a803          	lw	a6,40(a5)
     552:	57c8                	lw	a0,44(a5)
     554:	5b8c                	lw	a1,48(a5)
     556:	5bd0                	lw	a2,52(a5)
     558:	5f94                	lw	a3,56(a5)
     55a:	5fd8                	lw	a4,60(a5)
     55c:	94090793          	addi	a5,s2,-1728
     560:	97a6                	add	a5,a5,s1
     562:	0067a023          	sw	t1,0(a5)
     566:	0117a223          	sw	a7,4(a5)
     56a:	0107a423          	sw	a6,8(a5)
     56e:	c7c8                	sw	a0,12(a5)
     570:	cb8c                	sw	a1,16(a5)
     572:	cbd0                	sw	a2,20(a5)
     574:	cf94                	sw	a3,24(a5)
     576:	cfd8                	sw	a4,28(a5)
    // Key-pair generation
    crypto_kem_keypair(pk, sk_a);
    CSR_READ(CSR_REG_MCYCLE, &cycles_keygen);
     578:	b00025f3          	csrr	a1,mcycle
    printf("Number of clock cycles keygen: %d\n", cycles_keygen);
     57c:	00080537          	lui	a0,0x80
     580:	0f050513          	addi	a0,a0,240 # 800f0 <no_exception_handler_msg+0x5b>
     584:	6c8030ef          	jal	ra,3c4c <iprintf>

    //printbytes(pk, CRYPTO_PUBLICKEYBYTES);
    //printbytes(sk_a, CRYPTO_SECRETKEYBYTES);

    // Encapsulation
    CSR_WRITE(CSR_REG_MCYCLE, 0);
     588:	4b81                	li	s7,0
     58a:	b00b9073          	csrw	mcycle,s7
        const uint8_t *coins) {
    uint8_t buf[2 * KYBER_SYMBYTES];
    /* Will contain key, coins */
    uint8_t kr[2 * KYBER_SYMBYTES];

    memcpy(buf, coins, KYBER_SYMBYTES);
     58e:	460a8793          	addi	a5,s5,1120
     592:	0818                	addi	a4,sp,16
     594:	97d2                	add	a5,a5,s4
     596:	97ba                	add	a5,a5,a4
**************************************************/
int PQCLEAN_KYBER768_CLEAN_crypto_kem_enc(uint8_t *ct,
        uint8_t *ss,
        const uint8_t *pk) {
    uint8_t coins[KYBER_SYMBYTES];
    randombytes(coins, KYBER_SYMBYTES);
     598:	2a0a0513          	addi	a0,s4,672
    memcpy(buf, coins, KYBER_SYMBYTES);
     59c:	c43e                	sw	a5,8(sp)
    randombytes(coins, KYBER_SYMBYTES);
     59e:	460a8793          	addi	a5,s5,1120
     5a2:	97aa                	add	a5,a5,a0
     5a4:	00e78533          	add	a0,a5,a4
     5a8:	02000593          	li	a1,32
     5ac:	41b000ef          	jal	ra,11c6 <randombytes>
    memcpy(buf, coins, KYBER_SYMBYTES);
     5b0:	47a2                	lw	a5,8(sp)
     5b2:	84d6                	mv	s1,s5
    sha3_256(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     5b4:	46048593          	addi	a1,s1,1120
     5b8:	ea098a93          	addi	s5,s3,-352
     5bc:	0808                	addi	a0,sp,16
     5be:	95d6                	add	a1,a1,s5
    memcpy(buf, coins, KYBER_SYMBYTES);
     5c0:	2a07ae03          	lw	t3,672(a5)
     5c4:	2a47a303          	lw	t1,676(a5)
     5c8:	2a87a883          	lw	a7,680(a5)
     5cc:	2ac7a803          	lw	a6,684(a5)
     5d0:	2b47a683          	lw	a3,692(a5)
    sha3_256(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     5d4:	00a58ab3          	add	s5,a1,a0
    memcpy(buf, coins, KYBER_SYMBYTES);
     5d8:	2b07a603          	lw	a2,688(a5)
     5dc:	2b87a703          	lw	a4,696(a5)
     5e0:	46048593          	addi	a1,s1,1120
     5e4:	2bc7a783          	lw	a5,700(a5)
     5e8:	95ce                	add	a1,a1,s3
     5ea:	8c26                	mv	s8,s1
     5ec:	00a584b3          	add	s1,a1,a0
     5f0:	ea64a223          	sw	t1,-348(s1)
     5f4:	eb14a423          	sw	a7,-344(s1)
     5f8:	eb04a623          	sw	a6,-340(s1)
     5fc:	ebc4a023          	sw	t3,-352(s1)
     600:	ead4aa23          	sw	a3,-332(s1)
    sha3_256(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     604:	85da                	mv	a1,s6
     606:	020a8513          	addi	a0,s5,32
    memcpy(buf, coins, KYBER_SYMBYTES);
     60a:	eac4a823          	sw	a2,-336(s1)
     60e:	eae4ac23          	sw	a4,-328(s1)
     612:	eaf4ae23          	sw	a5,-324(s1)
    sha3_256(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     616:	50a010ef          	jal	ra,1b20 <sha3_256.constprop.0>
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     61a:	7a7d                	lui	s4,0xfffff
     61c:	e00a0a13          	addi	s4,s4,-512 # ffffee00 <_sp+0xfff1e550>
     620:	460c0793          	addi	a5,s8,1120
     624:	0818                	addi	a4,sp,16
     626:	97d2                	add	a5,a5,s4
     628:	00e78a33          	add	s4,a5,a4
     62c:	85d6                	mv	a1,s5
     62e:	8552                	mv	a0,s4
     630:	04000613          	li	a2,64
     634:	4ae010ef          	jal	ra,1ae2 <sha3_512>
    PQCLEAN_KYBER768_CLEAN_indcpa_enc(ct, buf, pk, kr + KYBER_SYMBYTES);
     638:	8a098993          	addi	s3,s3,-1888
     63c:	460c0793          	addi	a5,s8,1120
     640:	0818                	addi	a4,sp,16
     642:	97ce                	add	a5,a5,s3
     644:	00e789b3          	add	s3,a5,a4
     648:	020a0693          	addi	a3,s4,32
     64c:	865a                	mv	a2,s6
     64e:	85d6                	mv	a1,s5
     650:	854e                	mv	a0,s3
     652:	1e5010ef          	jal	ra,2036 <PQCLEAN_KYBER768_CLEAN_indcpa_enc>
    memcpy(ss, kr, KYBER_SYMBYTES);
     656:	0818                	addi	a4,sp,16
     658:	460c0793          	addi	a5,s8,1120
     65c:	97ba                	add	a5,a5,a4
     65e:	412787b3          	sub	a5,a5,s2
     662:	4322                	lw	t1,8(sp)
     664:	e007a883          	lw	a7,-512(a5)
     668:	e047a803          	lw	a6,-508(a5)
     66c:	e087a503          	lw	a0,-504(a5)
     670:	e0c7a583          	lw	a1,-500(a5)
     674:	e107a603          	lw	a2,-496(a5)
     678:	e147a683          	lw	a3,-492(a5)
     67c:	e187a703          	lw	a4,-488(a5)
     680:	e1c7a783          	lw	a5,-484(a5)
     684:	bb132023          	sw	a7,-1120(t1) # ba0 <main+0x98a>
     688:	bb032223          	sw	a6,-1116(t1)
     68c:	baa32423          	sw	a0,-1112(t1)
     690:	bab32623          	sw	a1,-1108(t1)
     694:	bac32823          	sw	a2,-1104(t1)
     698:	bad32a23          	sw	a3,-1100(t1)
     69c:	bae32c23          	sw	a4,-1096(t1)
     6a0:	baf32e23          	sw	a5,-1092(t1)
    crypto_kem_enc(sendb, key_b, pk);
    CSR_READ(CSR_REG_MCYCLE, &cycles_enc);
     6a4:	b00025f3          	csrr	a1,mcycle
    printf("Number of clock cycles enc: %d\n", cycles_enc);
     6a8:	00080537          	lui	a0,0x80
     6ac:	11450513          	addi	a0,a0,276 # 80114 <no_exception_handler_msg+0x7f>
     6b0:	59c030ef          	jal	ra,3c4c <iprintf>

    //printbytes(sendb, CRYPTO_CIPHERTEXTBYTES);
    //printbytes(key_b, CRYPTO_BYTES);

    // Decapsulation
    CSR_WRITE(CSR_REG_MCYCLE, 0);
     6b4:	b00b9073          	csrw	mcycle,s7
    for (i = 0; i < KYBER_K; i++) {
     6b8:	4e81                	li	t4,0
     6ba:	8e4e                	mv	t3,s3
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j])  : [src] "r" (t[0]), [x] "r" (0) :  );
     6bc:	4881                	li	a7,0
        for (j = 0; j < KYBER_N / 4; j++) {
     6be:	10000313          	li	t1,256
    for (i = 0; i < KYBER_K; i++) {
     6c2:	4f0d                	li	t5,3
     6c4:	85f2                	mv	a1,t3
     6c6:	4601                	li	a2,0
     6c8:	008e9813          	slli	a6,t4,0x8
            t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
     6cc:	0015c683          	lbu	a3,1(a1)
            t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     6d0:	0025c283          	lbu	t0,2(a1)
            t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     6d4:	0035c783          	lbu	a5,3(a1)
            t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     6d8:	0045c703          	lbu	a4,4(a1)
     6dc:	0005c083          	lbu	ra,0(a1)
     6e0:	00869f93          	slli	t6,a3,0x8
            t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     6e4:	00629513          	slli	a0,t0,0x6
     6e8:	8289                	srli	a3,a3,0x2
            t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     6ea:	0067d393          	srli	t2,a5,0x6
     6ee:	070a                	slli	a4,a4,0x2
     6f0:	001fefb3          	or	t6,t6,ra
            t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     6f4:	8d55                	or	a0,a0,a3
            t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     6f6:	00776733          	or	a4,a4,t2
            a += 5;
     6fa:	0595                	addi	a1,a1,5
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j])  : [src] "r" (t[0]), [x] "r" (0) :  );
     6fc:	4d1fef8b          	0x4d1fef8b
     700:	00c806b3          	add	a3,a6,a2
     704:	0686                	slli	a3,a3,0x1
     706:	96a6                	add	a3,a3,s1
     708:	ebf69023          	sh	t6,-352(a3)
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j + 1])  : [src] "r" (t[1]), [x] "r" (0) :  );
     70c:	4d15650b          	0x4d15650b
     710:	00160693          	addi	a3,a2,1
     714:	96c2                	add	a3,a3,a6
     716:	0686                	slli	a3,a3,0x1
     718:	96a6                	add	a3,a3,s1
            t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     71a:	0042d293          	srli	t0,t0,0x4
     71e:	0792                	slli	a5,a5,0x4
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j + 1])  : [src] "r" (t[1]), [x] "r" (0) :  );
     720:	eaa69023          	sh	a0,-352(a3)
            t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     724:	0057e7b3          	or	a5,a5,t0
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j + 2])  : [src] "r" (t[2]), [x] "r" (0) :  );
     728:	4d17e78b          	0x4d17e78b
     72c:	00260693          	addi	a3,a2,2
     730:	96c2                	add	a3,a3,a6
     732:	0686                	slli	a3,a3,0x1
     734:	96a6                	add	a3,a3,s1
     736:	eaf69023          	sh	a5,-352(a3)
            asm volatile (".insn r 0x0b, 0x6, 38, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->vec[i].coeffs[4 * j + 3])  : [src] "r" (t[3]), [x] "r" (0) :  );
     73a:	4d17670b          	0x4d17670b
     73e:	00360793          	addi	a5,a2,3
     742:	97c2                	add	a5,a5,a6
     744:	0786                	slli	a5,a5,0x1
     746:	97a6                	add	a5,a5,s1
     748:	eae79023          	sh	a4,-352(a5)
        for (j = 0; j < KYBER_N / 4; j++) {
     74c:	0611                	addi	a2,a2,4
     74e:	f6661fe3          	bne	a2,t1,6cc <main+0x4b6>
    for (i = 0; i < KYBER_K; i++) {
     752:	0e85                	addi	t4,t4,1
            a += 5;
     754:	140e0e13          	addi	t3,t3,320
    for (i = 0; i < KYBER_K; i++) {
     758:	f7ee96e3          	bne	t4,t5,6c4 <main+0x4ae>
     75c:	7879                	lui	a6,0xffffe
     75e:	678d                	lui	a5,0x3
     760:	8a080813          	addi	a6,a6,-1888 # ffffd8a0 <_sp+0xfff1cff0>
     764:	46078793          	addi	a5,a5,1120 # 3460 <_fflush_r+0x4c>
     768:	97c2                	add	a5,a5,a6
     76a:	0818                	addi	a4,sp,16
     76c:	00e78833          	add	a6,a5,a4
     770:	3c080693          	addi	a3,a6,960
        asm volatile (".insn r 0x0b, 0x006, 18, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[2 * i + 0])  : [src] "r" (a[0]), [x] "r" (0) :  );
     774:	7975                	lui	s2,0xffffd
     776:	4601                	li	a2,0
     778:	4581                	li	a1,0
    for (i = 0; i < KYBER_N / 2; i++) {
     77a:	74f9                	lui	s1,0xffffe
     77c:	44080813          	addi	a6,a6,1088
        asm volatile (".insn r 0x0b, 0x006, 18, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[2 * i + 0])  : [src] "r" (a[0]), [x] "r" (0) :  );
     780:	0006c783          	lbu	a5,0(a3)
     784:	24b7e50b          	0x24b7e50b
     788:	00161713          	slli	a4,a2,0x1
     78c:	47010893          	addi	a7,sp,1136
     790:	9746                	add	a4,a4,a7
     792:	c0a71023          	sh	a0,-1024(a4)
        asm volatile (".insn r 0x0b, 0x006, 19, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[2 * i + 1])  : [src] "r" (a[0]), [x] "r" (0) :  );
     796:	26b7e70b          	0x26b7e70b
     79a:	00160793          	addi	a5,a2,1
     79e:	0786                	slli	a5,a5,0x1
     7a0:	97c6                	add	a5,a5,a7
     7a2:	c0e79023          	sh	a4,-1024(a5)
        a += 1;
     7a6:	0685                	addi	a3,a3,1
    for (i = 0; i < KYBER_N / 2; i++) {
     7a8:	0609                	addi	a2,a2,2
     7aa:	fd069be3          	bne	a3,a6,780 <main+0x56a>
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(sk, packedsk);
     7ae:	6a8d                	lui	s5,0x3
     7b0:	7a7d                	lui	s4,0xfffff
     7b2:	e00a0a13          	addi	s4,s4,-512 # ffffee00 <_sp+0xfff1e550>
     7b6:	460a8793          	addi	a5,s5,1120 # 3460 <_fflush_r+0x4c>
     7ba:	0818                	addi	a4,sp,16
     7bc:	97d2                	add	a5,a5,s4
     7be:	00e78a33          	add	s4,a5,a4
     7c2:	4a048593          	addi	a1,s1,1184 # ffffe4a0 <_sp+0xfff1dbf0>
     7c6:	460a8793          	addi	a5,s5,1120
     7ca:	97ae                	add	a5,a5,a1
     7cc:	00e785b3          	add	a1,a5,a4
     7d0:	8552                	mv	a0,s4
     7d2:	790000ef          	jal	ra,f62 <PQCLEAN_KYBER768_CLEAN_polyvec_frombytes>

    unpack_ciphertext(&b, &v, c);
    unpack_sk(&skpv, sk);

    //PQCLEAN_KYBER768_CLEAN_polyvec_ntt(&b);
    ntt_driver(b.vec[0].coeffs, b.vec[0].coeffs);
     7d6:	ea048493          	addi	s1,s1,-352
     7da:	460a8793          	addi	a5,s5,1120
     7de:	97a6                	add	a5,a5,s1
     7e0:	0818                	addi	a4,sp,16
     7e2:	00e789b3          	add	s3,a5,a4
     7e6:	85ce                	mv	a1,s3
     7e8:	854e                	mv	a0,s3
     7ea:	517000ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(b.vec[1].coeffs, b.vec[1].coeffs);
     7ee:	20098593          	addi	a1,s3,512
     7f2:	852e                	mv	a0,a1
     7f4:	50d000ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(b.vec[2].coeffs, b.vec[2].coeffs);
     7f8:	40098593          	addi	a1,s3,1024
     7fc:	852e                	mv	a0,a1
     7fe:	503000ef          	jal	ra,1500 <ntt_driver>
    
    PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
     802:	2a090593          	addi	a1,s2,672 # ffffd2a0 <_sp+0xfff1c9f0>
     806:	460a8793          	addi	a5,s5,1120
     80a:	97ae                	add	a5,a5,a1
     80c:	0818                	addi	a4,sp,16
     80e:	00e784b3          	add	s1,a5,a4
     812:	864e                	mv	a2,s3
     814:	85d2                	mv	a1,s4
     816:	8526                	mv	a0,s1
     818:	07d000ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
    
    //PQCLEAN_KYBER768_CLEAN_poly_invntt_tomont(&mp);
    intt_driver(mp.coeffs, mp.coeffs);
     81c:	85a6                	mv	a1,s1
     81e:	8526                	mv	a0,s1
     820:	62b000ef          	jal	ra,164a <intt_driver>
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_KYBER768_CLEAN_poly_sub(poly *r, const poly *a, const poly *b) {
    size_t i;
    for (i = 0; i < KYBER_N; i++) {
     824:	c0090693          	addi	a3,s2,-1024
     828:	460a8793          	addi	a5,s5,1120
     82c:	97b6                	add	a5,a5,a3
     82e:	0818                	addi	a4,sp,16
     830:	00e786b3          	add	a3,a5,a4
     834:	8626                	mv	a2,s1
     836:	20048513          	addi	a0,s1,512
     83a:	87a6                	mv	a5,s1
        r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
     83c:	0007d583          	lhu	a1,0(a5)
     840:	0006d703          	lhu	a4,0(a3)
    for (i = 0; i < KYBER_N; i++) {
     844:	0789                	addi	a5,a5,2
     846:	0689                	addi	a3,a3,2
        r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
     848:	8f0d                	sub	a4,a4,a1
     84a:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
     84e:	fef517e3          	bne	a0,a5,83c <main+0x626>
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
     852:	7875                	lui	a6,0xffffd
     854:	85a6                	mv	a1,s1
    for (i = 0; i < KYBER_N; i++) {
     856:	4781                	li	a5,0
     858:	10000893          	li	a7,256
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
     85c:	0005d683          	lhu	a3,0(a1)
     860:	0006c68b          	0x6c68b
     864:	00179713          	slli	a4,a5,0x1
     868:	47010493          	addi	s1,sp,1136
     86c:	9726                	add	a4,a4,s1
     86e:	2ad71023          	sh	a3,672(a4)
    for (i = 0; i < KYBER_N; i++) {
     872:	0785                	addi	a5,a5,1
     874:	0589                	addi	a1,a1,2
     876:	ff1793e3          	bne	a5,a7,85c <main+0x646>
     87a:	678d                	lui	a5,0x3
     87c:	bc080693          	addi	a3,a6,-1088 # ffffcbc0 <_sp+0xfff1c310>
     880:	46078793          	addi	a5,a5,1120 # 3460 <_fflush_r+0x4c>
     884:	97b6                	add	a5,a5,a3
     886:	0818                	addi	a4,sp,16
     888:	00e786b3          	add	a3,a5,a4
        asm volatile (".insn r 0x0b, 0x006, 28, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 0]), [src2] "r" (msg[i]) :   );
     88c:	4581                	li	a1,0
     88e:	00065703          	lhu	a4,0(a2)
     892:	38b7670b          	0x38b7670b
        asm volatile (".insn r 0x0b, 0x006, 29, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 1]), [src2] "r" (msg[i]) :   );
     896:	00265783          	lhu	a5,2(a2)
     89a:	3ae7e78b          	0x3ae7e78b
        asm volatile (".insn r 0x0b, 0x006, 30, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 2]), [src2] "r" (msg[i]) :   );
     89e:	00465703          	lhu	a4,4(a2)
     8a2:	3cf7670b          	0x3cf7670b
        asm volatile (".insn r 0x0b, 0x006, 31, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 3]), [src2] "r" (msg[i]) :   );
     8a6:	00665783          	lhu	a5,6(a2)
     8aa:	3ee7e78b          	0x3ee7e78b
        asm volatile (".insn r 0x0b, 0x006, 32, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 4]), [src2] "r" (msg[i]) :   );
     8ae:	00865703          	lhu	a4,8(a2)
     8b2:	40f7670b          	0x40f7670b
        asm volatile (".insn r 0x0b, 0x006, 33, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 5]), [src2] "r" (msg[i]) :   );
     8b6:	00a65783          	lhu	a5,10(a2)
     8ba:	42e7e78b          	0x42e7e78b
        asm volatile (".insn r 0x0b, 0x006, 34, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 6]), [src2] "r" (msg[i]) :   );
     8be:	00c65703          	lhu	a4,12(a2)
     8c2:	44f7670b          	0x44f7670b
        asm volatile (".insn r 0x0b, 0x006, 35, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (msg[i])  : [src] "r" (a->coeffs[8 * i + 7]), [src2] "r" (msg[i]) :   );
     8c6:	00e65783          	lhu	a5,14(a2)
     8ca:	46e7e78b          	0x46e7e78b
     8ce:	00f68023          	sb	a5,0(a3)
    for (i = 0; i < KYBER_N / 8; i++) {
     8d2:	0641                	addi	a2,a2,16
     8d4:	0685                	addi	a3,a3,1
     8d6:	fac51ce3          	bne	a0,a2,88e <main+0x678>
    const uint8_t *pk = sk + KYBER_INDCPA_SECRETKEYBYTES;

    PQCLEAN_KYBER768_CLEAN_indcpa_dec(buf, ct, sk);

    /* Multitarget countermeasure for coins + contributory KEM */
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     8da:	74f9                	lui	s1,0xffffe
     8dc:	658d                	lui	a1,0x3
     8de:	4a048a13          	addi	s4,s1,1184 # ffffe4a0 <_sp+0xfff1dbf0>
     8e2:	46058793          	addi	a5,a1,1120 # 3460 <_fflush_r+0x4c>
     8e6:	97d2                	add	a5,a5,s4
     8e8:	0818                	addi	a4,sp,16
     8ea:	00e78a33          	add	s4,a5,a4
     8ee:	6785                	lui	a5,0x1
     8f0:	92078793          	addi	a5,a5,-1760 # 920 <main+0x70a>
     8f4:	97d2                	add	a5,a5,s4
     8f6:	79f5                	lui	s3,0xffffd
     8f8:	4390                	lw	a2,0(a5)
     8fa:	0047ae03          	lw	t3,4(a5)
     8fe:	0087a303          	lw	t1,8(a5)
     902:	00c7a883          	lw	a7,12(a5)
     906:	0107a803          	lw	a6,16(a5)
     90a:	4bd4                	lw	a3,20(a5)
     90c:	4f98                	lw	a4,24(a5)
    //hash_g(kr, buf, 2 * KYBER_SYMBYTES);
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     90e:	ea048a93          	addi	s5,s1,-352
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     912:	4fdc                	lw	a5,28(a5)
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     914:	8b2e                	mv	s6,a1
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     916:	bc098993          	addi	s3,s3,-1088 # ffffcbc0 <_sp+0xfff1c310>
     91a:	46058513          	addi	a0,a1,1120
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     91e:	46058593          	addi	a1,a1,1120
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     922:	01010e93          	addi	t4,sp,16
     926:	954e                	add	a0,a0,s3
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     928:	95d6                	add	a1,a1,s5
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     92a:	01d509b3          	add	s3,a0,t4
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     92e:	01d58ab3          	add	s5,a1,t4
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     932:	02c9a023          	sw	a2,32(s3)
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     936:	85ce                	mv	a1,s3
     938:	04000613          	li	a2,64
     93c:	8556                	mv	a0,s5
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
     93e:	03c9a223          	sw	t3,36(s3)
     942:	0269a423          	sw	t1,40(s3)
     946:	0319a623          	sw	a7,44(s3)
     94a:	0309a823          	sw	a6,48(s3)
     94e:	02d9aa23          	sw	a3,52(s3)
     952:	02e9ac23          	sw	a4,56(s3)
     956:	02f9ae23          	sw	a5,60(s3)
    sha3_512(kr, buf, 2 * KYBER_SYMBYTES);
     95a:	188010ef          	jal	ra,1ae2 <sha3_512>

    /* coins are in kr+KYBER_SYMBYTES */
    PQCLEAN_KYBER768_CLEAN_indcpa_enc(cmp, buf, pk, kr + KYBER_SYMBYTES);
     95e:	797d                	lui	s2,0xfffff
     960:	e0090913          	addi	s2,s2,-512 # ffffee00 <_sp+0xfff1e550>
     964:	460b0793          	addi	a5,s6,1120
     968:	97ca                	add	a5,a5,s2
     96a:	0818                	addi	a4,sp,16
     96c:	00e78933          	add	s2,a5,a4
     970:	480a0613          	addi	a2,s4,1152
     974:	854a                	mv	a0,s2
     976:	020a8693          	addi	a3,s5,32
     97a:	85ce                	mv	a1,s3
     97c:	6ba010ef          	jal	ra,2036 <PQCLEAN_KYBER768_CLEAN_indcpa_enc>
     980:	8a048793          	addi	a5,s1,-1888
     984:	460b0713          	addi	a4,s6,1120
     988:	973e                	add	a4,a4,a5
     98a:	081c                	addi	a5,sp,16
     98c:	97ba                	add	a5,a5,a4
     98e:	854a                	mv	a0,s2
     990:	44078613          	addi	a2,a5,1088
*
* Returns 0 if the byte arrays are equal, 1 otherwise
**************************************************/
int PQCLEAN_KYBER768_CLEAN_verify(const uint8_t *a, const uint8_t *b, size_t len) {
    size_t i;
    uint8_t r = 0;
     994:	4481                	li	s1,0

    for (i = 0; i < len; i++) {
        r |= a[i] ^ b[i];
     996:	0007c703          	lbu	a4,0(a5)
     99a:	00054683          	lbu	a3,0(a0)
    for (i = 0; i < len; i++) {
     99e:	0785                	addi	a5,a5,1
     9a0:	0505                	addi	a0,a0,1
        r |= a[i] ^ b[i];
     9a2:	8f35                	xor	a4,a4,a3
     9a4:	8cd9                	or	s1,s1,a4
    for (i = 0; i < len; i++) {
     9a6:	fef618e3          	bne	a2,a5,996 <main+0x780>
void shake128_inc_ctx_release(shake128incctx *state) {
    free(state->ctx);
}

void shake256_inc_init(shake256incctx *state) {
    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
     9aa:	0d000513          	li	a0,208
     9ae:	238030ef          	jal	ra,3be6 <malloc>
    }

    return (-(uint64_t)r) >> 63;
     9b2:	009034b3          	snez	s1,s1
     9b6:	892a                	mv	s2,a0
    if (state->ctx == NULL) {
     9b8:	22050763          	beqz	a0,be6 <main+0x9d0>
        s_inc[i] = 0;
     9bc:	0c800613          	li	a2,200
     9c0:	4581                	li	a1,0
     9c2:	3f2020ef          	jal	ra,2db4 <memset>
    }
    keccak_inc_init(state->ctx);
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
     9c6:	79f9                	lui	s3,0xffffe
     9c8:	6a0d                	lui	s4,0x3
     9ca:	4a098593          	addi	a1,s3,1184 # ffffe4a0 <_sp+0xfff1dbf0>
     9ce:	460a0793          	addi	a5,s4,1120 # 3460 <_fflush_r+0x4c>
     9d2:	0818                	addi	a4,sp,16
     9d4:	97ae                	add	a5,a5,a1
     9d6:	00e785b3          	add	a1,a5,a4
     9da:	6785                	lui	a5,0x1
     9dc:	94078793          	addi	a5,a5,-1728 # 940 <main+0x72a>
     9e0:	95be                	add	a1,a1,a5
    s_inc[25] = 0;
     9e2:	4801                	li	a6,0
     9e4:	4781                	li	a5,0
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
     9e6:	02000613          	li	a2,32
     9ea:	854a                	mv	a0,s2
    s_inc[25] = 0;
     9ec:	0cf92423          	sw	a5,200(s2)
     9f0:	0d092623          	sw	a6,204(s2)
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
     9f4:	16c010ef          	jal	ra,1b60 <keccak_inc_absorb.constprop.0>
     9f8:	8a098593          	addi	a1,s3,-1888
     9fc:	460a0793          	addi	a5,s4,1120
     a00:	97ae                	add	a5,a5,a1
     a02:	0818                	addi	a4,sp,16
     a04:	00e785b3          	add	a1,a5,a4
     a08:	44000613          	li	a2,1088
     a0c:	854a                	mv	a0,s2
     a0e:	152010ef          	jal	ra,1b60 <keccak_inc_absorb.constprop.0>
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
     a12:	0c892783          	lw	a5,200(s2)
     a16:	0077f713          	andi	a4,a5,7
     a1a:	070e                	slli	a4,a4,0x3
     a1c:	9be1                	andi	a5,a5,-8
     a1e:	fe070693          	addi	a3,a4,-32
     a22:	97ca                	add	a5,a5,s2
     a24:	1a06c663          	bltz	a3,bd0 <main+0x9ba>
     a28:	467d                	li	a2,31
     a2a:	00d61633          	sll	a2,a2,a3
     a2e:	4581                	li	a1,0
     a30:	4394                	lw	a3,0(a5)
     a32:	43d8                	lw	a4,4(a5)
    h += i;
     a34:	7a75                	lui	s4,0xffffd
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
     a36:	8ead                	xor	a3,a3,a1
     a38:	8f31                	xor	a4,a4,a2
     a3a:	c3d8                	sw	a4,4(a5)
     a3c:	c394                	sw	a3,0(a5)
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
     a3e:	08492783          	lw	a5,132(s2)
     a42:	80000737          	lui	a4,0x80000
    h += i;
     a46:	2a0a0a13          	addi	s4,s4,672 # ffffd2a0 <_sp+0xfff1c9f0>
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
     a4a:	8fb9                	xor	a5,a5,a4
     a4c:	08f92223          	sw	a5,132(s2)
    s_inc[25] = 0;
     a50:	4781                	li	a5,0
     a52:	0cf92423          	sw	a5,200(s2)
    h += i;
     a56:	678d                	lui	a5,0x3
     a58:	46078793          	addi	a5,a5,1120 # 3460 <_fflush_r+0x4c>
    s_inc[25] = 0;
     a5c:	4801                	li	a6,0
    h += i;
     a5e:	97d2                	add	a5,a5,s4
     a60:	0818                	addi	a4,sp,16
    s_inc[25] = 0;
     a62:	0d092623          	sw	a6,204(s2)
    outlen -= i;
     a66:	02000993          	li	s3,32
    h += i;
     a6a:	00e78a33          	add	s4,a5,a4
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
     a6e:	4b7d                	li	s6,31
        for (i = 0; i < outlen && i < r; i++) {
     a70:	08800a93          	li	s5,136
        keccak_ip_driver(s_inc, s_inc);
     a74:	85ca                	mv	a1,s2
     a76:	854a                	mv	a0,s2
     a78:	559000ef          	jal	ra,17d0 <keccak_ip_driver>
        for (i = 0; i < outlen && i < r; i++) {
     a7c:	4781                	li	a5,0
     a7e:	a819                	j	a94 <main+0x87e>
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
     a80:	4358                	lw	a4,4(a4)
        for (i = 0; i < outlen && i < r; i++) {
     a82:	0785                	addi	a5,a5,1
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
     a84:	00c75733          	srl	a4,a4,a2
     a88:	00e58023          	sb	a4,0(a1)
        for (i = 0; i < outlen && i < r; i++) {
     a8c:	0337ff63          	bgeu	a5,s3,aca <main+0x8b4>
     a90:	13578e63          	beq	a5,s5,bcc <main+0x9b6>
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
     a94:	0077f693          	andi	a3,a5,7
     a98:	068e                	slli	a3,a3,0x3
     a9a:	ff87f713          	andi	a4,a5,-8
     a9e:	fe068613          	addi	a2,a3,-32
     aa2:	00fa05b3          	add	a1,s4,a5
     aa6:	974a                	add	a4,a4,s2
     aa8:	fc065ce3          	bgez	a2,a80 <main+0x86a>
     aac:	4350                	lw	a2,4(a4)
     aae:	4318                	lw	a4,0(a4)
     ab0:	40db0533          	sub	a0,s6,a3
     ab4:	0606                	slli	a2,a2,0x1
     ab6:	00a61633          	sll	a2,a2,a0
     aba:	00d75733          	srl	a4,a4,a3
     abe:	8f51                	or	a4,a4,a2
     ac0:	00e58023          	sb	a4,0(a1)
        for (i = 0; i < outlen && i < r; i++) {
     ac4:	0785                	addi	a5,a5,1
     ac6:	fd37e5e3          	bltu	a5,s3,a90 <main+0x87a>
        s_inc[25] = r - i;
     aca:	40fa8733          	sub	a4,s5,a5
        outlen -= i;
     ace:	40f989b3          	sub	s3,s3,a5
        s_inc[25] = r - i;
     ad2:	0ce92423          	sw	a4,200(s2)
     ad6:	0c092623          	sw	zero,204(s2)
        h += i;
     ada:	9a3e                	add	s4,s4,a5
    while (outlen > 0) {
     adc:	f8099ce3          	bnez	s3,a74 <main+0x85e>
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
}

void shake256_inc_ctx_release(shake256incctx *state) {
    free(state->ctx);
     ae0:	854a                	mv	a0,s2
     ae2:	110030ef          	jal	ra,3bf2 <free>
     ae6:	670d                	lui	a4,0x3
     ae8:	7975                	lui	s2,0xffffd
     aea:	2a090913          	addi	s2,s2,672 # ffffd2a0 <_sp+0xfff1c9f0>
     aee:	46070793          	addi	a5,a4,1120 # 3460 <_fflush_r+0x4c>
     af2:	97ca                	add	a5,a5,s2
     af4:	0814                	addi	a3,sp,16
     af6:	7679                	lui	a2,0xffffe
     af8:	00d78933          	add	s2,a5,a3
     afc:	ea060613          	addi	a2,a2,-352 # ffffdea0 <_sp+0xfff1d5f0>
     b00:	46070793          	addi	a5,a4,1120
*              uint8_t b:        Condition bit; has to be in {0,1}
**************************************************/
void PQCLEAN_KYBER768_CLEAN_cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b) {
    size_t i;

    b = -b;
     b04:	fff48593          	addi	a1,s1,-1
     b08:	97b2                	add	a5,a5,a2
     b0a:	0ff5f593          	zext.b	a1,a1
     b0e:	00d78633          	add	a2,a5,a3
     b12:	02090993          	addi	s3,s2,32
     b16:	874a                	mv	a4,s2
    for (i = 0; i < len; i++) {
        r[i] ^= b & (r[i] ^ x[i]);
     b18:	00074683          	lbu	a3,0(a4)
     b1c:	00064783          	lbu	a5,0(a2)
    for (i = 0; i < len; i++) {
     b20:	0705                	addi	a4,a4,1
     b22:	0605                	addi	a2,a2,1
        r[i] ^= b & (r[i] ^ x[i]);
     b24:	8fb5                	xor	a5,a5,a3
     b26:	8fed                	and	a5,a5,a1
     b28:	8ebd                	xor	a3,a3,a5
     b2a:	fed70fa3          	sb	a3,-1(a4)
    for (i = 0; i < len; i++) {
     b2e:	fee995e3          	bne	s3,a4,b18 <main+0x902>
    crypto_kem_dec(key_a, sendb, sk_a);
    CSR_READ(CSR_REG_MCYCLE, &cycles_dec);
     b32:	b00025f3          	csrr	a1,mcycle
    printf("Number of clock cycles dec: %d\n", cycles_dec);
     b36:	00080537          	lui	a0,0x80
     b3a:	13450513          	addi	a0,a0,308 # 80134 <no_exception_handler_msg+0x9f>
     b3e:	10e030ef          	jal	ra,3c4c <iprintf>
    
    printbytes(key_a, CRYPTO_BYTES);
     b42:	74f5                	lui	s1,0xffffd
     b44:	6a0d                	lui	s4,0x3
     b46:	2a048513          	addi	a0,s1,672 # ffffd2a0 <_sp+0xfff1c9f0>
     b4a:	460a0793          	addi	a5,s4,1120 # 3460 <_fflush_r+0x4c>
     b4e:	97aa                	add	a5,a5,a0
     b50:	0818                	addi	a4,sp,16
     b52:	00e78533          	add	a0,a5,a4
     b56:	14f010ef          	jal	ra,24a4 <printbytes.constprop.0>
    printbytes(key_b, CRYPTO_BYTES);
     b5a:	ba048493          	addi	s1,s1,-1120
     b5e:	460a0793          	addi	a5,s4,1120
     b62:	97a6                	add	a5,a5,s1
     b64:	0818                	addi	a4,sp,16
     b66:	00e784b3          	add	s1,a5,a4
     b6a:	8526                	mv	a0,s1
     b6c:	139010ef          	jal	ra,24a4 <printbytes.constprop.0>


    for (j = 0; j < CRYPTO_BYTES; j++) {
     b70:	8526                	mv	a0,s1
     b72:	a029                	j	b7c <main+0x966>
     b74:	0905                	addi	s2,s2,1
     b76:	0505                	addi	a0,a0,1
     b78:	07298563          	beq	s3,s2,be2 <main+0x9cc>
        if (key_a[j] != key_b[j]) {
     b7c:	00094703          	lbu	a4,0(s2)
     b80:	00054783          	lbu	a5,0(a0)
     b84:	fef708e3          	beq	a4,a5,b74 <main+0x95e>
            printf("ERROR\n");
     b88:	00080537          	lui	a0,0x80
     b8c:	15450513          	addi	a0,a0,340 # 80154 <no_exception_handler_msg+0xbf>
     b90:	312020ef          	jal	ra,2ea2 <puts>
            return -1;
     b94:	557d                	li	a0,-1
        }
    }

    //printf("Ends testvectors KEM!\n");
    return 0;
}
     b96:	628d                	lui	t0,0x3
     b98:	9116                	add	sp,sp,t0
     b9a:	49c12083          	lw	ra,1180(sp)
     b9e:	49812483          	lw	s1,1176(sp)
     ba2:	49412903          	lw	s2,1172(sp)
     ba6:	49012983          	lw	s3,1168(sp)
     baa:	48c12a03          	lw	s4,1164(sp)
     bae:	48812a83          	lw	s5,1160(sp)
     bb2:	48412b03          	lw	s6,1156(sp)
     bb6:	48012b83          	lw	s7,1152(sp)
     bba:	47c12c03          	lw	s8,1148(sp)
     bbe:	47812c83          	lw	s9,1144(sp)
     bc2:	47412d03          	lw	s10,1140(sp)
     bc6:	4a010113          	addi	sp,sp,1184
     bca:	8082                	ret
     bcc:	4701                	li	a4,0
     bce:	b701                	j	ace <main+0x8b8>
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
     bd0:	45fd                	li	a1,31
     bd2:	40e586b3          	sub	a3,a1,a4
     bd6:	463d                	li	a2,15
     bd8:	00d65633          	srl	a2,a2,a3
     bdc:	00e595b3          	sll	a1,a1,a4
     be0:	bd81                	j	a30 <main+0x81a>
    return 0;
     be2:	4501                	li	a0,0
     be4:	bf4d                	j	b96 <main+0x980>
        exit(111);
     be6:	06f00513          	li	a0,111
     bea:	e02ff0ef          	jal	ra,1ec <exit>

00000bee <__no_irq_handler>:
/*	j __no_irq_handler */

.section .text.vecs
/* exception handling */
__no_irq_handler:
	la a0, no_exception_handler_msg
     bee:	0007f517          	auipc	a0,0x7f
     bf2:	4a750513          	addi	a0,a0,1191 # 80095 <no_exception_handler_msg>
	jal ra, puts
     bf6:	2ac020ef          	jal	ra,2ea2 <puts>
	j __no_irq_handler
     bfa:	ff5ff06f          	j	bee <__no_irq_handler>

00000bfe <sw_irq_handler>:


sw_irq_handler:
	csrr t0, mcause
     bfe:	342022f3          	csrr	t0,mcause
	slli t0, t0, 1  /* shift off the high bit */
     c02:	00129293          	slli	t0,t0,0x1
	srli t0, t0, 1
     c06:	0012d293          	srli	t0,t0,0x1
	li t1, 2
     c0a:	00200313          	li	t1,2
	beq t0, t1, handle_illegal_insn
     c0e:	02628c63          	beq	t0,t1,c46 <handle_illegal_insn>
	li t1, 11
     c12:	00b00313          	li	t1,11
	beq t0, t1, handle_ecall
     c16:	00628863          	beq	t0,t1,c26 <handle_ecall>
	li t1, 3
     c1a:	00300313          	li	t1,3
	beq t0, t1, handle_ebreak
     c1e:	00628c63          	beq	t0,t1,c36 <handle_ebreak>
	j handle_unknown
     c22:	0340006f          	j	c56 <handle_unknown>

00000c26 <handle_ecall>:

handle_ecall:
	la a0, ecall_msg
     c26:	0007f517          	auipc	a0,0x7f
     c2a:	40950513          	addi	a0,a0,1033 # 8002f <ecall_msg>
	jal ra, puts
     c2e:	274020ef          	jal	ra,2ea2 <puts>
	j end_handler
     c32:	0340006f          	j	c66 <end_handler>

00000c36 <handle_ebreak>:

handle_ebreak:
	la a0, ebreak_msg
     c36:	0007f517          	auipc	a0,0x7f
     c3a:	41a50513          	addi	a0,a0,1050 # 80050 <ebreak_msg>
	jal ra, puts
     c3e:	264020ef          	jal	ra,2ea2 <puts>
	j end_handler
     c42:	0240006f          	j	c66 <end_handler>

00000c46 <handle_illegal_insn>:

handle_illegal_insn:
	la a0, illegal_insn_msg
     c46:	0007f517          	auipc	a0,0x7f
     c4a:	3ba50513          	addi	a0,a0,954 # 80000 <illegal_insn_msg>
	jal ra, puts
     c4e:	254020ef          	jal	ra,2ea2 <puts>
	j end_handler
     c52:	0140006f          	j	c66 <end_handler>

00000c56 <handle_unknown>:

handle_unknown:
	la a0, unknown_msg
     c56:	0007f517          	auipc	a0,0x7f
     c5a:	41c50513          	addi	a0,a0,1052 # 80072 <unknown_msg>
	jal ra, puts
     c5e:	244020ef          	jal	ra,2ea2 <puts>
	j end_handler
     c62:	0040006f          	j	c66 <end_handler>

00000c66 <end_handler>:

end_handler:
	csrr a0, mepc
     c66:	34102573          	csrr	a0,mepc
	addi a0, a0, 4
     c6a:	00450513          	addi	a0,a0,4
	csrw mepc, a0
     c6e:	34151073          	csrw	mepc,a0
	mret
     c72:	30200073          	mret

00000c76 <verification_irq_handler>:
/* this interrupt can be generated for verification purposes, random or when the PC is equal to a given value*/
verification_irq_handler:
	mret
     c76:	30200073          	mret

00000c7a <handler_irq_uart>:
size_t uart_sink(void *uart, const char *data, size_t len) {
  return uart_write((const uart_t *)uart, (const uint8_t *)data, len);
}

__attribute__((weak, optimize("O0"))) void handler_irq_uart(uint32_t id)
{
     c7a:	1101                	addi	sp,sp,-32
     c7c:	ce22                	sw	s0,28(sp)
     c7e:	1000                	addi	s0,sp,32
     c80:	fea42623          	sw	a0,-20(s0)
 // Replace this function with a non-weak implementation
     c84:	0001                	nop
     c86:	4472                	lw	s0,28(sp)
     c88:	6105                	addi	sp,sp,32
     c8a:	8082                	ret

00000c8c <handler_irq_dummy>:
/*                            LOCAL FUNCTIONS                               */
/**                                                                        **/
/****************************************************************************/

__attribute__((optimize("O0"))) static void handler_irq_dummy( uint32_t dummy )
{
     c8c:	1101                	addi	sp,sp,-32
     c8e:	ce22                	sw	s0,28(sp)
     c90:	1000                	addi	s0,sp,32
     c92:	fea42623          	sw	a0,-20(s0)
}
     c96:	0001                	nop
     c98:	4472                	lw	s0,28(sp)
     c9a:	6105                	addi	sp,sp,32
     c9c:	8082                	ret

00000c9e <gpio_handler_irq_dummy>:
/*                            LOCAL FUNCTIONS                               */
/**                                                                        **/
/****************************************************************************/

__attribute__((optimize("O0"))) static void gpio_handler_irq_dummy( uint32_t dummy )
{
     c9e:	1101                	addi	sp,sp,-32
     ca0:	ce22                	sw	s0,28(sp)
     ca2:	1000                	addi	s0,sp,32
     ca4:	fea42623          	sw	a0,-20(s0)
  return;
     ca8:	0001                	nop
}
     caa:	4472                	lw	s0,28(sp)
     cac:	6105                	addi	sp,sp,32
     cae:	8082                	ret

00000cb0 <handler_irq_i2c>:
     cb0:	1101                	addi	sp,sp,-32
     cb2:	ce22                	sw	s0,28(sp)
     cb4:	1000                	addi	s0,sp,32
     cb6:	fea42623          	sw	a0,-20(s0)
     cba:	fec42503          	lw	a0,-20(s0)
     cbe:	4472                	lw	s0,28(sp)
     cc0:	6105                	addi	sp,sp,32
     cc2:	bf65                	j	c7a <handler_irq_uart>

00000cc4 <fic_irq_timer_1>:
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    return kFastIntrCtrlOk_e;
}

__attribute__((weak, optimize("O0"))) void fic_irq_timer_1(void)
{
     cc4:	1141                	addi	sp,sp,-16
     cc6:	c622                	sw	s0,12(sp)
     cc8:	0800                	addi	s0,sp,16
    /* Users should implement their non-weak version */
}
     cca:	0001                	nop
     ccc:	4432                	lw	s0,12(sp)
     cce:	0141                	addi	sp,sp,16
     cd0:	8082                	ret

00000cd2 <fic_irq_timer_2>:
     cd2:	1141                	addi	sp,sp,-16
     cd4:	c622                	sw	s0,12(sp)
     cd6:	0800                	addi	s0,sp,16
     cd8:	4432                	lw	s0,12(sp)
     cda:	0141                	addi	sp,sp,16
     cdc:	b7e5                	j	cc4 <fic_irq_timer_1>

00000cde <fic_irq_timer_3>:
     cde:	1141                	addi	sp,sp,-16
     ce0:	c622                	sw	s0,12(sp)
     ce2:	0800                	addi	s0,sp,16
     ce4:	4432                	lw	s0,12(sp)
     ce6:	0141                	addi	sp,sp,16
     ce8:	bff1                	j	cc4 <fic_irq_timer_1>

00000cea <fic_irq_spi>:
     cea:	1141                	addi	sp,sp,-16
     cec:	c622                	sw	s0,12(sp)
     cee:	0800                	addi	s0,sp,16
     cf0:	4432                	lw	s0,12(sp)
     cf2:	0141                	addi	sp,sp,16
     cf4:	bfc1                	j	cc4 <fic_irq_timer_1>

00000cf6 <fic_irq_spi_flash>:
     cf6:	1141                	addi	sp,sp,-16
     cf8:	c622                	sw	s0,12(sp)
     cfa:	0800                	addi	s0,sp,16
     cfc:	4432                	lw	s0,12(sp)
     cfe:	0141                	addi	sp,sp,16
     d00:	b7d1                	j	cc4 <fic_irq_timer_1>

00000d02 <fic_irq_gpio_0>:
     d02:	1141                	addi	sp,sp,-16
     d04:	c622                	sw	s0,12(sp)
     d06:	0800                	addi	s0,sp,16
     d08:	4432                	lw	s0,12(sp)
     d0a:	0141                	addi	sp,sp,16
     d0c:	bf65                	j	cc4 <fic_irq_timer_1>

00000d0e <fic_irq_gpio_1>:
     d0e:	1141                	addi	sp,sp,-16
     d10:	c622                	sw	s0,12(sp)
     d12:	0800                	addi	s0,sp,16
     d14:	4432                	lw	s0,12(sp)
     d16:	0141                	addi	sp,sp,16
     d18:	b775                	j	cc4 <fic_irq_timer_1>

00000d1a <fic_irq_gpio_2>:
     d1a:	1141                	addi	sp,sp,-16
     d1c:	c622                	sw	s0,12(sp)
     d1e:	0800                	addi	s0,sp,16
     d20:	4432                	lw	s0,12(sp)
     d22:	0141                	addi	sp,sp,16
     d24:	b745                	j	cc4 <fic_irq_timer_1>

00000d26 <fic_irq_gpio_3>:
     d26:	1141                	addi	sp,sp,-16
     d28:	c622                	sw	s0,12(sp)
     d2a:	0800                	addi	s0,sp,16
     d2c:	4432                	lw	s0,12(sp)
     d2e:	0141                	addi	sp,sp,16
     d30:	bf51                	j	cc4 <fic_irq_timer_1>

00000d32 <fic_irq_gpio_4>:
     d32:	1141                	addi	sp,sp,-16
     d34:	c622                	sw	s0,12(sp)
     d36:	0800                	addi	s0,sp,16
     d38:	4432                	lw	s0,12(sp)
     d3a:	0141                	addi	sp,sp,16
     d3c:	b761                	j	cc4 <fic_irq_timer_1>

00000d3e <fic_irq_gpio_5>:
     d3e:	1141                	addi	sp,sp,-16
     d40:	c622                	sw	s0,12(sp)
     d42:	0800                	addi	s0,sp,16
     d44:	4432                	lw	s0,12(sp)
     d46:	0141                	addi	sp,sp,16
     d48:	bfb5                	j	cc4 <fic_irq_timer_1>

00000d4a <fic_irq_gpio_6>:
     d4a:	1141                	addi	sp,sp,-16
     d4c:	c622                	sw	s0,12(sp)
     d4e:	0800                	addi	s0,sp,16
     d50:	4432                	lw	s0,12(sp)
     d52:	0141                	addi	sp,sp,16
     d54:	bf85                	j	cc4 <fic_irq_timer_1>

00000d56 <fic_irq_gpio_7>:
     d56:	1141                	addi	sp,sp,-16
     d58:	c622                	sw	s0,12(sp)
     d5a:	0800                	addi	s0,sp,16
     d5c:	4432                	lw	s0,12(sp)
     d5e:	0141                	addi	sp,sp,16
     d60:	b795                	j	cc4 <fic_irq_timer_1>

00000d62 <handler_irq_spi>:
     d62:	1101                	addi	sp,sp,-32
     d64:	ce22                	sw	s0,28(sp)
     d66:	1000                	addi	s0,sp,32
     d68:	fea42623          	sw	a0,-20(s0)
     d6c:	fec42503          	lw	a0,-20(s0)
     d70:	4472                	lw	s0,28(sp)
     d72:	6105                	addi	sp,sp,32
     d74:	b719                	j	c7a <handler_irq_uart>

00000d76 <handler_irq_gpio>:
    gpio_handlers[ id - GPIO_INTR_START ]();
     d76:	4781                	li	a5,0
     d78:	8782                	jr	a5

00000d7a <dma_intr_handler_trans_done>:
    return (dma_cb.peri->STATUS & (1U << DMA_STATUS_READY_BIT));
}

__attribute__((weak, optimize("O3"))) void dma_intr_handler_trans_done()
{
}
     d7a:	8082                	ret

00000d7c <handler_irq_dma>:
}
     d7c:	8082                	ret

00000d7e <init_athos>:
    (&rv_plic_peri->LE0)[i] = 0;
     d7e:	300007b7          	lui	a5,0x30000
     d82:	0007a423          	sw	zero,8(a5) # 30000008 <_sp+0x2ff1f758>
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
     d86:	300006b7          	lui	a3,0x30000
    (&rv_plic_peri->LE0)[i] = 0;
     d8a:	0007a623          	sw	zero,12(a5)
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
     d8e:	11068713          	addi	a4,a3,272 # 30000110 <_sp+0x2ff1f860>
    (&rv_plic_peri->LE0)[i] = 0;
     d92:	07c1                	addi	a5,a5,16
    (&rv_plic_peri->PRIO0)[i] = 0;
     d94:	0007a023          	sw	zero,0(a5)
  for(uint8_t i=0; i<RV_PLIC_PARAM_NUM_SRC; i++)
     d98:	0791                	addi	a5,a5,4
     d9a:	fee79de3          	bne	a5,a4,d94 <init_athos+0x16>
    (&rv_plic_peri->IE00)[i] = 0;
     d9e:	2006a023          	sw	zero,512(a3)
     da2:	2006a223          	sw	zero,516(a3)
  rv_plic_peri->THRESHOLD0 = 0;
     da6:	2006a423          	sw	zero,520(a3)
  if(rv_plic_peri->THRESHOLD0 != 0)
     daa:	2086a783          	lw	a5,520(a3)
     dae:	e791                	bnez	a5,dba <init_athos+0x3c>
  rv_plic_peri->MSIP0 = 0;
     db0:	2006a823          	sw	zero,528(a3)
  if(rv_plic_peri->MSIP0 != 0)
     db4:	2106a783          	lw	a5,528(a3)
     db8:	c391                	beqz	a5,dbc <init_athos+0x3e>
     dba:	8082                	ret
  handlers[NULL_INTR] = &handler_irq_dummy;
     dbc:	00080eb7          	lui	t4,0x80
     dc0:	6f05                	lui	t5,0x1

// Interrupt controller variables
plic_result_t plic_res;

void init_athos()
{
     dc2:	1141                	addi	sp,sp,-16
     dc4:	6c8e8e93          	addi	t4,t4,1736 # 806c8 <handlers>
     dc8:	c8cf0f13          	addi	t5,t5,-884 # c8c <handler_irq_dummy>
      handlers[i] = &handler_irq_i2c;
     dcc:	6885                	lui	a7,0x1
      handlers[i] = &handler_irq_gpio;
     dce:	6505                	lui	a0,0x1
      handlers[i] = &handler_irq_uart;
     dd0:	6305                	lui	t1,0x1
     dd2:	c626                	sw	s1,12(sp)
     dd4:	c44a                	sw	s2,8(sp)
     dd6:	c24e                	sw	s3,4(sp)
  handlers[NULL_INTR] = &handler_irq_dummy;
     dd8:	01eea023          	sw	t5,0(t4)
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
     ddc:	004e8713          	addi	a4,t4,4
  handlers[NULL_INTR] = &handler_irq_dummy;
     de0:	4785                	li	a5,1
     de2:	4481                	li	s1,0
     de4:	4981                	li	s3,0
     de6:	4901                	li	s2,0
    if ( i <= UART_ID_END)
     de8:	4621                	li	a2,8
    else if ( i <= GPIO_ID_END)
     dea:	02000593          	li	a1,32
    else if ( i <= I2C_ID_END)
     dee:	03000813          	li	a6,48
    else if ( i == SPI_ID)
     df2:	03100e13          	li	t3,49
    else if ( i == I2S_ID)
     df6:	03200f93          	li	t6,50
    else if ( i == DMA_ID)
     dfa:	03300293          	li	t0,51
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
     dfe:	03f00393          	li	t2,63
      handlers[i] = &handler_irq_i2c;
     e02:	cb088893          	addi	a7,a7,-848 # cb0 <handler_irq_i2c>
      handlers[i] = &handler_irq_gpio;
     e06:	d7650513          	addi	a0,a0,-650 # d76 <handler_irq_gpio>
      handlers[i] = &handler_irq_uart;
     e0a:	c7a30313          	addi	t1,t1,-902 # c7a <handler_irq_uart>
     e0e:	a021                	j	e16 <init_athos+0x98>
      handlers[i] = &handler_irq_gpio;
     e10:	c308                	sw	a0,0(a4)
     e12:	0785                	addi	a5,a5,1
     e14:	0711                	addi	a4,a4,4
    if ( i <= UART_ID_END)
     e16:	0ff7f693          	zext.b	a3,a5
     e1a:	00f67963          	bgeu	a2,a5,e2c <init_athos+0xae>
    else if ( i <= GPIO_ID_END)
     e1e:	fed5f9e3          	bgeu	a1,a3,e10 <init_athos+0x92>
    else if ( i <= I2C_ID_END)
     e22:	00d86863          	bltu	a6,a3,e32 <init_athos+0xb4>
      handlers[i] = &handler_irq_i2c;
     e26:	01172023          	sw	a7,0(a4)
     e2a:	b7e5                	j	e12 <init_athos+0x94>
      handlers[i] = &handler_irq_uart;
     e2c:	00672023          	sw	t1,0(a4)
     e30:	b7cd                	j	e12 <init_athos+0x94>
    else if ( i == SPI_ID)
     e32:	0dc68663          	beq	a3,t3,efe <init_athos+0x180>
    else if ( i == I2S_ID)
     e36:	0df68663          	beq	a3,t6,f02 <init_athos+0x184>
    else if ( i == DMA_ID)
     e3a:	0c568663          	beq	a3,t0,f06 <init_athos+0x188>
      handlers[i] = &handler_irq_dummy;
     e3e:	01e72023          	sw	t5,0(a4)
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
     e42:	fc7698e3          	bne	a3,t2,e12 <init_athos+0x94>
     e46:	c491                	beqz	s1,e52 <init_athos+0xd4>
     e48:	6785                	lui	a5,0x1
     e4a:	d7c78793          	addi	a5,a5,-644 # d7c <handler_irq_dma>
     e4e:	0cfea623          	sw	a5,204(t4)
     e52:	00098663          	beqz	s3,e5e <init_athos+0xe0>
     e56:	00000793          	li	a5,0
     e5a:	0cfea423          	sw	a5,200(t4)
     e5e:	00090763          	beqz	s2,e6c <init_athos+0xee>
     e62:	6785                	lui	a5,0x1
     e64:	d6278793          	addi	a5,a5,-670 # d62 <handler_irq_spi>
     e68:	0cfea223          	sw	a5,196(t4)
  (&rv_plic_peri->PRIO0)[irq] = priority;
     e6c:	300007b7          	lui	a5,0x30000
     e70:	0e078713          	addi	a4,a5,224 # 300000e0 <_sp+0x2ff1f830>
     e74:	4685                	li	a3,1
     e76:	c314                	sw	a3,0(a4)
  (&rv_plic_peri->IE00)[offset] = bitfield_write((&rv_plic_peri->IE00)[offset],
     e78:	20478793          	addi	a5,a5,516
     e7c:	4398                	lw	a4,0(a5)
inline uint32_t bitfield_write(uint32_t bitfield,
                                       uint32_t mask, 
                                       uint32_t index,
                                       uint32_t value) 
{
  bitfield &= ~(mask << index);
     e7e:	fff006b7          	lui	a3,0xfff00
     e82:	16fd                	addi	a3,a3,-1
     e84:	8f75                	and	a4,a4,a3
  bitfield |= (value & mask) << index;
     e86:	001006b7          	lui	a3,0x100
     e8a:	8f55                	or	a4,a4,a3
     e8c:	c398                	sw	a4,0(a5)
  // Enable the interrupt in reg 0 
  plic_res = plic_irq_set_enabled(EXT_INTR_0, kPlicToggleEnabled);

  // Enable interrupt on processor side
  // Enable global interrupt for machine-level interrupts
  CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
     e8e:	4621                	li	a2,8
     e90:	30062073          	csrs	mstatus,a2
  // Set mie.MEIE bit to one to enable machine-level external interrupts
  const uint32_t mask = 1 << 11;//IRQ_EXT_ENABLE_OFFSET;
  CSR_SET_BITS(CSR_REG_MIE, mask);
     e94:	6705                	lui	a4,0x1
     e96:	80070793          	addi	a5,a4,-2048 # 800 <main+0x5ea>
     e9a:	3047a073          	csrs	mie,a5
    dma_cb.peri = dma_peri;
     e9e:	000806b7          	lui	a3,0x80
     ea2:	200607b7          	lui	a5,0x20060
     ea6:	6bc68693          	addi	a3,a3,1724 # 806bc <dma_cb>
     eaa:	c69c                	sw	a5,8(a3)
    dma_cb.trans = NULL;
     eac:	0006a023          	sw	zero,0(a3)
    dma_cb.peri->SRC_PTR       = 0;
     eb0:	0007a023          	sw	zero,0(a5) # 20060000 <_sp+0x1ff7f750>
    dma_cb.peri->DST_PTR       = 0;
     eb4:	0007a223          	sw	zero,4(a5)
    dma_cb.peri->SIZE          = 0;
     eb8:	0007a623          	sw	zero,12(a5)
    dma_cb.peri->PTR_INC       = 0;
     ebc:	0007aa23          	sw	zero,20(a5)
    dma_cb.peri->SLOT          = 0;
     ec0:	0007ac23          	sw	zero,24(a5)
    dma_cb.peri->DATA_TYPE     = 0;
     ec4:	0007ae23          	sw	zero,28(a5)
    dma_cb.peri->MODE          = 0;
     ec8:	0207a023          	sw	zero,32(a5)
    dma_cb.peri->WINDOW_SIZE   = 0;
     ecc:	0207a223          	sw	zero,36(a5)
    dma_cb.peri->INTERRUPT_EN  = 0;
     ed0:	0207a623          	sw	zero,44(a5)
    CSR_CLEAR_BITS(CSR_REG_MIE, DMA_CSR_REG_MIE_MASK );
     ed4:	000817b7          	lui	a5,0x81
     ed8:	80078793          	addi	a5,a5,-2048 # 80800 <out+0x8>
     edc:	3047b073          	csrc	mie,a5
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8 );
     ee0:	30062073          	csrs	mstatus,a2
    CSR_SET_BITS(CSR_REG_MIE, DMA_CSR_REG_MIE_MASK );
     ee4:	3047a073          	csrs	mie,a5


  dma_init(NULL);

  //Making the TRNG starts
  *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C3_BIT) | (4 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
     ee8:	200807b7          	lui	a5,0x20080
     eec:	0721                	addi	a4,a4,8
     eee:	c398                	sw	a4,0(a5)
  *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C3_BIT) | (0 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
     ef0:	0007a023          	sw	zero,0(a5) # 20080000 <_sp+0x1ff9f750>




     ef4:	44b2                	lw	s1,12(sp)
     ef6:	4922                	lw	s2,8(sp)
     ef8:	4992                	lw	s3,4(sp)
     efa:	0141                	addi	sp,sp,16
     efc:	8082                	ret
     efe:	4905                	li	s2,1
     f00:	bf09                	j	e12 <init_athos+0x94>
     f02:	4985                	li	s3,1
     f04:	b739                	j	e12 <init_athos+0x94>
     f06:	4485                	li	s1,1
  for( uint8_t i = NULL_INTR +1; i < QTY_INTR; i++ )
     f08:	b729                	j	e12 <init_athos+0x94>

00000f0a <PQCLEAN_KYBER768_CLEAN_polyvec_tobytes>:
    for (i = 0; i < KYBER_K; i++) {
     f0a:	6785                	lui	a5,0x1
     f0c:	80078793          	addi	a5,a5,-2048 # 800 <main+0x5ea>
     f10:	20058813          	addi	a6,a1,512
     f14:	95be                	add	a1,a1,a5
    for (i = 0; i < KYBER_N / 2; i++) {
     f16:	e0080793          	addi	a5,a6,-512
void PQCLEAN_KYBER768_CLEAN_polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a) {
     f1a:	872a                	mv	a4,a0
        asm volatile (".insn r 0x0b, 0x006, 22, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r[3 * i + 0])  : [src] "r" (a->coeffs[2 * i]), [src2] "r" (a->coeffs[2 * i + 1]) :  );
     f1c:	0007d683          	lhu	a3,0(a5)
     f20:	0027d603          	lhu	a2,2(a5)
     f24:	2cc6e68b          	0x2cc6e68b
     f28:	00d70023          	sb	a3,0(a4)
        asm volatile (".insn r 0x0b, 0x006, 23, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r[3 * i + 1])  : [src] "r" (a->coeffs[2 * i]), [src2] "r" (a->coeffs[2 * i + 1]) :  );
     f2c:	0007d683          	lhu	a3,0(a5)
     f30:	0027d603          	lhu	a2,2(a5)
     f34:	2ec6e68b          	0x2ec6e68b
     f38:	00d700a3          	sb	a3,1(a4)
        asm volatile (".insn r 0x0b, 0x006, 24, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r[3 * i + 2])  : [src] "r" (a->coeffs[2 * i]), [src2] "r" (a->coeffs[2 * i + 1]) :  );
     f3c:	0007d683          	lhu	a3,0(a5)
     f40:	0027d603          	lhu	a2,2(a5)
     f44:	30c6e68b          	0x30c6e68b
     f48:	00d70123          	sb	a3,2(a4)
    for (i = 0; i < KYBER_N / 2; i++) {
     f4c:	0791                	addi	a5,a5,4
     f4e:	070d                	addi	a4,a4,3
     f50:	fd0796e3          	bne	a5,a6,f1c <PQCLEAN_KYBER768_CLEAN_polyvec_tobytes+0x12>
    for (i = 0; i < KYBER_K; i++) {
     f54:	20078813          	addi	a6,a5,512
     f58:	18050513          	addi	a0,a0,384
     f5c:	fab81de3          	bne	a6,a1,f16 <PQCLEAN_KYBER768_CLEAN_polyvec_tobytes+0xc>
}
     f60:	8082                	ret

00000f62 <PQCLEAN_KYBER768_CLEAN_polyvec_frombytes>:
    for (i = 0; i < KYBER_K; i++) {
     f62:	48058893          	addi	a7,a1,1152
    for (i = 0; i < KYBER_N / 2; i++) {
     f66:	10100813          	li	a6,257
        PQCLEAN_KYBER768_CLEAN_poly_frombytes(&r->vec[i], a + i * KYBER_POLYBYTES);
     f6a:	87ae                	mv	a5,a1
     f6c:	4685                	li	a3,1
        asm volatile (".insn r 0x0b, 0x006, 25, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[2 * i] )  : [src] "r" (a[3 * i + 0]), [src2] "r" (a[3 * i + 1]) :  );
     f6e:	0007c603          	lbu	a2,0(a5)
     f72:	0017c703          	lbu	a4,1(a5)
     f76:	32e6660b          	0x32e6660b
     f7a:	fff68713          	addi	a4,a3,-1
     f7e:	0706                	slli	a4,a4,0x1
     f80:	972a                	add	a4,a4,a0
     f82:	00c71023          	sh	a2,0(a4)
        asm volatile (".insn r 0x0b, 0x006, 26, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[2 * i + 1] )  : [src] "r" (a[3 * i + 1]), [src2] "r" (a[3 * i + 2]) :  );
     f86:	0017c603          	lbu	a2,1(a5)
     f8a:	0027c703          	lbu	a4,2(a5)
     f8e:	34e6660b          	0x34e6660b
     f92:	00169713          	slli	a4,a3,0x1
     f96:	972a                	add	a4,a4,a0
     f98:	00c71023          	sh	a2,0(a4)
    for (i = 0; i < KYBER_N / 2; i++) {
     f9c:	0689                	addi	a3,a3,2
     f9e:	078d                	addi	a5,a5,3
     fa0:	fd0697e3          	bne	a3,a6,f6e <PQCLEAN_KYBER768_CLEAN_polyvec_frombytes+0xc>
    for (i = 0; i < KYBER_K; i++) {
     fa4:	18058593          	addi	a1,a1,384
     fa8:	20050513          	addi	a0,a0,512
     fac:	fb159fe3          	bne	a1,a7,f6a <PQCLEAN_KYBER768_CLEAN_polyvec_frombytes+0x8>
}
     fb0:	8082                	ret

00000fb2 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery>:
    for (i = 0; i < KYBER_N / 4; i++) {
     fb2:	000808b7          	lui	a7,0x80
     fb6:	2c088893          	addi	a7,a7,704 # 802c0 <PQCLEAN_KYBER768_CLEAN_zetas>
     fba:	08288813          	addi	a6,a7,130
void PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery(poly *r, const poly *a, const poly *b) {
     fbe:	bb100713          	li	a4,-1103
     fc2:	10088893          	addi	a7,a7,256
     fc6:	a021                	j	fce <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery+0x1c>
        PQCLEAN_KYBER768_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQCLEAN_KYBER768_CLEAN_zetas[64 + i]);
     fc8:	00081703          	lh	a4,0(a6)
     fcc:	0809                	addi	a6,a6,2
    //r[0]  = fqmul(r[0], zeta);
    //r[0] += fqmul(a[0], b[0]);
    //r[1]  = fqmul(a[0], b[1]);
    //r[1] += fqmul(a[1], b[0]);

    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r0) : [src] "r" ((int32_t)a[1] * b[1]) : );
     fce:	00259783          	lh	a5,2(a1)
     fd2:	00261683          	lh	a3,2(a2)
     fd6:	02d787b3          	mul	a5,a5,a3
     fda:	0407b78b          	0x407b78b
     fde:	07c2                	slli	a5,a5,0x10
     fe0:	87c1                	srai	a5,a5,0x10
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r1) : [src] "r" ((int32_t)r0*zeta) : );
     fe2:	02e787b3          	mul	a5,a5,a4
     fe6:	0407b78b          	0x407b78b
    
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r2) : [src] "r" ((int32_t)a[0] * b[0]) : );
     fea:	00059683          	lh	a3,0(a1)
     fee:	00061303          	lh	t1,0(a2)
     ff2:	026686b3          	mul	a3,a3,t1
     ff6:	0406b68b          	0x406b68b
    r[0] = r1 + r2;
     ffa:	97b6                	add	a5,a5,a3
     ffc:	00f51023          	sh	a5,0(a0)

    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r3) : [src] "r" ((int32_t)a[0] * b[1]) : );
    1000:	00059783          	lh	a5,0(a1)
    1004:	00261683          	lh	a3,2(a2)
    1008:	02d787b3          	mul	a5,a5,a3
    100c:	0407b78b          	0x407b78b
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r4) : [src] "r" ((int32_t)a[1] * b[0]) : );
    1010:	00259683          	lh	a3,2(a1)
    1014:	00061303          	lh	t1,0(a2)
    1018:	026686b3          	mul	a3,a3,t1
    101c:	0406b68b          	0x406b68b
    r[1] = r3 + r4;
    1020:	97b6                	add	a5,a5,a3
    1022:	00f51123          	sh	a5,2(a0)
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r0) : [src] "r" ((int32_t)a[1] * b[1]) : );
    1026:	00659683          	lh	a3,6(a1)
    102a:	00661783          	lh	a5,6(a2)
    102e:	02f686b3          	mul	a3,a3,a5
    1032:	0406b68b          	0x406b68b
        PQCLEAN_KYBER768_CLEAN_basemul(&r->coeffs[4 * i + 2], &a->coeffs[4 * i + 2], &b->coeffs[4 * i + 2], -PQCLEAN_KYBER768_CLEAN_zetas[64 + i]);
    1036:	40e007b3          	neg	a5,a4
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r1) : [src] "r" ((int32_t)r0*zeta) : );
    103a:	07c2                	slli	a5,a5,0x10
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r0) : [src] "r" ((int32_t)a[1] * b[1]) : );
    103c:	01069713          	slli	a4,a3,0x10
    1040:	8741                	srai	a4,a4,0x10
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r1) : [src] "r" ((int32_t)r0*zeta) : );
    1042:	87c1                	srai	a5,a5,0x10
    1044:	02e787b3          	mul	a5,a5,a4
    1048:	0407b78b          	0x407b78b
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r2) : [src] "r" ((int32_t)a[0] * b[0]) : );
    104c:	00459703          	lh	a4,4(a1)
    1050:	00461683          	lh	a3,4(a2)
    1054:	02d70733          	mul	a4,a4,a3
    1058:	0407370b          	0x407370b
    r[0] = r1 + r2;
    105c:	97ba                	add	a5,a5,a4
    105e:	00f51223          	sh	a5,4(a0)
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r3) : [src] "r" ((int32_t)a[0] * b[1]) : );
    1062:	00459783          	lh	a5,4(a1)
    1066:	00661703          	lh	a4,6(a2)
    106a:	02e787b3          	mul	a5,a5,a4
    106e:	0407b78b          	0x407b78b
    asm volatile (".insn r 0x0b, 0x003, 2, %[dst], %[src], x0\r\n" : [dst] "=r" (r4) : [src] "r" ((int32_t)a[1] * b[0]) : );
    1072:	00659703          	lh	a4,6(a1)
    1076:	00461683          	lh	a3,4(a2)
    107a:	02d70733          	mul	a4,a4,a3
    107e:	0407370b          	0x407370b
    r[1] = r3 + r4;
    1082:	97ba                	add	a5,a5,a4
    1084:	00f51323          	sh	a5,6(a0)
    for (i = 0; i < KYBER_N / 4; i++) {
    1088:	05a1                	addi	a1,a1,8
    108a:	0621                	addi	a2,a2,8
    108c:	0521                	addi	a0,a0,8
    108e:	f3181de3          	bne	a6,a7,fc8 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery+0x16>
}
    1092:	8082                	ret

00001094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>:
void PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b) {
    1094:	de010113          	addi	sp,sp,-544
    1098:	20112e23          	sw	ra,540(sp)
    109c:	20912c23          	sw	s1,536(sp)
    10a0:	21212a23          	sw	s2,532(sp)
    10a4:	21312823          	sw	s3,528(sp)
    10a8:	21412623          	sw	s4,524(sp)
    10ac:	21512423          	sw	s5,520(sp)
    10b0:	8a2a                	mv	s4,a0
    10b2:	21612223          	sw	s6,516(sp)
    10b6:	8aae                	mv	s5,a1
    10b8:	8b32                	mv	s6,a2
    PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
    10ba:	3de5                	jal	fb2 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery>
        PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
    10bc:	200b0613          	addi	a2,s6,512
    10c0:	200a8593          	addi	a1,s5,512
    10c4:	850a                	mv	a0,sp
    10c6:	35f5                	jal	fb2 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery>
    for (i = 0; i < KYBER_N; i++) {
    10c8:	8952                	mv	s2,s4
    10ca:	848a                	mv	s1,sp
    10cc:	20010993          	addi	s3,sp,512
    10d0:	870a                	mv	a4,sp
    10d2:	87d2                	mv	a5,s4
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    10d4:	0007d683          	lhu	a3,0(a5)
    10d8:	00075803          	lhu	a6,0(a4)
    for (i = 0; i < KYBER_N; i++) {
    10dc:	0789                	addi	a5,a5,2
    10de:	0709                	addi	a4,a4,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    10e0:	96c2                	add	a3,a3,a6
    10e2:	fed79f23          	sh	a3,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
    10e6:	ff3717e3          	bne	a4,s3,10d4 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery+0x40>
    10ea:	400b0613          	addi	a2,s6,1024
    10ee:	400a8593          	addi	a1,s5,1024
    10f2:	850a                	mv	a0,sp
    10f4:	3d7d                	jal	fb2 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery>
    10f6:	87d2                	mv	a5,s4
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    10f8:	0007d703          	lhu	a4,0(a5)
    10fc:	0004d683          	lhu	a3,0(s1)
    for (i = 0; i < KYBER_N; i++) {
    1100:	0789                	addi	a5,a5,2
    1102:	0489                	addi	s1,s1,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    1104:	9736                	add	a4,a4,a3
    1106:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
    110a:	ff3497e3          	bne	s1,s3,10f8 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery+0x64>
    for (i = 0; i < KYBER_N; i++) {
    110e:	4781                	li	a5,0
    1110:	10000613          	li	a2,256
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
    1114:	00095683          	lhu	a3,0(s2)
    1118:	0006c68b          	0x6c68b
    111c:	00179713          	slli	a4,a5,0x1
    1120:	9752                	add	a4,a4,s4
    1122:	00d71023          	sh	a3,0(a4)
    for (i = 0; i < KYBER_N; i++) {
    1126:	0785                	addi	a5,a5,1
    1128:	0909                	addi	s2,s2,2
    112a:	fec795e3          	bne	a5,a2,1114 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery+0x80>
}
    112e:	21c12083          	lw	ra,540(sp)
    1132:	21812483          	lw	s1,536(sp)
    1136:	21412903          	lw	s2,532(sp)
    113a:	21012983          	lw	s3,528(sp)
    113e:	20c12a03          	lw	s4,524(sp)
    1142:	20812a83          	lw	s5,520(sp)
    1146:	20412b03          	lw	s6,516(sp)
    114a:	22010113          	addi	sp,sp,544
    114e:	8082                	ret

00001150 <rej_uniform>:
        if (val0 < KYBER_Q) {
    1150:	6e05                	lui	t3,0x1
    while (ctr < len && pos + 3 <= buflen) {
    1152:	4e8d                	li	t4,3
                                unsigned int buflen) {
    1154:	8f2a                	mv	t5,a0
    ctr = pos = 0;
    1156:	4801                	li	a6,0
        if (val0 < KYBER_Q) {
    1158:	d00e0e13          	addi	t3,t3,-768 # d00 <fic_irq_spi_flash+0xa>
    while (ctr < len && pos + 3 <= buflen) {
    115c:	40ce8eb3          	sub	t4,t4,a2
        asm volatile (".insn r 0x0b, 0x1, 40, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (val0)  : [src] "r" (buf[pos + 0]), [src2] "r" (buf[pos + 1]) :  );
    1160:	00164783          	lbu	a5,1(a2)
    1164:	00064703          	lbu	a4,0(a2)
    1168:	50f7170b          	0x50f7170b
    116c:	01071893          	slli	a7,a4,0x10
        asm volatile (".insn r 0x0b, 0x1, 41, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (val1)  : [src] "r" (buf[pos + 1]), [src2] "r" (buf[pos + 2]) :  );
    1170:	00264303          	lbu	t1,2(a2)
        asm volatile (".insn r 0x0b, 0x1, 40, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (val0)  : [src] "r" (buf[pos + 0]), [src2] "r" (buf[pos + 1]) :  );
    1174:	0108d893          	srli	a7,a7,0x10
        asm volatile (".insn r 0x0b, 0x1, 41, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (val1)  : [src] "r" (buf[pos + 1]), [src2] "r" (buf[pos + 2]) :  );
    1178:	5267978b          	0x5267978b
    117c:	01079313          	slli	t1,a5,0x10
    1180:	01035313          	srli	t1,t1,0x10
        if (val0 < KYBER_Q) {
    1184:	011e6c63          	bltu	t3,a7,119c <rej_uniform+0x4c>
            r[ctr++] = val0;
    1188:	00181893          	slli	a7,a6,0x1
    118c:	98fa                	add	a7,a7,t5
    118e:	00180513          	addi	a0,a6,1
    1192:	00e89023          	sh	a4,0(a7)
        if (ctr < len && val1 < KYBER_Q) {
    1196:	02b56463          	bltu	a0,a1,11be <rej_uniform+0x6e>
}
    119a:	8082                	ret
        if (ctr < len && val1 < KYBER_Q) {
    119c:	006e6863          	bltu	t3,t1,11ac <rej_uniform+0x5c>
            r[ctr++] = val1;
    11a0:	00181713          	slli	a4,a6,0x1
    11a4:	977a                	add	a4,a4,t5
    11a6:	00f71023          	sh	a5,0(a4)
    11aa:	0805                	addi	a6,a6,1
    while (ctr < len && pos + 3 <= buflen) {
    11ac:	00b87763          	bgeu	a6,a1,11ba <rej_uniform+0x6a>
    11b0:	060d                	addi	a2,a2,3
    11b2:	00ce87b3          	add	a5,t4,a2
    11b6:	faf6f5e3          	bgeu	a3,a5,1160 <rej_uniform+0x10>
    11ba:	8542                	mv	a0,a6
    return ctr;
    11bc:	8082                	ret
        if (ctr < len && val1 < KYBER_Q) {
    11be:	882a                	mv	a6,a0
    11c0:	fe6e70e3          	bgeu	t3,t1,11a0 <rej_uniform+0x50>
    11c4:	b7f5                	j	11b0 <rej_uniform+0x60>

000011c6 <randombytes>:
            out[i] ^= t[i + 4];
        }
    }
}

void randombytes(uint8_t *buf, size_t xlen) {
    11c6:	7159                	addi	sp,sp,-112
    11c8:	00b50733          	add	a4,a0,a1
    11cc:	c03a                	sw	a4,0(sp)
    11ce:	00080737          	lui	a4,0x80
    11d2:	3c070713          	addi	a4,a4,960 # 803c0 <seed>
    11d6:	c6e6                	sw	s9,76(sp)
    11d8:	c63a                	sw	a4,12(sp)
    while (xlen > 0) {
        if (!outleft) {
    11da:	00080cb7          	lui	s9,0x80
    11de:	1c886737          	lui	a4,0x1c886
    11e2:	47070713          	addi	a4,a4,1136 # 1c886470 <_sp+0x1c7a5bc0>
    11e6:	6a4c8c93          	addi	s9,s9,1700 # 806a4 <outleft>
    11ea:	c23a                	sw	a4,4(sp)
    11ec:	000ca783          	lw	a5,0(s9)
    for (loop = 0; loop < 2; ++loop) {
    11f0:	aa66d737          	lui	a4,0xaa66d
void randombytes(uint8_t *buf, size_t xlen) {
    11f4:	d0d2                	sw	s4,96(sp)
    11f6:	ced6                	sw	s5,92(sp)
    11f8:	ccda                	sw	s6,88(sp)
    11fa:	c4ea                	sw	s10,72(sp)
    11fc:	00080b37          	lui	s6,0x80
            if (!++in[0]) {
    1200:	00080d37          	lui	s10,0x80
    1204:	00081ab7          	lui	s5,0x81
            sum += 0x9e3779b9;
    1208:	9e378a37          	lui	s4,0x9e378
    for (loop = 0; loop < 2; ++loop) {
    120c:	2b070713          	addi	a4,a4,688 # aa66d2b0 <_sp+0xaa58ca00>
void randombytes(uint8_t *buf, size_t xlen) {
    1210:	cade                	sw	s7,84(sp)
    1212:	c8e2                	sw	s8,80(sp)
    1214:	c2ee                	sw	s11,68(sp)
    1216:	d6a6                	sw	s1,108(sp)
    1218:	d4ca                	sw	s2,104(sp)
    121a:	d2ce                	sw	s3,100(sp)
    121c:	8c2a                	mv	s8,a0
    while (xlen > 0) {
    121e:	7f8b0b13          	addi	s6,s6,2040 # 807f8 <out>
            if (!++in[0]) {
    1222:	7c8d0d13          	addi	s10,s10,1992 # 807c8 <in>
    1226:	04010b93          	addi	s7,sp,64
        out[i] = seed[24 + i];
    122a:	4d8d                	li	s11,3
    122c:	818a8a93          	addi	s5,s5,-2024 # 80818 <_global_atexit0>
            sum += 0x9e3779b9;
    1230:	9b9a0a13          	addi	s4,s4,-1607 # 9e3779b9 <_sp+0x9e297109>
    for (loop = 0; loop < 2; ++loop) {
    1234:	c43a                	sw	a4,8(sp)
        if (!outleft) {
    1236:	cb9d                	beqz	a5,126c <randombytes+0xa6>
                }
            }
            surf();
            outleft = 8;
        }
        *buf = (uint8_t) out[--outleft];
    1238:	17fd                	addi	a5,a5,-1
    123a:	00279713          	slli	a4,a5,0x2
    123e:	975a                	add	a4,a4,s6
    1240:	4318                	lw	a4,0(a4)
        ++buf;
    1242:	0c05                	addi	s8,s8,1
        *buf = (uint8_t) out[--outleft];
    1244:	00fca023          	sw	a5,0(s9)
    1248:	feec0fa3          	sb	a4,-1(s8)
    while (xlen > 0) {
    124c:	4702                	lw	a4,0(sp)
    124e:	feec14e3          	bne	s8,a4,1236 <randombytes+0x70>
        --xlen;
    }
}
    1252:	54b6                	lw	s1,108(sp)
    1254:	5926                	lw	s2,104(sp)
    1256:	5996                	lw	s3,100(sp)
    1258:	5a06                	lw	s4,96(sp)
    125a:	4af6                	lw	s5,92(sp)
    125c:	4b66                	lw	s6,88(sp)
    125e:	4bd6                	lw	s7,84(sp)
    1260:	4c46                	lw	s8,80(sp)
    1262:	4cb6                	lw	s9,76(sp)
    1264:	4d26                	lw	s10,72(sp)
    1266:	4d96                	lw	s11,68(sp)
    1268:	6165                	addi	sp,sp,112
    126a:	8082                	ret
            if (!++in[0]) {
    126c:	000d2783          	lw	a5,0(s10)
    1270:	0785                	addi	a5,a5,1
    1272:	00fd2023          	sw	a5,0(s10)
    1276:	e395                	bnez	a5,129a <randombytes+0xd4>
                if (!++in[1]) {
    1278:	004d2703          	lw	a4,4(s10)
    127c:	0705                	addi	a4,a4,1
    127e:	00ed2223          	sw	a4,4(s10)
    1282:	ef01                	bnez	a4,129a <randombytes+0xd4>
                    if (!++in[2]) {
    1284:	008d2703          	lw	a4,8(s10)
    1288:	0705                	addi	a4,a4,1
    128a:	00ed2423          	sw	a4,8(s10)
    128e:	e711                	bnez	a4,129a <randombytes+0xd4>
                        ++in[3];
    1290:	00cd2703          	lw	a4,12(s10)
    1294:	0705                	addi	a4,a4,1
    1296:	00ed2623          	sw	a4,12(s10)
    129a:	4732                	lw	a4,12(sp)
    129c:	004d0613          	addi	a2,s10,4
void randombytes(uint8_t *buf, size_t xlen) {
    12a0:	45a5                	li	a1,9
    12a2:	03470693          	addi	a3,a4,52
    12a6:	0818                	addi	a4,sp,16
    12a8:	a029                	j	12b2 <randombytes+0xec>
        t[i] = in[i] ^ seed[12 + i];
    12aa:	421c                	lw	a5,0(a2)
    12ac:	428c                	lw	a1,0(a3)
    12ae:	0611                	addi	a2,a2,4
    12b0:	0691                	addi	a3,a3,4
    12b2:	8fad                	xor	a5,a5,a1
    12b4:	c31c                	sw	a5,0(a4)
    for (i = 0; i < 12; ++i) {
    12b6:	0711                	addi	a4,a4,4
    12b8:	feeb99e3          	bne	s7,a4,12aa <randombytes+0xe4>
        out[i] = seed[24 + i];
    12bc:	47a1                	li	a5,8
    12be:	00fb2423          	sw	a5,8(s6)
    12c2:	4789                	li	a5,2
    12c4:	00fb2823          	sw	a5,16(s6)
    12c8:	479d                	li	a5,7
    12ca:	00fb2a23          	sw	a5,20(s6)
    12ce:	47a5                	li	a5,9
    12d0:	00fb2c23          	sw	a5,24(s6)
    x = t[11];
    12d4:	5e72                	lw	t3,60(sp)
        out[i] = seed[24 + i];
    12d6:	4795                	li	a5,5
    12d8:	42c2                	lw	t0,16(sp)
    12da:	4fd2                	lw	t6,20(sp)
    12dc:	4f62                	lw	t5,24(sp)
    12de:	4ef2                	lw	t4,28(sp)
    12e0:	5362                	lw	t1,56(sp)
    12e2:	58d2                	lw	a7,52(sp)
    12e4:	5842                	lw	a6,48(sp)
    12e6:	5512                	lw	a0,36(sp)
    12e8:	55b2                	lw	a1,44(sp)
    12ea:	5622                	lw	a2,40(sp)
    12ec:	5682                	lw	a3,32(sp)
    12ee:	00fb2e23          	sw	a5,28(s6)
    x = t[11];
    12f2:	e377a7b7          	lui	a5,0xe377a
        out[i] = seed[24 + i];
    12f6:	01bb2023          	sw	s11,0(s6)
    12fa:	01bb2223          	sw	s11,4(s6)
    12fe:	01bb2623          	sw	s11,12(s6)
    x = t[11];
    1302:	b9078993          	addi	s3,a5,-1136 # e3779b90 <_sp+0xe36992e0>
    1306:	448d                	li	s1,3
    1308:	4792                	lw	a5,4(sp)
    130a:	97ce                	add	a5,a5,s3
            sum += 0x9e3779b9;
    130c:	97d2                	add	a5,a5,s4
            MUSH(0, 5)
    130e:	01be5913          	srli	s2,t3,0x1b
    1312:	003e4713          	xori	a4,t3,3
    1316:	005e1393          	slli	t2,t3,0x5
    131a:	0123e3b3          	or	t2,t2,s2
    131e:	973e                	add	a4,a4,a5
    1320:	00774733          	xor	a4,a4,t2
    1324:	92ba                	add	t0,t0,a4
            MUSH(1, 7)
    1326:	0192d913          	srli	s2,t0,0x19
    132a:	0012c713          	xori	a4,t0,1
    132e:	00729393          	slli	t2,t0,0x7
    1332:	0123e3b3          	or	t2,t2,s2
    1336:	973e                	add	a4,a4,a5
    1338:	00774733          	xor	a4,a4,t2
    133c:	9fba                	add	t6,t6,a4
            MUSH(2, 9)
    133e:	017fd913          	srli	s2,t6,0x17
    1342:	004fc713          	xori	a4,t6,4
    1346:	009f9393          	slli	t2,t6,0x9
    134a:	0123e3b3          	or	t2,t2,s2
    134e:	973e                	add	a4,a4,a5
    1350:	00774733          	xor	a4,a4,t2
    1354:	9f3a                	add	t5,t5,a4
            MUSH(3, 13)
    1356:	013f5913          	srli	s2,t5,0x13
    135a:	001f4713          	xori	a4,t5,1
    135e:	00df1393          	slli	t2,t5,0xd
    1362:	0123e3b3          	or	t2,t2,s2
    1366:	973e                	add	a4,a4,a5
    1368:	00774733          	xor	a4,a4,t2
    136c:	9eba                	add	t4,t4,a4
            MUSH(4, 5)
    136e:	01bed913          	srli	s2,t4,0x1b
    1372:	005ec713          	xori	a4,t4,5
    1376:	005e9393          	slli	t2,t4,0x5
    137a:	0123e3b3          	or	t2,t2,s2
    137e:	973e                	add	a4,a4,a5
    1380:	00774733          	xor	a4,a4,t2
    1384:	96ba                	add	a3,a3,a4
            MUSH(5, 7)
    1386:	0196d913          	srli	s2,a3,0x19
    138a:	0096c713          	xori	a4,a3,9
    138e:	00769393          	slli	t2,a3,0x7
    1392:	0123e3b3          	or	t2,t2,s2
    1396:	973e                	add	a4,a4,a5
    1398:	00774733          	xor	a4,a4,t2
    139c:	953a                	add	a0,a0,a4
            MUSH(6, 9)
    139e:	01755913          	srli	s2,a0,0x17
    13a2:	00254713          	xori	a4,a0,2
    13a6:	00951393          	slli	t2,a0,0x9
    13aa:	0123e3b3          	or	t2,t2,s2
    13ae:	973e                	add	a4,a4,a5
    13b0:	00774733          	xor	a4,a4,t2
    13b4:	963a                	add	a2,a2,a4
            MUSH(7, 13)
    13b6:	01365913          	srli	s2,a2,0x13
    13ba:	00664713          	xori	a4,a2,6
    13be:	00d61393          	slli	t2,a2,0xd
    13c2:	0123e3b3          	or	t2,t2,s2
    13c6:	973e                	add	a4,a4,a5
    13c8:	00774733          	xor	a4,a4,t2
    13cc:	95ba                	add	a1,a1,a4
            MUSH(8, 5)
    13ce:	01b5d913          	srli	s2,a1,0x1b
    13d2:	0055c713          	xori	a4,a1,5
    13d6:	00559393          	slli	t2,a1,0x5
    13da:	0123e3b3          	or	t2,t2,s2
    13de:	973e                	add	a4,a4,a5
    13e0:	00774733          	xor	a4,a4,t2
    13e4:	983a                	add	a6,a6,a4
            MUSH(9, 7)
    13e6:	01985913          	srli	s2,a6,0x19
    13ea:	00384713          	xori	a4,a6,3
    13ee:	00781393          	slli	t2,a6,0x7
    13f2:	0123e3b3          	or	t2,t2,s2
    13f6:	973e                	add	a4,a4,a5
    13f8:	00774733          	xor	a4,a4,t2
    13fc:	98ba                	add	a7,a7,a4
            MUSH(10, 9)
    13fe:	0178d913          	srli	s2,a7,0x17
    1402:	0058c713          	xori	a4,a7,5
    1406:	00989393          	slli	t2,a7,0x9
    140a:	0123e3b3          	or	t2,t2,s2
    140e:	973e                	add	a4,a4,a5
    1410:	00774733          	xor	a4,a4,t2
    1414:	933a                	add	t1,t1,a4
            MUSH(11, 13)
    1416:	00834713          	xori	a4,t1,8
    141a:	00d31393          	slli	t2,t1,0xd
    141e:	01335913          	srli	s2,t1,0x13
    1422:	973e                	add	a4,a4,a5
    1424:	0123e3b3          	or	t2,t2,s2
    1428:	00774733          	xor	a4,a4,t2
    142c:	9e3a                	add	t3,t3,a4
        for (r = 0; r < 16; ++r) {
    142e:	ed379fe3          	bne	a5,s3,130c <randombytes+0x146>
    1432:	d036                	sw	a3,32(sp)
    1434:	d22a                	sw	a0,36(sp)
    1436:	d432                	sw	a2,40(sp)
    1438:	d62e                	sw	a1,44(sp)
    143a:	d842                	sw	a6,48(sp)
    143c:	da46                	sw	a7,52(sp)
    143e:	dc1a                	sw	t1,56(sp)
    1440:	de72                	sw	t3,60(sp)
    1442:	87da                	mv	a5,s6
    1444:	01010393          	addi	t2,sp,16
            MUSH(4, 5)
    1448:	8736                	mv	a4,a3
    144a:	a021                	j	1452 <randombytes+0x28c>
            out[i] ^= t[i + 4];
    144c:	4384                	lw	s1,0(a5)
    144e:	0103a703          	lw	a4,16(t2)
    1452:	8f25                	xor	a4,a4,s1
    1454:	c398                	sw	a4,0(a5)
        for (i = 0; i < 8; ++i) {
    1456:	0791                	addi	a5,a5,4
    1458:	0391                	addi	t2,t2,4
    145a:	fefa99e3          	bne	s5,a5,144c <randombytes+0x286>
    for (loop = 0; loop < 2; ++loop) {
    145e:	e377a7b7          	lui	a5,0xe377a
    1462:	b9078793          	addi	a5,a5,-1136 # e3779b90 <_sp+0xe36992e0>
    1466:	99be                	add	s3,s3,a5
    1468:	47a2                	lw	a5,8(sp)
    146a:	00f98563          	beq	s3,a5,1474 <randombytes+0x2ae>
            out[i] ^= t[i + 4];
    146e:	000b2483          	lw	s1,0(s6)
    1472:	bd59                	j	1308 <randombytes+0x142>
            outleft = 8;
    1474:	479d                	li	a5,7
    1476:	b3d1                	j	123a <randombytes+0x74>

00001478 <dma_load_transaction.constprop.0.isra.0>:
    dma_cb.trans = p_trans;
    1478:	000807b7          	lui	a5,0x80
    147c:	6bc78793          	addi	a5,a5,1724 # 806bc <dma_cb>
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    1480:	4794                	lw	a3,8(a5)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    1482:	00052803          	lw	a6,0(a0)
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    1486:	00452e83          	lw	t4,4(a0)
    peri_ptr[index] &= ~(DMA_PTR_INC_SRC_PTR_INC_MASK);
    148a:	4ad8                	lw	a4,20(a3)
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    148c:	56d0                	lw	a2,44(a3)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    148e:	00482e03          	lw	t3,4(a6)
    peri_ptr[index] &= ~(DMA_PTR_INC_SRC_PTR_INC_MASK);
    1492:	f0077713          	andi	a4,a4,-256
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    1496:	004ea303          	lw	t1,4(t4)
    peri_ptr[index] &= ~(DMA_PTR_INC_SRC_PTR_INC_MASK);
    149a:	cad8                	sw	a4,20(a3)


uint32_t get_increment_b( dma_target_t * p_tgt )
{
    uint32_t inc_b = 0;
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
    149c:	01482883          	lw	a7,20(a6)
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    14a0:	00166613          	ori	a2,a2,1
    dma_cb.trans = p_trans;
    14a4:	c388                	sw	a0,0(a5)
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    14a6:	d6d0                	sw	a2,44(a3)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    14a8:	01c6a023          	sw	t3,0(a3)
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    14ac:	0066a223          	sw	t1,4(a3)
    uint32_t inc_b = 0;
    14b0:	4781                	li	a5,0
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
    14b2:	00089b63          	bnez	a7,14c8 <dma_load_transaction.constprop.0.isra.0+0x50>
    {
        /* If the transaction increment has been overriden (due to misalignments), then that value is used (it's always set to 1). */
        inc_b = dma_cb.trans->inc_b;
        
        uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
    14b6:	01452883          	lw	a7,20(a0)
        inc_b = ( p_tgt->inc_du * dataSize_b );
    14ba:	00885603          	lhu	a2,8(a6)
        uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
    14be:	4791                	li	a5,4
    14c0:	4117d7b3          	sra	a5,a5,a7
        inc_b = ( p_tgt->inc_du * dataSize_b );
    14c4:	02c787b3          	mul	a5,a5,a2
    peri_ptr[index] |= (get_increment_b( dma_cb.trans->src ) & DMA_PTR_INC_SRC_PTR_INC_MASK);
    14c8:	0ff7f793          	zext.b	a5,a5
    14cc:	8fd9                	or	a5,a5,a4
    peri_ptr[index] &= ~(DMA_PTR_INC_DST_PTR_INC_MASK << 8);
    14ce:	7741                	lui	a4,0xffff0
    14d0:	0ff70713          	addi	a4,a4,255 # ffff00ff <_sp+0xfff0f84f>
    14d4:	8ff9                	and	a5,a5,a4
    14d6:	cadc                	sw	a5,20(a3)
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
    14d8:	014ea603          	lw	a2,20(t4)
    uint32_t inc_b = 0;
    14dc:	4701                	li	a4,0
    if(  p_tgt->trig  == DMA_TRIG_MEMORY )
    14de:	ea09                	bnez	a2,14f0 <dma_load_transaction.constprop.0.isra.0+0x78>
        uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
    14e0:	4948                	lw	a0,20(a0)
        inc_b = ( p_tgt->inc_du * dataSize_b );
    14e2:	008ed603          	lhu	a2,8(t4)
        uint8_t dataSize_b = DMA_DATA_TYPE_2_SIZE( dma_cb.trans->type );
    14e6:	4711                	li	a4,4
    14e8:	40a75733          	sra	a4,a4,a0
        inc_b = ( p_tgt->inc_du * dataSize_b );
    14ec:	02c70733          	mul	a4,a4,a2
    peri_ptr[index] |= (get_increment_b( dma_cb.trans->dst ) & DMA_PTR_INC_DST_PTR_INC_MASK) << 8;
    14f0:	6641                	lui	a2,0x10
    14f2:	0722                	slli	a4,a4,0x8
    14f4:	167d                	addi	a2,a2,-1
    14f6:	8f71                	and	a4,a4,a2
    14f8:	8f5d                	or	a4,a4,a5
    14fa:	cad8                	sw	a4,20(a3)
    dma_cb.peri->SIZE = size;
    14fc:	c6cc                	sw	a1,12(a3)
}
    14fe:	8082                	ret

00001500 <ntt_driver>:
#include "stdasm.h"



void ntt_driver(uint32_t* Din, uint32_t* Dout)
{
    1500:	7131                	addi	sp,sp,-192
    1502:	db4a                	sw	s2,180(sp)
    uint32_t volatile *ctrl_reg = (uint32_t*)ATHOS_IP_CTRL_START_ADDR;
    uint32_t volatile *Dout_reg_start = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;
    dma_config_flags_t res;

    //Needed to be reset for the new-interrupt
    plic_intr_flag = 0;
    1504:	00080937          	lui	s2,0x80
    //Define the src of DMA transaction
    uint32_t* ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DIN_START_ADDR;
  
    //dma_init(NULL);
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C1_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1508:	6785                	lui	a5,0x1
    plic_intr_flag = 0;
    150a:	6a890913          	addi	s2,s2,1704 # 806a8 <plic_intr_flag>
{
    150e:	dd26                	sw	s1,184(sp)
    1510:	d94e                	sw	s3,176(sp)
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C1_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1512:	80278693          	addi	a3,a5,-2046 # 802 <main+0x5ec>
{
    1516:	df06                	sw	ra,188(sp)
    plic_intr_flag = 0;
    1518:	00090023          	sb	zero,0(s2)
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C1_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    151c:	20080737          	lui	a4,0x20080
    1520:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C1_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1522:	80078793          	addi	a5,a5,-2048
    1526:	c31c                	sw	a5,0(a4)
{
    1528:	872a                	mv	a4,a0

    //Define transaction parameter
    dma_target_t tgt_src = {
    152a:	c6ba                	sw	a4,76(sp)
                                .ptr        = Din,
                                .inc_du     = 1,
                                .trig       = DMA_TRIG_MEMORY,
                                .type       = DMA_DATA_TYPE_WORD,
                                };
    dma_target_t tgt_dst = {
    152c:	f0000737          	lui	a4,0xf0000
    1530:	da3a                	sw	a4,52(sp)
                                .ptr        = ext_addr_4B_PTR,
                                };
    dma_trans_t trans = {
    1532:	00b8                	addi	a4,sp,72
    dma_target_t tgt_src = {
    1534:	4785                	li	a5,1
    1536:	c882                	sw	zero,80(sp)
    dma_trans_t trans = {
    1538:	c53a                	sw	a4,136(sp)
{
    153a:	89ae                	mv	s3,a1
    dma_trans_t trans = {
    153c:	1818                	addi	a4,sp,48
                                .dst        = &tgt_dst,
                                .mode       = DMA_TRANS_MODE_SINGLE,
                                .win_du     = 0,
                                .end        = DMA_TRANS_END_INTR,
                                };
    res = dma_load_transaction(&trans, 1024); //4,0
    153e:	40000593          	li	a1,1024
    1542:	0128                	addi	a0,sp,136
    return (dma_cb.peri->STATUS & (1U << DMA_STATUS_READY_BIT));
    1544:	000804b7          	lui	s1,0x80
    dma_target_t tgt_src = {
    1548:	04f11823          	sh	a5,80(sp)
    dma_trans_t trans = {
    154c:	c73a                	sw	a4,140(sp)
    154e:	d53e                	sw	a5,168(sp)
    dma_target_t tgt_src = {
    1550:	c482                	sw	zero,72(sp)
    1552:	ca82                	sw	zero,84(sp)
    1554:	cc82                	sw	zero,88(sp)
    1556:	ce82                	sw	zero,92(sp)
    dma_target_t tgt_dst = {
    1558:	d802                	sw	zero,48(sp)
    155a:	dc02                	sw	zero,56(sp)
    155c:	de02                	sw	zero,60(sp)
    155e:	c082                	sw	zero,64(sp)
    1560:	c282                	sw	zero,68(sp)
    dma_trans_t trans = {
    1562:	c902                	sw	zero,144(sp)
    1564:	cb02                	sw	zero,148(sp)
    1566:	cd02                	sw	zero,152(sp)
    1568:	cf02                	sw	zero,156(sp)
    156a:	d102                	sw	zero,160(sp)
    156c:	d302                	sw	zero,164(sp)
    156e:	d702                	sw	zero,172(sp)
    1570:	6bc48493          	addi	s1,s1,1724 # 806bc <dma_cb>
    res = dma_load_transaction(&trans, 1024); //4,0
    1574:	3711                	jal	1478 <dma_load_transaction.constprop.0.isra.0>
    1576:	449c                	lw	a5,8(s1)
 
    //Wait for the DMA transaction to finish
    do{
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1578:	4701                	li	a4,0
        if ( dma_is_ready() == 0 ) {
            wait_for_interrupt();
        }
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    157a:	46a1                	li	a3,8
    157c:	4b9c                	lw	a5,16(a5)
    157e:	8b85                	andi	a5,a5,1
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1580:	30072073          	csrs	mstatus,a4
        if ( dma_is_ready() == 0 ) {
    1584:	c3cd                	beqz	a5,1626 <ntt_driver+0x126>
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1586:	47a1                	li	a5,8
    1588:	3007a073          	csrs	mstatus,a5
    }
    while( !dma_is_ready());

    //Start IP execution
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C0_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    158c:	6785                	lui	a5,0x1
    158e:	20080737          	lui	a4,0x20080
    1592:	80178693          	addi	a3,a5,-2047 # 801 <main+0x5eb>
    1596:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C0_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1598:	80078793          	addi	a5,a5,-2048
    159c:	c31c                	sw	a5,0(a4)

    //Wait for IP interrupt
    while(plic_intr_flag==0) {
    159e:	00094783          	lbu	a5,0(s2)
    15a2:	e791                	bnez	a5,15ae <ntt_driver+0xae>
 * Hints to the processor that we don't have anything better to be doing, and to
 * go into low-power mode until an interrupt is serviced.
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) { asm volatile("wfi"); }
    15a4:	10500073          	wfi
    15a8:	00094783          	lbu	a5,0(s2)
    15ac:	dfe5                	beqz	a5,15a4 <ntt_driver+0xa4>
        wait_for_interrupt();
    }

    //Read the output of the IP
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C5_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    15ae:	6785                	lui	a5,0x1
    15b0:	82078693          	addi	a3,a5,-2016 # 820 <main+0x60a>
    15b4:	20080737          	lui	a4,0x20080
    15b8:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C5_BIT) | (2 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    15ba:	80078793          	addi	a5,a5,-2048
    15be:	c31c                	sw	a5,0(a4)
  
    //Define the src of the second DMA transaction
    ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;
    dma_target_t tgt_src2 = {
    15c0:	f00007b7          	lui	a5,0xf0000
    15c4:	0c878793          	addi	a5,a5,200 # f00000c8 <_sp+0xeff1f818>
                                .ptr        = ext_addr_4B_PTR,
                                .trig       = DMA_TRIG_MEMORY,
                                .type       = DMA_DATA_TYPE_WORD,
                              };    
    dma_target_t tgt_dst2 = {
    15c8:	4705                	li	a4,1
    15ca:	c402                	sw	zero,8(sp)
    dma_target_t tgt_src2 = {
    15cc:	ce3e                	sw	a5,28(sp)
                                .dst        = &tgt_dst2,
                                .mode       = DMA_TRANS_MODE_SINGLE,
                                .win_du     = 0,
                                .end        = DMA_TRANS_END_INTR,
                                };
    res = dma_load_transaction(&trans2, 512); //0,4
    15ce:	20000593          	li	a1,512
    dma_trans_t trans2 = {
    15d2:	083c                	addi	a5,sp,24
    res = dma_load_transaction(&trans2, 512); //0,4
    15d4:	1088                	addi	a0,sp,96
    dma_target_t tgt_dst2 = {
    15d6:	00e11423          	sh	a4,8(sp)
    dma_trans_t trans2 = {
    15da:	d0be                	sw	a5,96(sp)
    15dc:	c13a                	sw	a4,128(sp)
    dma_target_t tgt_src2 = {
    15de:	cc02                	sw	zero,24(sp)
    15e0:	d002                	sw	zero,32(sp)
    15e2:	d202                	sw	zero,36(sp)
    15e4:	d402                	sw	zero,40(sp)
    15e6:	d602                	sw	zero,44(sp)
    dma_target_t tgt_dst2 = {
    15e8:	c002                	sw	zero,0(sp)
    15ea:	c602                	sw	zero,12(sp)
    15ec:	c802                	sw	zero,16(sp)
    15ee:	ca02                	sw	zero,20(sp)
    15f0:	c24e                	sw	s3,4(sp)
    dma_trans_t trans2 = {
    15f2:	d482                	sw	zero,104(sp)
    15f4:	d682                	sw	zero,108(sp)
    15f6:	d882                	sw	zero,112(sp)
    15f8:	da82                	sw	zero,116(sp)
    15fa:	dc82                	sw	zero,120(sp)
    15fc:	de82                	sw	zero,124(sp)
    15fe:	c302                	sw	zero,132(sp)
    1600:	d28a                	sw	sp,100(sp)
    res = dma_load_transaction(&trans2, 512); //0,4
    1602:	3d9d                	jal	1478 <dma_load_transaction.constprop.0.isra.0>
    1604:	449c                	lw	a5,8(s1)

    //Wait for the DMA transaction to finish
    do{
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1606:	4701                	li	a4,0
        if ( dma_is_ready() == 0 ) {
            wait_for_interrupt();
        }
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1608:	46a1                	li	a3,8
    160a:	4b9c                	lw	a5,16(a5)
    160c:	8b85                	andi	a5,a5,1
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    160e:	30072073          	csrs	mstatus,a4
        if ( dma_is_ready() == 0 ) {
    1612:	c39d                	beqz	a5,1638 <ntt_driver+0x138>
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1614:	47a1                	li	a5,8
    1616:	3007a073          	csrs	mstatus,a5
    }
    while( ! dma_is_ready());

}
    161a:	50fa                	lw	ra,188(sp)
    161c:	54ea                	lw	s1,184(sp)
    161e:	595a                	lw	s2,180(sp)
    1620:	59ca                	lw	s3,176(sp)
    1622:	6129                	addi	sp,sp,192
    1624:	8082                	ret
    1626:	10500073          	wfi
    162a:	449c                	lw	a5,8(s1)
    162c:	4b9c                	lw	a5,16(a5)
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    162e:	3006a073          	csrs	mstatus,a3
    1632:	8b85                	andi	a5,a5,1
    while( !dma_is_ready());
    1634:	d7b1                	beqz	a5,1580 <ntt_driver+0x80>
    1636:	bf99                	j	158c <ntt_driver+0x8c>
    1638:	10500073          	wfi
    163c:	449c                	lw	a5,8(s1)
    163e:	4b9c                	lw	a5,16(a5)
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1640:	3006a073          	csrs	mstatus,a3
    1644:	8b85                	andi	a5,a5,1
    while( ! dma_is_ready());
    1646:	d7e1                	beqz	a5,160e <ntt_driver+0x10e>
    1648:	bfc9                	j	161a <ntt_driver+0x11a>

0000164a <intt_driver>:
#include "fast_intr_ctrl.h"
#include "stdasm.h"

 
void intt_driver(uint32_t* Din, uint32_t* Dout)
{
    164a:	7131                	addi	sp,sp,-192
    164c:	db4a                	sw	s2,180(sp)
    uint32_t volatile *ctrl_reg = (uint32_t*)ATHOS_IP_CTRL_START_ADDR;
    uint32_t volatile *Dout_reg_start = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;
    dma_config_flags_t res;

    //Needed to be reset for the new-interrupt
    plic_intr_flag = 0;
    164e:	00080937          	lui	s2,0x80
    //Define the src of DMA transaction
    uint32_t* ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DIN_START_ADDR;

    //dma_init(NULL);
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C2_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1652:	6785                	lui	a5,0x1
    plic_intr_flag = 0;
    1654:	6a890913          	addi	s2,s2,1704 # 806a8 <plic_intr_flag>
{
    1658:	dd26                	sw	s1,184(sp)
    165a:	d94e                	sw	s3,176(sp)
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C2_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    165c:	c0478693          	addi	a3,a5,-1020 # c04 <sw_irq_handler+0x6>
{
    1660:	df06                	sw	ra,188(sp)
    plic_intr_flag = 0;
    1662:	00090023          	sb	zero,0(s2)
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C2_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1666:	20080737          	lui	a4,0x20080
    166a:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C2_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    166c:	c0078793          	addi	a5,a5,-1024
    1670:	c31c                	sw	a5,0(a4)
{
    1672:	872a                	mv	a4,a0

    //Define transaction parameter
    dma_target_t tgt_src = {
    1674:	c6ba                	sw	a4,76(sp)
                                .ptr        = Din,
                                .inc_du     = 1,
                                .trig       = DMA_TRIG_MEMORY,
                                .type       = DMA_DATA_TYPE_WORD,
                                };
    dma_target_t tgt_dst = {
    1676:	f0000737          	lui	a4,0xf0000
    167a:	da3a                	sw	a4,52(sp)
                                .ptr        = ext_addr_4B_PTR,
                                };
    dma_trans_t trans = {
    167c:	00b8                	addi	a4,sp,72
    dma_target_t tgt_src = {
    167e:	4785                	li	a5,1
    1680:	c882                	sw	zero,80(sp)
    dma_trans_t trans = {
    1682:	c53a                	sw	a4,136(sp)
{
    1684:	89ae                	mv	s3,a1
    dma_trans_t trans = {
    1686:	1818                	addi	a4,sp,48
                                .dst        = &tgt_dst,
                                .mode       = DMA_TRANS_MODE_SINGLE,
                                .win_du     = 0,
                                .end        = DMA_TRANS_END_INTR,
                                };
    res = dma_load_transaction(&trans, 1024); //4,0
    1688:	40000593          	li	a1,1024
    168c:	0128                	addi	a0,sp,136
    168e:	000804b7          	lui	s1,0x80
    dma_target_t tgt_src = {
    1692:	04f11823          	sh	a5,80(sp)
    dma_trans_t trans = {
    1696:	c73a                	sw	a4,140(sp)
    1698:	d53e                	sw	a5,168(sp)
    dma_target_t tgt_src = {
    169a:	c482                	sw	zero,72(sp)
    169c:	ca82                	sw	zero,84(sp)
    169e:	cc82                	sw	zero,88(sp)
    16a0:	ce82                	sw	zero,92(sp)
    dma_target_t tgt_dst = {
    16a2:	d802                	sw	zero,48(sp)
    16a4:	dc02                	sw	zero,56(sp)
    16a6:	de02                	sw	zero,60(sp)
    16a8:	c082                	sw	zero,64(sp)
    16aa:	c282                	sw	zero,68(sp)
    dma_trans_t trans = {
    16ac:	c902                	sw	zero,144(sp)
    16ae:	cb02                	sw	zero,148(sp)
    16b0:	cd02                	sw	zero,152(sp)
    16b2:	cf02                	sw	zero,156(sp)
    16b4:	d102                	sw	zero,160(sp)
    16b6:	d302                	sw	zero,164(sp)
    16b8:	d702                	sw	zero,172(sp)
    16ba:	6bc48493          	addi	s1,s1,1724 # 806bc <dma_cb>
    res = dma_load_transaction(&trans, 1024); //4,0
    16be:	3b6d                	jal	1478 <dma_load_transaction.constprop.0.isra.0>
    16c0:	449c                	lw	a5,8(s1)
    //Wait for the DMA transaction to finish
    do {
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    16c2:	4701                	li	a4,0
        if ( dma_is_ready() == 0 ) {
            wait_for_interrupt();
        }
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    16c4:	46a1                	li	a3,8
    16c6:	4b9c                	lw	a5,16(a5)
    16c8:	8b85                	andi	a5,a5,1
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    16ca:	30072073          	csrs	mstatus,a4
        if ( dma_is_ready() == 0 ) {
    16ce:	c3cd                	beqz	a5,1770 <intt_driver+0x126>
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    16d0:	47a1                	li	a5,8
    16d2:	3007a073          	csrs	mstatus,a5
    }
    while ( ! dma_is_ready());

    //Start IP execution
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C8_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    16d6:	6785                	lui	a5,0x1
    16d8:	20080737          	lui	a4,0x20080
    16dc:	d0078693          	addi	a3,a5,-768 # d00 <fic_irq_spi_flash+0xa>
    16e0:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C8_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    16e2:	c0078793          	addi	a5,a5,-1024
    16e6:	c31c                	sw	a5,0(a4)

    // Wait for IP interrupt
    while(plic_intr_flag==0) {
    16e8:	00094783          	lbu	a5,0(s2)
    16ec:	e791                	bnez	a5,16f8 <intt_driver+0xae>
    16ee:	10500073          	wfi
    16f2:	00094783          	lbu	a5,0(s2)
    16f6:	dfe5                	beqz	a5,16ee <intt_driver+0xa4>
        wait_for_interrupt();
    }

    //Read the output of the IP
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C5_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    16f8:	6785                	lui	a5,0x1
    16fa:	c2078693          	addi	a3,a5,-992 # c20 <sw_irq_handler+0x22>
    16fe:	20080737          	lui	a4,0x20080
    1702:	c314                	sw	a3,0(a4)
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C5_BIT) | (3 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1704:	c0078793          	addi	a5,a5,-1024
    1708:	c31c                	sw	a5,0(a4)
    
    //Define the src of the second DMA transaction
    ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;
    dma_target_t tgt_src2 = {
    170a:	f00007b7          	lui	a5,0xf0000
    170e:	0c878793          	addi	a5,a5,200 # f00000c8 <_sp+0xeff1f818>
                                .ptr        = ext_addr_4B_PTR,
                                .trig       = DMA_TRIG_MEMORY,
                                .type       = DMA_DATA_TYPE_WORD,
                              };      
    dma_target_t tgt_dst2 = {
    1712:	4705                	li	a4,1
    1714:	c402                	sw	zero,8(sp)
    dma_target_t tgt_src2 = {
    1716:	ce3e                	sw	a5,28(sp)
                                .dst        = &tgt_dst2,
                                .mode       = DMA_TRANS_MODE_SINGLE,
                                .win_du     = 0,
                                .end        = DMA_TRANS_END_INTR,
                                };
    res = dma_load_transaction(&trans2, 512); //0,4
    1718:	20000593          	li	a1,512
    dma_trans_t trans2 = {
    171c:	083c                	addi	a5,sp,24
    res = dma_load_transaction(&trans2, 512); //0,4
    171e:	1088                	addi	a0,sp,96
    dma_target_t tgt_dst2 = {
    1720:	00e11423          	sh	a4,8(sp)
    dma_trans_t trans2 = {
    1724:	d0be                	sw	a5,96(sp)
    1726:	c13a                	sw	a4,128(sp)
    dma_target_t tgt_src2 = {
    1728:	cc02                	sw	zero,24(sp)
    172a:	d002                	sw	zero,32(sp)
    172c:	d202                	sw	zero,36(sp)
    172e:	d402                	sw	zero,40(sp)
    1730:	d602                	sw	zero,44(sp)
    dma_target_t tgt_dst2 = {
    1732:	c002                	sw	zero,0(sp)
    1734:	c602                	sw	zero,12(sp)
    1736:	c802                	sw	zero,16(sp)
    1738:	ca02                	sw	zero,20(sp)
    173a:	c24e                	sw	s3,4(sp)
    dma_trans_t trans2 = {
    173c:	d482                	sw	zero,104(sp)
    173e:	d682                	sw	zero,108(sp)
    1740:	d882                	sw	zero,112(sp)
    1742:	da82                	sw	zero,116(sp)
    1744:	dc82                	sw	zero,120(sp)
    1746:	de82                	sw	zero,124(sp)
    1748:	c302                	sw	zero,132(sp)
    174a:	d28a                	sw	sp,100(sp)
    res = dma_load_transaction(&trans2, 512); //0,4
    174c:	3335                	jal	1478 <dma_load_transaction.constprop.0.isra.0>
    174e:	449c                	lw	a5,8(s1)

    do{
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1750:	4701                	li	a4,0
        if ( dma_is_ready() == 0 ) {
            wait_for_interrupt();
        }
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1752:	46a1                	li	a3,8
    1754:	4b9c                	lw	a5,16(a5)
    1756:	8b85                	andi	a5,a5,1
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1758:	30072073          	csrs	mstatus,a4
        if ( dma_is_ready() == 0 ) {
    175c:	c39d                	beqz	a5,1782 <intt_driver+0x138>
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    175e:	47a1                	li	a5,8
    1760:	3007a073          	csrs	mstatus,a5
    }
    while( ! dma_is_ready());

}
    1764:	50fa                	lw	ra,188(sp)
    1766:	54ea                	lw	s1,184(sp)
    1768:	595a                	lw	s2,180(sp)
    176a:	59ca                	lw	s3,176(sp)
    176c:	6129                	addi	sp,sp,192
    176e:	8082                	ret
    1770:	10500073          	wfi
    1774:	449c                	lw	a5,8(s1)
    1776:	4b9c                	lw	a5,16(a5)
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1778:	3006a073          	csrs	mstatus,a3
    177c:	8b85                	andi	a5,a5,1
    while ( ! dma_is_ready());
    177e:	d7b1                	beqz	a5,16ca <intt_driver+0x80>
    1780:	bf99                	j	16d6 <intt_driver+0x8c>
    1782:	10500073          	wfi
    1786:	449c                	lw	a5,8(s1)
    1788:	4b9c                	lw	a5,16(a5)
        CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    178a:	3006a073          	csrs	mstatus,a3
    178e:	8b85                	andi	a5,a5,1
    while( ! dma_is_ready());
    1790:	d7e1                	beqz	a5,1758 <intt_driver+0x10e>
    1792:	bfc9                	j	1764 <intt_driver+0x11a>

00001794 <dma_load_transaction_keccak.isra.0>:
    dma_cb.trans = p_trans;
    1794:	000806b7          	lui	a3,0x80
    1798:	6bc68693          	addi	a3,a3,1724 # 806bc <dma_cb>
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    179c:	469c                	lw	a5,8(a3)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    179e:	410c                	lw	a1,0(a0)
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    17a0:	4158                	lw	a4,4(a0)
    peri_ptr[index] |= (4 & DMA_PTR_INC_DST_PTR_INC_MASK) << 8;
    17a2:	0147a883          	lw	a7,20(a5)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    17a6:	0045a803          	lw	a6,4(a1)
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    17aa:	57d0                	lw	a2,44(a5)
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    17ac:	434c                	lw	a1,4(a4)
    peri_ptr[index] |= (4 & DMA_PTR_INC_DST_PTR_INC_MASK) << 8;
    17ae:	7741                	lui	a4,0xffff0
    17b0:	01177733          	and	a4,a4,a7
    17b4:	40476713          	ori	a4,a4,1028
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    17b8:	00166613          	ori	a2,a2,1
    peri_ptr[index] |= (4 & DMA_PTR_INC_DST_PTR_INC_MASK) << 8;
    17bc:	cbd8                	sw	a4,20(a5)
    dma_cb.peri->SIZE = 200;
    17be:	0c800713          	li	a4,200
    dma_cb.trans = p_trans;
    17c2:	c288                	sw	a0,0(a3)
    dma_cb.peri->INTERRUPT_EN |= INTR_EN_TRANS_DONE;
    17c4:	d7d0                	sw	a2,44(a5)
    dma_cb.peri->SRC_PTR = dma_cb.trans->src->ptr;
    17c6:	0107a023          	sw	a6,0(a5)
    dma_cb.peri->DST_PTR = dma_cb.trans->dst->ptr;
    17ca:	c3cc                	sw	a1,4(a5)
    dma_cb.peri->SIZE = 200;
    17cc:	c7d8                	sw	a4,12(a5)
}
    17ce:	8082                	ret

000017d0 <keccak_ip_driver>:
// To manage DMA
#include "dma.h"

 
void keccak_ip_driver(uint32_t* Din, uint32_t* Dout)
{
    17d0:	7159                	addi	sp,sp,-112
    17d2:	d2ca                	sw	s2,100(sp)
  uint32_t volatile *Din_reg_start = (uint32_t*)ATHOS_IP_DIN_START_ADDR;
  uint32_t volatile *ctrl_reg = (uint32_t*)ATHOS_IP_CTRL_START_ADDR;
  uint32_t volatile *Dout_reg_start = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;


  plic_intr_flag = 0;
    17d4:	00080937          	lui	s2,0x80
    17d8:	6a890913          	addi	s2,s2,1704 # 806a8 <plic_intr_flag>
{
    17dc:	d4a6                	sw	s1,104(sp)
    17de:	d0ce                	sw	s3,96(sp)
    17e0:	d686                	sw	ra,108(sp)
  plic_intr_flag = 0;
    17e2:	00090023          	sb	zero,0(s2)


  uint32_t* ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DIN_START_ADDR;
  *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    17e6:	200807b7          	lui	a5,0x20080
    17ea:	40000713          	li	a4,1024
    17ee:	c398                	sw	a4,0(a5)
{
    17f0:	872a                	mv	a4,a0
  //The DMA is initialized (i.e. Any current transaction is cleaned.)
  //dma_init(NULL);
  dma_config_flags_t res;
  //First DMA transaction consist on loading Din in ATHOS_IP register file
  dma_target_t tgt_src = {
    17f2:	d23a                	sw	a4,36(sp)
                              .ptr        = Din,
                              .inc_du     = 1,
                              .trig       = DMA_TRIG_MEMORY,
                              .type       = DMA_DATA_TYPE_WORD,
                              };
  dma_target_t tgt_dst = {
    17f4:	f0000737          	lui	a4,0xf0000
    17f8:	c63a                	sw	a4,12(sp)
                              .ptr        = ext_addr_4B_PTR,
                              .inc_du     = 1,
                              .trig       = DMA_TRIG_MEMORY,
                              };
  dma_trans_t trans = {
    17fa:	1018                	addi	a4,sp,32
  dma_target_t tgt_src = {
    17fc:	4785                	li	a5,1
    17fe:	d402                	sw	zero,40(sp)
  dma_target_t tgt_dst = {
    1800:	c802                	sw	zero,16(sp)
  dma_trans_t trans = {
    1802:	dc3a                	sw	a4,56(sp)
                              .dst        = &tgt_dst,
                              .mode       = DMA_TRANS_MODE_SINGLE,
                              .win_du     = 0,
                              .end        = DMA_TRANS_END_INTR,
                              };
  res = dma_load_transaction_keccak(&trans);
    1804:	1828                	addi	a0,sp,56
  dma_trans_t trans = {
    1806:	0038                	addi	a4,sp,8
    return (dma_cb.peri->STATUS & (1U << DMA_STATUS_READY_BIT));
    1808:	000804b7          	lui	s1,0x80
  dma_target_t tgt_src = {
    180c:	02f11423          	sh	a5,40(sp)
  dma_target_t tgt_dst = {
    1810:	00f11823          	sh	a5,16(sp)
  dma_trans_t trans = {
    1814:	de3a                	sw	a4,60(sp)
    1816:	ccbe                	sw	a5,88(sp)
{
    1818:	89ae                	mv	s3,a1
  dma_target_t tgt_src = {
    181a:	d002                	sw	zero,32(sp)
    181c:	d602                	sw	zero,44(sp)
    181e:	d802                	sw	zero,48(sp)
    1820:	da02                	sw	zero,52(sp)
  dma_target_t tgt_dst = {
    1822:	c402                	sw	zero,8(sp)
    1824:	ca02                	sw	zero,20(sp)
    1826:	cc02                	sw	zero,24(sp)
    1828:	ce02                	sw	zero,28(sp)
  dma_trans_t trans = {
    182a:	c082                	sw	zero,64(sp)
    182c:	c282                	sw	zero,68(sp)
    182e:	c482                	sw	zero,72(sp)
    1830:	c682                	sw	zero,76(sp)
    1832:	c882                	sw	zero,80(sp)
    1834:	ca82                	sw	zero,84(sp)
    1836:	ce82                	sw	zero,92(sp)
    1838:	6bc48493          	addi	s1,s1,1724 # 806bc <dma_cb>
  res = dma_load_transaction_keccak(&trans);
    183c:	3fa1                	jal	1794 <dma_load_transaction_keccak.isra.0>
    183e:	449c                	lw	a5,8(s1)
  
  do {
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1840:	4701                	li	a4,0
      if ( dma_is_ready() == 0 ) {
          wait_for_interrupt();
      }
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1842:	46a1                	li	a3,8
    1844:	4b9c                	lw	a5,16(a5)
    1846:	8b85                	andi	a5,a5,1
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1848:	30072073          	csrs	mstatus,a4
      if ( dma_is_ready() == 0 ) {
    184c:	c3ad                	beqz	a5,18ae <keccak_ip_driver+0xde>
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    184e:	47a1                	li	a5,8
    1850:	3007a073          	csrs	mstatus,a5
  while ( ! dma_is_ready());;

 

    asm volatile ("": : : "memory");
    *ctrl_reg = (1 << ATHOS_IP_CTRL_CTRL_C0_BIT) | (1 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    1854:	200807b7          	lui	a5,0x20080
    1858:	40100713          	li	a4,1025
    185c:	c398                	sw	a4,0(a5)
    //*ctrl_reg = to_write; 
    asm volatile ("": : : "memory");
    *ctrl_reg = (0 << ATHOS_IP_CTRL_CTRL_C0_BIT) | (1 << ATHOS_IP_CTRL_CTRL_OPERATION_OFFSET);
    185e:	40000713          	li	a4,1024
    1862:	c398                	sw	a4,0(a5)



  // Wait till ATHOS_IP is done
  while(plic_intr_flag==0) {
    1864:	00094783          	lbu	a5,0(s2)
    1868:	e791                	bnez	a5,1874 <keccak_ip_driver+0xa4>
    186a:	10500073          	wfi
    186e:	00094783          	lbu	a5,0(s2)
    1872:	dfe5                	beqz	a5,186a <keccak_ip_driver+0x9a>
      wait_for_interrupt();
  }

  ext_addr_4B_PTR = (uint32_t*)ATHOS_IP_DOUT_START_ADDR;
  tgt_src.ptr = ext_addr_4B_PTR;
    1874:	f00007b7          	lui	a5,0xf0000
    1878:	0c878793          	addi	a5,a5,200 # f00000c8 <_sp+0xeff1f818>
  tgt_dst.ptr = Dout;


  res = dma_load_transaction_keccak(&trans);
    187c:	1828                	addi	a0,sp,56
  tgt_src.ptr = ext_addr_4B_PTR;
    187e:	d23e                	sw	a5,36(sp)
  tgt_dst.ptr = Dout;
    1880:	c64e                	sw	s3,12(sp)
  res = dma_load_transaction_keccak(&trans);
    1882:	3f09                	jal	1794 <dma_load_transaction_keccak.isra.0>
    1884:	449c                	lw	a5,8(s1)


   do{
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    1886:	4701                	li	a4,0
      if ( dma_is_ready() == 0 ) {
          wait_for_interrupt();
      }
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1888:	46a1                	li	a3,8
    188a:	4b9c                	lw	a5,16(a5)
    188c:	8b85                	andi	a5,a5,1
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x0);
    188e:	30072073          	csrs	mstatus,a4
      if ( dma_is_ready() == 0 ) {
    1892:	c79d                	beqz	a5,18c0 <keccak_ip_driver+0xf0>
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    1894:	47a1                	li	a5,8
    1896:	3007a073          	csrs	mstatus,a5
  *ctrl_reg = 0;




}
    189a:	50b6                	lw	ra,108(sp)
  *ctrl_reg = 0;
    189c:	200807b7          	lui	a5,0x20080
    18a0:	0007a023          	sw	zero,0(a5) # 20080000 <_sp+0x1ff9f750>
}
    18a4:	54a6                	lw	s1,104(sp)
    18a6:	5916                	lw	s2,100(sp)
    18a8:	5986                	lw	s3,96(sp)
    18aa:	6165                	addi	sp,sp,112
    18ac:	8082                	ret
    18ae:	10500073          	wfi
    18b2:	449c                	lw	a5,8(s1)
    18b4:	4b9c                	lw	a5,16(a5)
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    18b6:	3006a073          	csrs	mstatus,a3
    18ba:	8b85                	andi	a5,a5,1
  while ( ! dma_is_ready());;
    18bc:	d7d1                	beqz	a5,1848 <keccak_ip_driver+0x78>
    18be:	bf59                	j	1854 <keccak_ip_driver+0x84>
    18c0:	10500073          	wfi
    18c4:	449c                	lw	a5,8(s1)
    18c6:	4b9c                	lw	a5,16(a5)
      CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
    18c8:	3006a073          	csrs	mstatus,a3
    18cc:	8b85                	andi	a5,a5,1
  while( ! dma_is_ready());
    18ce:	d3e1                	beqz	a5,188e <keccak_ip_driver+0xbe>
}
    18d0:	50b6                	lw	ra,108(sp)
  *ctrl_reg = 0;
    18d2:	200807b7          	lui	a5,0x20080
    18d6:	0007a023          	sw	zero,0(a5) # 20080000 <_sp+0x1ff9f750>
}
    18da:	54a6                	lw	s1,104(sp)
    18dc:	5916                	lw	s2,100(sp)
    18de:	5986                	lw	s3,96(sp)
    18e0:	6165                	addi	sp,sp,112
    18e2:	8082                	ret

000018e4 <keccak_squeezeblocks>:
    while (nblocks > 0) {
    18e4:	c5d1                	beqz	a1,1970 <keccak_squeezeblocks+0x8c>
                                 uint64_t *s, uint32_t r) {
    18e6:	1101                	addi	sp,sp,-32
    18e8:	cc26                	sw	s1,24(sp)
    18ea:	ca4a                	sw	s2,20(sp)
    18ec:	c84e                	sw	s3,16(sp)
    18ee:	c652                	sw	s4,12(sp)
    18f0:	c456                	sw	s5,8(sp)
    18f2:	c25a                	sw	s6,4(sp)
    18f4:	c05e                	sw	s7,0(sp)
    18f6:	ce06                	sw	ra,28(sp)
    18f8:	8bae                	mv	s7,a1
    18fa:	8a2a                	mv	s4,a0
    18fc:	8ab2                	mv	s5,a2
    18fe:	8936                	mv	s2,a3
    1900:	ff86fb13          	andi	s6,a3,-8
        x[i] = (uint8_t) (u >> 8 * i);
    1904:	49fd                	li	s3,31
    for (size_t i = 0; i < 8; ++i) {
    1906:	04000493          	li	s1,64
        keccak_ip_driver(s,s);
    190a:	85d6                	mv	a1,s5
    190c:	8556                	mv	a0,s5
    190e:	35c9                	jal	17d0 <keccak_ip_driver>
    1910:	4e81                	li	t4,0
            store64(h + 8 * i, s[i]);
    1912:	01da87b3          	add	a5,s5,t4
    1916:	0047ae03          	lw	t3,4(a5)
    191a:	0007a303          	lw	t1,0(a5)
    for (size_t i = 0; i < 8; ++i) {
    191e:	01da0633          	add	a2,s4,t4
            store64(h + 8 * i, s[i]);
    1922:	4781                	li	a5,0
        x[i] = (uint8_t) (u >> 8 * i);
    1924:	001e1893          	slli	a7,t3,0x1
    1928:	40f98733          	sub	a4,s3,a5
    192c:	00f356b3          	srl	a3,t1,a5
    1930:	00e89733          	sll	a4,a7,a4
    1934:	fe078813          	addi	a6,a5,-32
    1938:	8ed9                	or	a3,a3,a4
    193a:	00084463          	bltz	a6,1942 <keccak_squeezeblocks+0x5e>
    193e:	010e56b3          	srl	a3,t3,a6
    1942:	00d60023          	sb	a3,0(a2) # 10000 <randombytes.c.5b81a8f2+0xbe9>
    for (size_t i = 0; i < 8; ++i) {
    1946:	07a1                	addi	a5,a5,8
    1948:	0605                	addi	a2,a2,1
    194a:	fc979fe3          	bne	a5,s1,1928 <keccak_squeezeblocks+0x44>
        for (size_t i = 0; i < (r >> 3); i++) {
    194e:	0ea1                	addi	t4,t4,8
    1950:	fd6e91e3          	bne	t4,s6,1912 <keccak_squeezeblocks+0x2e>
        nblocks--;
    1954:	1bfd                	addi	s7,s7,-1
        h += r;
    1956:	9a4a                	add	s4,s4,s2
    while (nblocks > 0) {
    1958:	fa0b99e3          	bnez	s7,190a <keccak_squeezeblocks+0x26>
}
    195c:	40f2                	lw	ra,28(sp)
    195e:	44e2                	lw	s1,24(sp)
    1960:	4952                	lw	s2,20(sp)
    1962:	49c2                	lw	s3,16(sp)
    1964:	4a32                	lw	s4,12(sp)
    1966:	4aa2                	lw	s5,8(sp)
    1968:	4b12                	lw	s6,4(sp)
    196a:	4b82                	lw	s7,0(sp)
    196c:	6105                	addi	sp,sp,32
    196e:	8082                	ret
    1970:	8082                	ret

00001972 <keccak_absorb>:
                          size_t mlen, uint8_t p) {
    1972:	7111                	addi	sp,sp,-256
    1974:	d3da                	sw	s6,228(sp)
    1976:	d1de                	sw	s7,224(sp)
    1978:	cfe2                	sw	s8,220(sp)
    197a:	8b2e                	mv	s6,a1
    197c:	8c32                	mv	s8,a2
    197e:	8bb6                	mv	s7,a3
        s[i] = 0;
    1980:	0c800613          	li	a2,200
    1984:	4581                	li	a1,0
                          size_t mlen, uint8_t p) {
    1986:	dda6                	sw	s1,248(sp)
    1988:	dbca                	sw	s2,244(sp)
    198a:	d9ce                	sw	s3,240(sp)
    198c:	d7d2                	sw	s4,236(sp)
    198e:	d5d6                	sw	s5,232(sp)
    1990:	df86                	sw	ra,252(sp)
    1992:	8aaa                	mv	s5,a0
    1994:	893a                	mv	s2,a4
    for (i = 0; i < r / 8; ++i) {
    1996:	003b5a13          	srli	s4,s6,0x3
        s[i] = 0;
    199a:	41a010ef          	jal	ra,2db4 <memset>
    while (mlen >= r) {
    199e:	49fd                	li	s3,31
    19a0:	04000493          	li	s1,64
    19a4:	096be063          	bltu	s7,s6,1a24 <keccak_absorb+0xb2>
        for (i = 0; i < r / 8; ++i) {
    19a8:	8356                	mv	t1,s5
    19aa:	8ee2                	mv	t4,s8
    19ac:	4e01                	li	t3,0
    19ae:	86f6                	mv	a3,t4
    19b0:	4781                	li	a5,0
    uint64_t r = 0;
    19b2:	4501                	li	a0,0
    19b4:	4581                	li	a1,0
    19b6:	a819                	j	19cc <keccak_absorb+0x5a>
        r |= (uint64_t)x[i] << 8 * i;
    19b8:	4801                	li	a6,0
    19ba:	00c71733          	sll	a4,a4,a2
    for (size_t i = 0; i < 8; ++i) {
    19be:	07a1                	addi	a5,a5,8
        r |= (uint64_t)x[i] << 8 * i;
    19c0:	01056533          	or	a0,a0,a6
    19c4:	8dd9                	or	a1,a1,a4
    for (size_t i = 0; i < 8; ++i) {
    19c6:	0685                	addi	a3,a3,1
    19c8:	02978763          	beq	a5,s1,19f6 <keccak_absorb+0x84>
        r |= (uint64_t)x[i] << 8 * i;
    19cc:	fe078613          	addi	a2,a5,-32
    19d0:	0006c703          	lbu	a4,0(a3)
    19d4:	40f988b3          	sub	a7,s3,a5
    19d8:	fe0650e3          	bgez	a2,19b8 <keccak_absorb+0x46>
    19dc:	00175613          	srli	a2,a4,0x1
    19e0:	00f71833          	sll	a6,a4,a5
    19e4:	01165733          	srl	a4,a2,a7
    for (size_t i = 0; i < 8; ++i) {
    19e8:	07a1                	addi	a5,a5,8
        r |= (uint64_t)x[i] << 8 * i;
    19ea:	01056533          	or	a0,a0,a6
    19ee:	8dd9                	or	a1,a1,a4
    for (size_t i = 0; i < 8; ++i) {
    19f0:	0685                	addi	a3,a3,1
    19f2:	fc979de3          	bne	a5,s1,19cc <keccak_absorb+0x5a>
            s[i] ^= load64(m + 8 * i);
    19f6:	00032703          	lw	a4,0(t1)
    19fa:	00432783          	lw	a5,4(t1)
        for (i = 0; i < r / 8; ++i) {
    19fe:	0e05                	addi	t3,t3,1
            s[i] ^= load64(m + 8 * i);
    1a00:	8f29                	xor	a4,a4,a0
    1a02:	8fad                	xor	a5,a5,a1
    1a04:	00e32023          	sw	a4,0(t1)
    1a08:	00f32223          	sw	a5,4(t1)
        for (i = 0; i < r / 8; ++i) {
    1a0c:	0ea1                	addi	t4,t4,8
    1a0e:	0321                	addi	t1,t1,8
    1a10:	f94e6fe3          	bltu	t3,s4,19ae <keccak_absorb+0x3c>
        keccak_ip_driver(s, s);
    1a14:	85d6                	mv	a1,s5
    1a16:	8556                	mv	a0,s5
        mlen -= r;
    1a18:	416b8bb3          	sub	s7,s7,s6
        keccak_ip_driver(s, s);
    1a1c:	3b55                	jal	17d0 <keccak_ip_driver>
        m += r;
    1a1e:	9c5a                	add	s8,s8,s6
    while (mlen >= r) {
    1a20:	f96bf4e3          	bgeu	s7,s6,19a8 <keccak_absorb+0x36>
        t[i] = 0;
    1a24:	865a                	mv	a2,s6
    1a26:	4581                	li	a1,0
    1a28:	0028                	addi	a0,sp,8
    1a2a:	38a010ef          	jal	ra,2db4 <memset>
    for (i = 0; i < mlen; ++i) {
    1a2e:	000b8763          	beqz	s7,1a3c <keccak_absorb+0xca>
        t[i] = m[i];
    1a32:	865e                	mv	a2,s7
    1a34:	85e2                	mv	a1,s8
    1a36:	0028                	addi	a0,sp,8
    1a38:	1c6020ef          	jal	ra,3bfe <memcpy>
    t[i] = p;
    1a3c:	0d0b8793          	addi	a5,s7,208
    1a40:	00278bb3          	add	s7,a5,sp
    t[r - 1] |= 128;
    1a44:	0cfb0793          	addi	a5,s6,207
    t[i] = p;
    1a48:	f32b8c23          	sb	s2,-200(s7)
    t[r - 1] |= 128;
    1a4c:	978a                	add	a5,a5,sp
    1a4e:	f387c703          	lbu	a4,-200(a5)
    1a52:	00810e93          	addi	t4,sp,8
    for (i = 0; i < r / 8; ++i) {
    1a56:	4f01                	li	t5,0
    t[r - 1] |= 128;
    1a58:	f8076713          	ori	a4,a4,-128
    1a5c:	f2e78c23          	sb	a4,-200(a5)
        r |= (uint64_t)x[i] << 8 * i;
    1a60:	4e7d                	li	t3,31
    for (size_t i = 0; i < 8; ++i) {
    1a62:	04000313          	li	t1,64
    for (i = 0; i < r / 8; ++i) {
    1a66:	86f6                	mv	a3,t4
    1a68:	4781                	li	a5,0
    uint64_t r = 0;
    1a6a:	4501                	li	a0,0
    1a6c:	4581                	li	a1,0
    1a6e:	a819                	j	1a84 <keccak_absorb+0x112>
        r |= (uint64_t)x[i] << 8 * i;
    1a70:	4801                	li	a6,0
    1a72:	00c71733          	sll	a4,a4,a2
    for (size_t i = 0; i < 8; ++i) {
    1a76:	07a1                	addi	a5,a5,8
        r |= (uint64_t)x[i] << 8 * i;
    1a78:	01056533          	or	a0,a0,a6
    1a7c:	8dd9                	or	a1,a1,a4
    for (size_t i = 0; i < 8; ++i) {
    1a7e:	0685                	addi	a3,a3,1
    1a80:	02678763          	beq	a5,t1,1aae <keccak_absorb+0x13c>
        r |= (uint64_t)x[i] << 8 * i;
    1a84:	fe078613          	addi	a2,a5,-32
    1a88:	0006c703          	lbu	a4,0(a3)
    1a8c:	40fe08b3          	sub	a7,t3,a5
    1a90:	fe0650e3          	bgez	a2,1a70 <keccak_absorb+0xfe>
    1a94:	00175613          	srli	a2,a4,0x1
    1a98:	00f71833          	sll	a6,a4,a5
    1a9c:	01165733          	srl	a4,a2,a7
    for (size_t i = 0; i < 8; ++i) {
    1aa0:	07a1                	addi	a5,a5,8
        r |= (uint64_t)x[i] << 8 * i;
    1aa2:	01056533          	or	a0,a0,a6
    1aa6:	8dd9                	or	a1,a1,a4
    for (size_t i = 0; i < 8; ++i) {
    1aa8:	0685                	addi	a3,a3,1
    1aaa:	fc679de3          	bne	a5,t1,1a84 <keccak_absorb+0x112>
        s[i] ^= load64(t + 8 * i);
    1aae:	000aa703          	lw	a4,0(s5)
    1ab2:	004aa783          	lw	a5,4(s5)
    for (i = 0; i < r / 8; ++i) {
    1ab6:	0f05                	addi	t5,t5,1
        s[i] ^= load64(t + 8 * i);
    1ab8:	8f29                	xor	a4,a4,a0
    1aba:	8fad                	xor	a5,a5,a1
    1abc:	00eaa023          	sw	a4,0(s5)
    1ac0:	00faa223          	sw	a5,4(s5)
    for (i = 0; i < r / 8; ++i) {
    1ac4:	0ea1                	addi	t4,t4,8
    1ac6:	0aa1                	addi	s5,s5,8
    1ac8:	f94f6fe3          	bltu	t5,s4,1a66 <keccak_absorb+0xf4>
}
    1acc:	50fe                	lw	ra,252(sp)
    1ace:	54ee                	lw	s1,248(sp)
    1ad0:	595e                	lw	s2,244(sp)
    1ad2:	59ce                	lw	s3,240(sp)
    1ad4:	5a3e                	lw	s4,236(sp)
    1ad6:	5aae                	lw	s5,232(sp)
    1ad8:	5b1e                	lw	s6,228(sp)
    1ada:	5b8e                	lw	s7,224(sp)
    1adc:	4c7e                	lw	s8,220(sp)
    1ade:	6111                	addi	sp,sp,256
    1ae0:	8082                	ret

00001ae2 <sha3_512>:
 *
 * Arguments:   - uint8_t *output:      pointer to output
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:   length of input in bytes
 **************************************************/
void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen) {
    1ae2:	712d                	addi	sp,sp,-288
    1ae4:	10912c23          	sw	s1,280(sp)
    1ae8:	86b2                	mv	a3,a2
    1aea:	84aa                	mv	s1,a0
    uint64_t s[25];
    uint8_t t[SHA3_512_RATE];

    /* Absorb input */
    keccak_absorb(s, SHA3_512_RATE, input, inlen, 0x06);
    1aec:	4719                	li	a4,6
    1aee:	862e                	mv	a2,a1
    1af0:	00a8                	addi	a0,sp,72
    1af2:	04800593          	li	a1,72
void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen) {
    1af6:	10112e23          	sw	ra,284(sp)
    keccak_absorb(s, SHA3_512_RATE, input, inlen, 0x06);
    1afa:	3da5                	jal	1972 <keccak_absorb>

    /* Squeeze output */
    keccak_squeezeblocks(t, 1, s, SHA3_512_RATE);
    1afc:	00b0                	addi	a2,sp,72
    1afe:	850a                	mv	a0,sp
    1b00:	4585                	li	a1,1
    1b02:	04800693          	li	a3,72
    1b06:	3bf9                	jal	18e4 <keccak_squeezeblocks>

    for (size_t i = 0; i < 64; i++) {
        output[i] = t[i];
    1b08:	858a                	mv	a1,sp
    1b0a:	8526                	mv	a0,s1
    1b0c:	04000613          	li	a2,64
    1b10:	0ee020ef          	jal	ra,3bfe <memcpy>
    }
    1b14:	11c12083          	lw	ra,284(sp)
    1b18:	11812483          	lw	s1,280(sp)
    1b1c:	6115                	addi	sp,sp,288
    1b1e:	8082                	ret

00001b20 <sha3_256.constprop.0>:
void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen) {
    1b20:	710d                	addi	sp,sp,-352
    1b22:	14912c23          	sw	s1,344(sp)
    1b26:	862e                	mv	a2,a1
    1b28:	84aa                	mv	s1,a0
    keccak_absorb(s, SHA3_256_RATE, input, inlen, 0x06);
    1b2a:	4719                	li	a4,6
    1b2c:	0128                	addi	a0,sp,136
    1b2e:	4a000693          	li	a3,1184
    1b32:	08800593          	li	a1,136
void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen) {
    1b36:	14112e23          	sw	ra,348(sp)
    keccak_absorb(s, SHA3_256_RATE, input, inlen, 0x06);
    1b3a:	3d25                	jal	1972 <keccak_absorb>
    keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
    1b3c:	0130                	addi	a2,sp,136
    1b3e:	850a                	mv	a0,sp
    1b40:	4585                	li	a1,1
    1b42:	08800693          	li	a3,136
    1b46:	3b79                	jal	18e4 <keccak_squeezeblocks>
        output[i] = t[i];
    1b48:	858a                	mv	a1,sp
    1b4a:	8526                	mv	a0,s1
    1b4c:	02000613          	li	a2,32
    1b50:	0ae020ef          	jal	ra,3bfe <memcpy>
}
    1b54:	15c12083          	lw	ra,348(sp)
    1b58:	15812483          	lw	s1,344(sp)
    1b5c:	6135                	addi	sp,sp,352
    1b5e:	8082                	ret

00001b60 <keccak_inc_absorb.constprop.0>:
    while (mlen + s_inc[25] >= r) {
    1b60:	0c852783          	lw	a5,200(a0)
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
    1b64:	1101                	addi	sp,sp,-32
    1b66:	c652                	sw	s4,12(sp)
    1b68:	8a32                	mv	s4,a2
    while (mlen + s_inc[25] >= r) {
    1b6a:	0cc52603          	lw	a2,204(a0)
    1b6e:	00fa06b3          	add	a3,s4,a5
    1b72:	0146b733          	sltu	a4,a3,s4
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
    1b76:	ca4a                	sw	s2,20(sp)
    1b78:	c84e                	sw	s3,16(sp)
    1b7a:	ce06                	sw	ra,28(sp)
    1b7c:	cc26                	sw	s1,24(sp)
    1b7e:	c456                	sw	s5,8(sp)
    1b80:	c25a                	sw	s6,4(sp)
    while (mlen + s_inc[25] >= r) {
    1b82:	9732                	add	a4,a4,a2
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
    1b84:	892a                	mv	s2,a0
    1b86:	89ae                	mv	s3,a1
    while (mlen + s_inc[25] >= r) {
    1b88:	12070663          	beqz	a4,1cb4 <keccak_inc_absorb.constprop.0+0x154>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
    1b8c:	08800a93          	li	s5,136
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1b90:	4b7d                	li	s6,31
    while (mlen + s_inc[25] >= r) {
    1b92:	08700493          	li	s1,135
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
    1b96:	4701                	li	a4,0
    1b98:	03579663          	bne	a5,s5,1bc4 <keccak_inc_absorb.constprop.0+0x64>
    1b9c:	a8b9                	j	1bfa <keccak_inc_absorb.constprop.0+0x9a>
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1b9e:	01089833          	sll	a6,a7,a6
    1ba2:	4881                	li	a7,0
    1ba4:	4390                	lw	a2,0(a5)
    1ba6:	43d4                	lw	a3,4(a5)
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
    1ba8:	0705                	addi	a4,a4,1
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1baa:	011648b3          	xor	a7,a2,a7
    1bae:	0106c6b3          	xor	a3,a3,a6
    1bb2:	c3d4                	sw	a3,4(a5)
    1bb4:	0117a023          	sw	a7,0(a5)
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
    1bb8:	0c892783          	lw	a5,200(s2)
    1bbc:	40fa86b3          	sub	a3,s5,a5
    1bc0:	02d77963          	bgeu	a4,a3,1bf2 <keccak_inc_absorb.constprop.0+0x92>
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1bc4:	97ba                	add	a5,a5,a4
    1bc6:	0077f693          	andi	a3,a5,7
    1bca:	068e                	slli	a3,a3,0x3
    1bcc:	00e98633          	add	a2,s3,a4
    1bd0:	9be1                	andi	a5,a5,-8
    1bd2:	fe068813          	addi	a6,a3,-32
    1bd6:	00064883          	lbu	a7,0(a2)
    1bda:	40db05b3          	sub	a1,s6,a3
    1bde:	97ca                	add	a5,a5,s2
    1be0:	fa085fe3          	bgez	a6,1b9e <keccak_inc_absorb.constprop.0+0x3e>
    1be4:	0018d813          	srli	a6,a7,0x1
    1be8:	00b85833          	srl	a6,a6,a1
    1bec:	00d898b3          	sll	a7,a7,a3
    1bf0:	bf55                	j	1ba4 <keccak_inc_absorb.constprop.0+0x44>
        mlen -= (size_t)(r - s_inc[25]);
    1bf2:	f7878793          	addi	a5,a5,-136
    1bf6:	9a3e                	add	s4,s4,a5
        m += r - s_inc[25];
    1bf8:	99b6                	add	s3,s3,a3
        s_inc[25] = 0;
    1bfa:	4781                	li	a5,0
    1bfc:	4801                	li	a6,0
    1bfe:	0cf92423          	sw	a5,200(s2)
        keccak_ip_driver(s_inc, s_inc);
    1c02:	85ca                	mv	a1,s2
        s_inc[25] = 0;
    1c04:	0d092623          	sw	a6,204(s2)
        keccak_ip_driver(s_inc, s_inc);
    1c08:	854a                	mv	a0,s2
    1c0a:	36d9                	jal	17d0 <keccak_ip_driver>
    while (mlen + s_inc[25] >= r) {
    1c0c:	0c892683          	lw	a3,200(s2)
    1c10:	0cc92603          	lw	a2,204(s2)
    1c14:	00da05b3          	add	a1,s4,a3
    1c18:	0145b733          	sltu	a4,a1,s4
    1c1c:	9732                	add	a4,a4,a2
    1c1e:	87b6                	mv	a5,a3
    1c20:	fb3d                	bnez	a4,1b96 <keccak_inc_absorb.constprop.0+0x36>
    1c22:	f6b4eae3          	bltu	s1,a1,1b96 <keccak_inc_absorb.constprop.0+0x36>
    for (i = 0; i < mlen; i++) {
    1c26:	060a0663          	beqz	s4,1c92 <keccak_inc_absorb.constprop.0+0x132>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
    1c2a:	4701                	li	a4,0
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1c2c:	487d                	li	a6,31
    1c2e:	a839                	j	1c4c <keccak_inc_absorb.constprop.0+0xec>
    1c30:	4388                	lw	a0,0(a5)
    1c32:	43d4                	lw	a3,4(a5)
    1c34:	00c59633          	sll	a2,a1,a2
    1c38:	4581                	li	a1,0
    1c3a:	8da9                	xor	a1,a1,a0
    1c3c:	8eb1                	xor	a3,a3,a2
    for (i = 0; i < mlen; i++) {
    1c3e:	0705                	addi	a4,a4,1
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1c40:	c38c                	sw	a1,0(a5)
    1c42:	c3d4                	sw	a3,4(a5)
    for (i = 0; i < mlen; i++) {
    1c44:	05477363          	bgeu	a4,s4,1c8a <keccak_inc_absorb.constprop.0+0x12a>
    s_inc[25] += mlen;
    1c48:	0c892783          	lw	a5,200(s2)
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1c4c:	97ba                	add	a5,a5,a4
    1c4e:	0077f693          	andi	a3,a5,7
    1c52:	068e                	slli	a3,a3,0x3
    1c54:	00e985b3          	add	a1,s3,a4
    1c58:	9be1                	andi	a5,a5,-8
    1c5a:	fe068613          	addi	a2,a3,-32
    1c5e:	0005c583          	lbu	a1,0(a1)
    1c62:	40d80533          	sub	a0,a6,a3
    1c66:	97ca                	add	a5,a5,s2
    1c68:	fc0654e3          	bgez	a2,1c30 <keccak_inc_absorb.constprop.0+0xd0>
    1c6c:	0015d613          	srli	a2,a1,0x1
    1c70:	00a65633          	srl	a2,a2,a0
    1c74:	00d595b3          	sll	a1,a1,a3
    1c78:	4388                	lw	a0,0(a5)
    1c7a:	43d4                	lw	a3,4(a5)
    for (i = 0; i < mlen; i++) {
    1c7c:	0705                	addi	a4,a4,1
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    1c7e:	8da9                	xor	a1,a1,a0
    1c80:	8eb1                	xor	a3,a3,a2
    1c82:	c38c                	sw	a1,0(a5)
    1c84:	c3d4                	sw	a3,4(a5)
    for (i = 0; i < mlen; i++) {
    1c86:	fd4761e3          	bltu	a4,s4,1c48 <keccak_inc_absorb.constprop.0+0xe8>
    1c8a:	0c892683          	lw	a3,200(s2)
    1c8e:	0cc92603          	lw	a2,204(s2)
    s_inc[25] += mlen;
    1c92:	9a36                	add	s4,s4,a3
}
    1c94:	40f2                	lw	ra,28(sp)
    s_inc[25] += mlen;
    1c96:	00da37b3          	sltu	a5,s4,a3
    1c9a:	97b2                	add	a5,a5,a2
    1c9c:	0d492423          	sw	s4,200(s2)
    1ca0:	0cf92623          	sw	a5,204(s2)
}
    1ca4:	44e2                	lw	s1,24(sp)
    1ca6:	4952                	lw	s2,20(sp)
    1ca8:	49c2                	lw	s3,16(sp)
    1caa:	4a32                	lw	s4,12(sp)
    1cac:	4aa2                	lw	s5,8(sp)
    1cae:	4b12                	lw	s6,4(sp)
    1cb0:	6105                	addi	sp,sp,32
    1cb2:	8082                	ret
    while (mlen + s_inc[25] >= r) {
    1cb4:	08700713          	li	a4,135
    1cb8:	ecd76ae3          	bltu	a4,a3,1b8c <keccak_inc_absorb.constprop.0+0x2c>
    1cbc:	b7bd                	j	1c2a <keccak_inc_absorb.constprop.0+0xca>

00001cbe <print_exc_msg>:
/**
 * Default Error Handling
 * @param msg error message supplied by caller
 * TODO - this will be soon by a real print formatting
 */
static void print_exc_msg(const char *msg) {
    1cbe:	85aa                	mv	a1,a0
  printf("%s", msg);
    1cc0:	00080537          	lui	a0,0x80
static void print_exc_msg(const char *msg) {
    1cc4:	1141                	addi	sp,sp,-16
  printf("%s", msg);
    1cc6:	0b850513          	addi	a0,a0,184 # 800b8 <no_exception_handler_msg+0x23>
static void print_exc_msg(const char *msg) {
    1cca:	c606                	sw	ra,12(sp)
  printf("%s", msg);
    1ccc:	781010ef          	jal	ra,3c4c <iprintf>
  CSR_READ(CSR_REG_MTVAL, &mtval);
    1cd0:	343025f3          	csrr	a1,mtval
  printf("MTVAL value is 0x%x\n", get_mtval());
    1cd4:	00080537          	lui	a0,0x80
    1cd8:	0bc50513          	addi	a0,a0,188 # 800bc <no_exception_handler_msg+0x27>
    1cdc:	771010ef          	jal	ra,3c4c <iprintf>
  while (1) {
    1ce0:	a001                	j	1ce0 <print_exc_msg+0x22>

00001ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>:
void PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce) {
    1ce2:	7169                	addi	sp,sp,-304
    1ce4:	12912423          	sw	s1,296(sp)
    1ce8:	84aa                	mv	s1,a0
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
    1cea:	0c800513          	li	a0,200
    1cee:	13312023          	sw	s3,288(sp)
    1cf2:	11412e23          	sw	s4,284(sp)
    1cf6:	12112623          	sw	ra,300(sp)
    1cfa:	13212223          	sw	s2,292(sp)
    1cfe:	89ae                	mv	s3,a1
    1d00:	8a32                	mv	s4,a2
    1d02:	6e5010ef          	jal	ra,3be6 <malloc>
    if (state->ctx == NULL) {
    1d06:	14050b63          	beqz	a0,1e5c <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x17a>
    keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
    1d0a:	477d                	li	a4,31
    1d0c:	86d2                	mv	a3,s4
    1d0e:	864e                	mv	a2,s3
    1d10:	08800593          	li	a1,136
    1d14:	892a                	mv	s2,a0
    1d16:	39b1                	jal	1972 <keccak_absorb>
        keccak_ip_driver(s,s);
    1d18:	85ca                	mv	a1,s2
    1d1a:	854a                	mv	a0,s2
    1d1c:	3c55                	jal	17d0 <keccak_ip_driver>
    1d1e:	08810e93          	addi	t4,sp,136
    1d22:	4301                	li	t1,0
        x[i] = (uint8_t) (u >> 8 * i);
    1d24:	4e7d                	li	t3,31
    for (size_t i = 0; i < 8; ++i) {
    1d26:	04000593          	li	a1,64
        for (size_t i = 0; i < (r >> 3); i++) {
    1d2a:	08800f13          	li	t5,136
            store64(h + 8 * i, s[i]);
    1d2e:	006907b3          	add	a5,s2,t1
    1d32:	43c8                	lw	a0,4(a5)
    1d34:	0007a883          	lw	a7,0(a5)
    1d38:	86f6                	mv	a3,t4
    1d3a:	4701                	li	a4,0
        x[i] = (uint8_t) (u >> 8 * i);
    1d3c:	00151813          	slli	a6,a0,0x1
    1d40:	a809                	j	1d52 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x70>
    1d42:	00f557b3          	srl	a5,a0,a5
    1d46:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1d4a:	0721                	addi	a4,a4,8
    1d4c:	0685                	addi	a3,a3,1
    1d4e:	02b70363          	beq	a4,a1,1d74 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x92>
        x[i] = (uint8_t) (u >> 8 * i);
    1d52:	fe070793          	addi	a5,a4,-32 # efffffe0 <_sp+0xeff1f730>
    1d56:	fe07d6e3          	bgez	a5,1d42 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x60>
    1d5a:	40ee0633          	sub	a2,t3,a4
    1d5e:	00e8d7b3          	srl	a5,a7,a4
    1d62:	00c81633          	sll	a2,a6,a2
    1d66:	8fd1                	or	a5,a5,a2
    1d68:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1d6c:	0721                	addi	a4,a4,8
    1d6e:	0685                	addi	a3,a3,1
    1d70:	feb711e3          	bne	a4,a1,1d52 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x70>
        for (size_t i = 0; i < (r >> 3); i++) {
    1d74:	0321                	addi	t1,t1,8
    1d76:	0ea1                	addi	t4,t4,8
    1d78:	fbe31be3          	bne	t1,t5,1d2e <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0x4c>
            output[i] = t[i];
    1d7c:	013c                	addi	a5,sp,136
    1d7e:	0038                	addi	a4,sp,8
    1d80:	10810813          	addi	a6,sp,264
    1d84:	4388                	lw	a0,0(a5)
    1d86:	43cc                	lw	a1,4(a5)
    1d88:	4790                	lw	a2,8(a5)
    1d8a:	47d4                	lw	a3,12(a5)
    1d8c:	c308                	sw	a0,0(a4)
    1d8e:	c34c                	sw	a1,4(a4)
    1d90:	c710                	sw	a2,8(a4)
    1d92:	c754                	sw	a3,12(a4)
    1d94:	07c1                	addi	a5,a5,16
    1d96:	0741                	addi	a4,a4,16
    1d98:	ff0796e3          	bne	a5,a6,1d84 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0xa2>
    free(state->ctx);
    1d9c:	854a                	mv	a0,s2
    1d9e:	655010ef          	jal	ra,3bf2 <free>
static void cbd2(poly *r, const uint8_t buf[2 * KYBER_N / 4]) {
    unsigned int i, j;
    uint32_t t, d;
    int16_t a, b;

    for (i = 0; i < KYBER_N / 8; i++) {
    1da2:	0030                	addi	a2,sp,8
    1da4:	4781                	li	a5,0
        //    b = (d >> (4 * j + 2)) & 0x3;
        //    r->coeffs[8 * i + j] = a - b;
        //}
        asm volatile (".insn i 0x2b, 2, %[dst], %[src], 0\r\n" : [dst] "=r" (d) : [src] "r" (buf + 4 * i) : );

        asm volatile (".insn r 0x0b, 0x5, 0x9, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i])      : [src] "r" (d), [x] "r" (0) : );
    1da6:	4f81                	li	t6,0
        asm volatile (".insn r 0x0b, 0x5, 0x10, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 1]) : [src] "r" (d), [x] "r" (1) : );
    1da8:	4f05                	li	t5,1
        asm volatile (".insn r 0x0b, 0x5, 0x11, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 2]) : [src] "r" (d), [x] "r" (2) : );
    1daa:	4e89                	li	t4,2
        asm volatile (".insn r 0x0b, 0x5, 0x12, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 3]) : [src] "r" (d), [x] "r" (3) : );
    1dac:	4e0d                	li	t3,3
        asm volatile (".insn r 0x0b, 0x5, 0x13, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 4]) : [src] "r" (d), [x] "r" (4) : );
    1dae:	4311                	li	t1,4
        asm volatile (".insn r 0x0b, 0x5, 0x14, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 5]) : [src] "r" (d), [x] "r" (5) : );
    1db0:	4895                	li	a7,5
        asm volatile (".insn r 0x0b, 0x5, 0x15, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 6]) : [src] "r" (d), [x] "r" (6) : );
    1db2:	4819                	li	a6,6
        asm volatile (".insn r 0x0b, 0x5, 0x16, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 7]) : [src] "r" (d), [x] "r" (7) : );
    1db4:	451d                	li	a0,7
    for (i = 0; i < KYBER_N / 8; i++) {
    1db6:	10000593          	li	a1,256
        asm volatile (".insn i 0x2b, 2, %[dst], %[src], 0\r\n" : [dst] "=r" (d) : [src] "r" (buf + 4 * i) : );
    1dba:	0006272b          	0x6272b
        asm volatile (".insn r 0x0b, 0x5, 0x9, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i])      : [src] "r" (d), [x] "r" (0) : );
    1dbe:	13f7528b          	0x13f7528b
    1dc2:	00179693          	slli	a3,a5,0x1
    1dc6:	96a6                	add	a3,a3,s1
    1dc8:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x10, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 1]) : [src] "r" (d), [x] "r" (1) : );
    1dcc:	21e7528b          	0x21e7528b
    1dd0:	00178693          	addi	a3,a5,1
    1dd4:	0686                	slli	a3,a3,0x1
    1dd6:	96a6                	add	a3,a3,s1
    1dd8:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x11, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 2]) : [src] "r" (d), [x] "r" (2) : );
    1ddc:	23d7528b          	0x23d7528b
    1de0:	00278693          	addi	a3,a5,2
    1de4:	0686                	slli	a3,a3,0x1
    1de6:	96a6                	add	a3,a3,s1
    1de8:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x12, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 3]) : [src] "r" (d), [x] "r" (3) : );
    1dec:	25c7528b          	0x25c7528b
    1df0:	00378693          	addi	a3,a5,3
    1df4:	0686                	slli	a3,a3,0x1
    1df6:	96a6                	add	a3,a3,s1
    1df8:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x13, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 4]) : [src] "r" (d), [x] "r" (4) : );
    1dfc:	2667528b          	0x2667528b
    1e00:	00478693          	addi	a3,a5,4
    1e04:	0686                	slli	a3,a3,0x1
    1e06:	96a6                	add	a3,a3,s1
    1e08:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x14, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 5]) : [src] "r" (d), [x] "r" (5) : );
    1e0c:	2917528b          	0x2917528b
    1e10:	00578693          	addi	a3,a5,5
    1e14:	0686                	slli	a3,a3,0x1
    1e16:	96a6                	add	a3,a3,s1
    1e18:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x15, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 6]) : [src] "r" (d), [x] "r" (6) : );
    1e1c:	2b07528b          	0x2b07528b
    1e20:	00678693          	addi	a3,a5,6
    1e24:	0686                	slli	a3,a3,0x1
    1e26:	96a6                	add	a3,a3,s1
    1e28:	00569023          	sh	t0,0(a3)
        asm volatile (".insn r 0x0b, 0x5, 0x16, %[dst], %[src], %[x]\r\n" : [dst] "=r" (r->coeffs[8 * i + 7]) : [src] "r" (d), [x] "r" (7) : );
    1e2c:	2ca7570b          	0x2ca7570b
    1e30:	00778693          	addi	a3,a5,7
    1e34:	0686                	slli	a3,a3,0x1
    1e36:	96a6                	add	a3,a3,s1
    1e38:	00e69023          	sh	a4,0(a3)
    for (i = 0; i < KYBER_N / 8; i++) {
    1e3c:	07a1                	addi	a5,a5,8
    1e3e:	0611                	addi	a2,a2,4
    1e40:	f6b79de3          	bne	a5,a1,1dba <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1+0xd8>
}
    1e44:	12c12083          	lw	ra,300(sp)
    1e48:	12812483          	lw	s1,296(sp)
    1e4c:	12412903          	lw	s2,292(sp)
    1e50:	12012983          	lw	s3,288(sp)
    1e54:	11c12a03          	lw	s4,284(sp)
    1e58:	6155                	addi	sp,sp,304
    1e5a:	8082                	ret
        exit(111);
    1e5c:	06f00513          	li	a0,111
    1e60:	b8cfe0ef          	jal	ra,1ec <exit>

00001e64 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0>:
void PQCLEAN_KYBER768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
    1e64:	da010113          	addi	sp,sp,-608
    1e68:	24912c23          	sw	s1,600(sp)
    memcpy(extseed, seed, KYBER_SYMBYTES);
    1e6c:	02000613          	li	a2,32
void PQCLEAN_KYBER768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
    1e70:	84aa                	mv	s1,a0
    memcpy(extseed, seed, KYBER_SYMBYTES);
    1e72:	0808                	addi	a0,sp,16
void PQCLEAN_KYBER768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
    1e74:	25312823          	sw	s3,592(sp)
    1e78:	23912c23          	sw	s9,568(sp)
    1e7c:	24112e23          	sw	ra,604(sp)
    1e80:	25212a23          	sw	s2,596(sp)
    1e84:	25412623          	sw	s4,588(sp)
    1e88:	25512423          	sw	s5,584(sp)
    1e8c:	25612223          	sw	s6,580(sp)
    1e90:	25712023          	sw	s7,576(sp)
    1e94:	23812e23          	sw	s8,572(sp)
    1e98:	23a12a23          	sw	s10,564(sp)
    1e9c:	23b12823          	sw	s11,560(sp)
    for (i = 0; i < KYBER_K; i++) {
    1ea0:	4981                	li	s3,0
    memcpy(extseed, seed, KYBER_SYMBYTES);
    1ea2:	55d010ef          	jal	ra,3bfe <memcpy>
    keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
    1ea6:	4cfd                	li	s9,31
    1ea8:	0ff9f793          	zext.b	a5,s3
    1eac:	c63e                	sw	a5,12(sp)
void PQCLEAN_KYBER768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
    1eae:	8a26                	mv	s4,s1
        for (j = 0; j < KYBER_K; j++) {
    1eb0:	4901                	li	s2,0
            while (ctr < KYBER_N) {
    1eb2:	0ff00a93          	li	s5,255
                extseed[KYBER_SYMBYTES + 1] = (uint8_t)i;
    1eb6:	47b2                	lw	a5,12(sp)
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
    1eb8:	0c800513          	li	a0,200
                extseed[KYBER_SYMBYTES + 0] = (uint8_t)j;
    1ebc:	03210823          	sb	s2,48(sp)
                extseed[KYBER_SYMBYTES + 1] = (uint8_t)i;
    1ec0:	02f108a3          	sb	a5,49(sp)
    1ec4:	523010ef          	jal	ra,3be6 <malloc>
    1ec8:	8d2a                	mv	s10,a0
    if (state->ctx == NULL) {
    1eca:	16050263          	beqz	a0,202e <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x1ca>
    keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
    1ece:	477d                	li	a4,31
    1ed0:	02200693          	li	a3,34
    1ed4:	0810                	addi	a2,sp,16
    1ed6:	0a800593          	li	a1,168
    1eda:	3c61                	jal	1972 <keccak_absorb>
    1edc:	03410d93          	addi	s11,sp,52
    for (size_t i = 0; i < 8; ++i) {
    1ee0:	04000c13          	li	s8,64
        for (size_t i = 0; i < (r >> 3); i++) {
    1ee4:	0a800b13          	li	s6,168
        keccak_ip_driver(s,s);
    1ee8:	856a                	mv	a0,s10
    1eea:	85ea                	mv	a1,s10
    1eec:	8e5ff0ef          	jal	ra,17d0 <keccak_ip_driver>
    1ef0:	4501                	li	a0,0
            store64(h + 8 * i, s[i]);
    1ef2:	00ad07b3          	add	a5,s10,a0
    1ef6:	43cc                	lw	a1,4(a5)
    1ef8:	0007a883          	lw	a7,0(a5)
    1efc:	00ad86b3          	add	a3,s11,a0
    1f00:	4701                	li	a4,0
        x[i] = (uint8_t) (u >> 8 * i);
    1f02:	00159813          	slli	a6,a1,0x1
    1f06:	a809                	j	1f18 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0xb4>
    1f08:	00f5d7b3          	srl	a5,a1,a5
    1f0c:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1f10:	0721                	addi	a4,a4,8
    1f12:	0685                	addi	a3,a3,1
    1f14:	03870363          	beq	a4,s8,1f3a <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0xd6>
        x[i] = (uint8_t) (u >> 8 * i);
    1f18:	fe070793          	addi	a5,a4,-32
    1f1c:	fe07d6e3          	bgez	a5,1f08 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0xa4>
    1f20:	40ec8633          	sub	a2,s9,a4
    1f24:	00e8d7b3          	srl	a5,a7,a4
    1f28:	00c81633          	sll	a2,a6,a2
    1f2c:	8fd1                	or	a5,a5,a2
    1f2e:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1f32:	0721                	addi	a4,a4,8
    1f34:	0685                	addi	a3,a3,1
    1f36:	ff8711e3          	bne	a4,s8,1f18 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0xb4>
        for (size_t i = 0; i < (r >> 3); i++) {
    1f3a:	0521                	addi	a0,a0,8
    1f3c:	fb651be3          	bne	a0,s6,1ef2 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x8e>
        h += r;
    1f40:	0a8d8d93          	addi	s11,s11,168
    while (nblocks > 0) {
    1f44:	147c                	addi	a5,sp,556
    1f46:	fafd91e3          	bne	s11,a5,1ee8 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x84>
            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
    1f4a:	1f800693          	li	a3,504
    1f4e:	1850                	addi	a2,sp,52
    1f50:	10000593          	li	a1,256
    1f54:	8552                	mv	a0,s4
    1f56:	9faff0ef          	jal	ra,1150 <rej_uniform>
    1f5a:	8b2a                	mv	s6,a0
    for (size_t i = 0; i < 8; ++i) {
    1f5c:	04000d93          	li	s11,64
        for (size_t i = 0; i < (r >> 3); i++) {
    1f60:	0a800b93          	li	s7,168
                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
    1f64:	10000c13          	li	s8,256
            while (ctr < KYBER_N) {
    1f68:	06aaed63          	bltu	s5,a0,1fe2 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x17e>
        keccak_ip_driver(s,s);
    1f6c:	85ea                	mv	a1,s10
    1f6e:	856a                	mv	a0,s10
    1f70:	861ff0ef          	jal	ra,17d0 <keccak_ip_driver>
    1f74:	03410e93          	addi	t4,sp,52
    1f78:	4e01                	li	t3,0
            store64(h + 8 * i, s[i]);
    1f7a:	01cd07b3          	add	a5,s10,t3
    1f7e:	43cc                	lw	a1,4(a5)
    1f80:	0007a803          	lw	a6,0(a5)
    1f84:	86f6                	mv	a3,t4
    1f86:	4701                	li	a4,0
        x[i] = (uint8_t) (u >> 8 * i);
    1f88:	00159513          	slli	a0,a1,0x1
    1f8c:	a809                	j	1f9e <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x13a>
    1f8e:	00f5d7b3          	srl	a5,a1,a5
    1f92:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1f96:	0721                	addi	a4,a4,8
    1f98:	0685                	addi	a3,a3,1
    1f9a:	03b70363          	beq	a4,s11,1fc0 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x15c>
        x[i] = (uint8_t) (u >> 8 * i);
    1f9e:	fe070793          	addi	a5,a4,-32
    1fa2:	fe07d6e3          	bgez	a5,1f8e <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x12a>
    1fa6:	40ec8633          	sub	a2,s9,a4
    1faa:	00e857b3          	srl	a5,a6,a4
    1fae:	00c51633          	sll	a2,a0,a2
    1fb2:	8fd1                	or	a5,a5,a2
    1fb4:	00f68023          	sb	a5,0(a3)
    for (size_t i = 0; i < 8; ++i) {
    1fb8:	0721                	addi	a4,a4,8
    1fba:	0685                	addi	a3,a3,1
    1fbc:	ffb711e3          	bne	a4,s11,1f9e <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x13a>
        for (size_t i = 0; i < (r >> 3); i++) {
    1fc0:	0e21                	addi	t3,t3,8
    1fc2:	0ea1                	addi	t4,t4,8
    1fc4:	fb7e1be3          	bne	t3,s7,1f7a <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x116>
                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
    1fc8:	001b1513          	slli	a0,s6,0x1
    1fcc:	416c05b3          	sub	a1,s8,s6
    1fd0:	0a800693          	li	a3,168
    1fd4:	1850                	addi	a2,sp,52
    1fd6:	9552                	add	a0,a0,s4
    1fd8:	978ff0ef          	jal	ra,1150 <rej_uniform>
    1fdc:	9b2a                	add	s6,s6,a0
            while (ctr < KYBER_N) {
    1fde:	f96af7e3          	bgeu	s5,s6,1f6c <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x108>
        for (j = 0; j < KYBER_K; j++) {
    1fe2:	0905                	addi	s2,s2,1
    1fe4:	478d                	li	a5,3
    1fe6:	200a0a13          	addi	s4,s4,512
    1fea:	ecf916e3          	bne	s2,a5,1eb6 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x52>
    for (i = 0; i < KYBER_K; i++) {
    1fee:	0985                	addi	s3,s3,1
    1ff0:	60048493          	addi	s1,s1,1536
    1ff4:	eb299ae3          	bne	s3,s2,1ea8 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0+0x44>
}
    1ff8:	25c12083          	lw	ra,604(sp)
    1ffc:	25812483          	lw	s1,600(sp)
    2000:	25412903          	lw	s2,596(sp)
    2004:	25012983          	lw	s3,592(sp)
    2008:	24c12a03          	lw	s4,588(sp)
    200c:	24812a83          	lw	s5,584(sp)
    2010:	24412b03          	lw	s6,580(sp)
    2014:	24012b83          	lw	s7,576(sp)
    2018:	23c12c03          	lw	s8,572(sp)
    201c:	23812c83          	lw	s9,568(sp)
    2020:	23412d03          	lw	s10,564(sp)
    2024:	23012d83          	lw	s11,560(sp)
    2028:	26010113          	addi	sp,sp,608
    202c:	8082                	ret
        exit(111);
    202e:	06f00513          	li	a0,111
    2032:	9bafe0ef          	jal	ra,1ec <exit>

00002036 <PQCLEAN_KYBER768_CLEAN_indcpa_enc>:
                                       const uint8_t coins[KYBER_SYMBYTES]) {
    2036:	711d                	addi	sp,sp,-96
    2038:	72f5                	lui	t0,0xffffd
    203a:	cca6                	sw	s1,88(sp)
    203c:	c6d2                	sw	s4,76(sp)
    203e:	84aa                	mv	s1,a0
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(pk, packedpk);
    2040:	6a0d                	lui	s4,0x3
    2042:	7579                	lui	a0,0xffffe
                                       const uint8_t coins[KYBER_SYMBYTES]) {
    2044:	ce86                	sw	ra,92(sp)
    2046:	caca                	sw	s2,84(sp)
    2048:	c8ce                	sw	s3,80(sp)
    204a:	c4d6                	sw	s5,72(sp)
    204c:	c2da                	sw	s6,68(sp)
    204e:	c0de                	sw	s7,64(sp)
    2050:	de62                	sw	s8,60(sp)
    2052:	dc66                	sw	s9,56(sp)
    2054:	da6a                	sw	s10,52(sp)
    2056:	d86e                	sw	s11,48(sp)
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(pk, packedpk);
    2058:	20050513          	addi	a0,a0,512 # ffffe200 <_sp+0xfff1d950>
                                       const uint8_t coins[KYBER_SYMBYTES]) {
    205c:	9116                	add	sp,sp,t0
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(pk, packedpk);
    205e:	020a0793          	addi	a5,s4,32 # 3020 <__swbuf_r+0x78>
    2062:	97aa                	add	a5,a5,a0
    2064:	0818                	addi	a4,sp,16
    2066:	00e78533          	add	a0,a5,a4
                                       const uint8_t coins[KYBER_SYMBYTES]) {
    206a:	8c2e                	mv	s8,a1
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(pk, packedpk);
    206c:	85b2                	mv	a1,a2
                                       const uint8_t coins[KYBER_SYMBYTES]) {
    206e:	8932                	mv	s2,a2
    2070:	89b6                	mv	s3,a3
    PQCLEAN_KYBER768_CLEAN_polyvec_frombytes(pk, packedpk);
    2072:	ef1fe0ef          	jal	ra,f62 <PQCLEAN_KYBER768_CLEAN_polyvec_frombytes>
    memcpy(seed, packedpk + KYBER_POLYVECBYTES, KYBER_SYMBYTES);
    2076:	77f5                	lui	a5,0xffffd
    2078:	020a0713          	addi	a4,s4,32
    207c:	973e                	add	a4,a4,a5
    207e:	081c                	addi	a5,sp,16
    2080:	97ba                	add	a5,a5,a4
    2082:	02000613          	li	a2,32
    2086:	48090593          	addi	a1,s2,1152
    208a:	fe078513          	addi	a0,a5,-32 # ffffcfe0 <_sp+0xfff1c730>
    208e:	c63e                	sw	a5,12(sp)
    2090:	36f010ef          	jal	ra,3bfe <memcpy>
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+0])  : [src] "r" (msg[i]), [src2] "r" (0) :   );
    2094:	7af5                	lui	s5,0xffffd
    2096:	4e85                	li	t4,1
    2098:	4b81                	li	s7,0
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+1])  : [src] "r" (msg[i]), [src2] "r" (1) :   );
    209a:	4b05                	li	s6,1
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+2])  : [src] "r" (msg[i]), [src2] "r" (2) :   );
    209c:	4a09                	li	s4,2
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+3])  : [src] "r" (msg[i]), [src2] "r" (3) :   );
    209e:	408d                	li	ra,3
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+4])  : [src] "r" (msg[i]), [src2] "r" (4) :   );
    20a0:	4391                	li	t2,4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+5])  : [src] "r" (msg[i]), [src2] "r" (5) :   );
    20a2:	4295                	li	t0,5
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+6])  : [src] "r" (msg[i]), [src2] "r" (6) :   );
    20a4:	4f99                	li	t6,6
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+7])  : [src] "r" (msg[i]), [src2] "r" (7) :   );
    20a6:	4f1d                	li	t5,7
    for (i = 0; i < KYBER_N / 8; i++) {
    20a8:	10100c93          	li	s9,257
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+0])  : [src] "r" (msg[i]), [src2] "r" (0) :   );
    20ac:	4732                	lw	a4,12(sp)
    20ae:	fffe8313          	addi	t1,t4,-1
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+2])  : [src] "r" (msg[i]), [src2] "r" (2) :   );
    20b2:	001e8893          	addi	a7,t4,1
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+3])  : [src] "r" (msg[i]), [src2] "r" (3) :   );
    20b6:	002e8693          	addi	a3,t4,2
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+4])  : [src] "r" (msg[i]), [src2] "r" (4) :   );
    20ba:	003e8813          	addi	a6,t4,3
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+5])  : [src] "r" (msg[i]), [src2] "r" (5) :   );
    20be:	004e8513          	addi	a0,t4,4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+6])  : [src] "r" (msg[i]), [src2] "r" (6) :   );
    20c2:	005e8593          	addi	a1,t4,5
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+7])  : [src] "r" (msg[i]), [src2] "r" (7) :   );
    20c6:	006e8613          	addi	a2,t4,6
    20ca:	000c4783          	lbu	a5,0(s8)
    20ce:	0306                	slli	t1,t1,0x1
    20d0:	001e9e13          	slli	t3,t4,0x1
    20d4:	0886                	slli	a7,a7,0x1
    20d6:	0686                	slli	a3,a3,0x1
    20d8:	0806                	slli	a6,a6,0x1
    20da:	0506                	slli	a0,a0,0x1
    20dc:	0586                	slli	a1,a1,0x1
    20de:	0606                	slli	a2,a2,0x1
    20e0:	4921                	li	s2,8
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+0])  : [src] "r" (msg[i]), [src2] "r" (0) :   );
    20e2:	933a                	add	t1,t1,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+1])  : [src] "r" (msg[i]), [src2] "r" (1) :   );
    20e4:	9e3a                	add	t3,t3,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+2])  : [src] "r" (msg[i]), [src2] "r" (2) :   );
    20e6:	98ba                	add	a7,a7,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+3])  : [src] "r" (msg[i]), [src2] "r" (3) :   );
    20e8:	96ba                	add	a3,a3,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+4])  : [src] "r" (msg[i]), [src2] "r" (4) :   );
    20ea:	983a                	add	a6,a6,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+5])  : [src] "r" (msg[i]), [src2] "r" (5) :   );
    20ec:	953a                	add	a0,a0,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+6])  : [src] "r" (msg[i]), [src2] "r" (6) :   );
    20ee:	95ba                	add	a1,a1,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+7])  : [src] "r" (msg[i]), [src2] "r" (7) :   );
    20f0:	963a                	add	a2,a2,a4
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+0])  : [src] "r" (msg[i]), [src2] "r" (0) :   );
    20f2:	3777e70b          	0x3777e70b
    20f6:	20e31023          	sh	a4,512(t1)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+1])  : [src] "r" (msg[i]), [src2] "r" (1) :   );
    20fa:	3767e70b          	0x3767e70b
    20fe:	20ee1023          	sh	a4,512(t3)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+2])  : [src] "r" (msg[i]), [src2] "r" (2) :   );
    2102:	3747e70b          	0x3747e70b
    2106:	20e89023          	sh	a4,512(a7)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+3])  : [src] "r" (msg[i]), [src2] "r" (3) :   );
    210a:	3617e70b          	0x3617e70b
    210e:	20e69023          	sh	a4,512(a3)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+4])  : [src] "r" (msg[i]), [src2] "r" (4) :   );
    2112:	3677e70b          	0x3677e70b
    2116:	20e81023          	sh	a4,512(a6)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+5])  : [src] "r" (msg[i]), [src2] "r" (5) :   );
    211a:	3657e70b          	0x3657e70b
    211e:	20e51023          	sh	a4,512(a0)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+6])  : [src] "r" (msg[i]), [src2] "r" (6) :   );
    2122:	37f7e70b          	0x37f7e70b
    2126:	20e59023          	sh	a4,512(a1)
            asm volatile (".insn r 0x0b, 0x006, 27, %[dst], %[src], %[src2]\r\n" : [dst] "=r" (r->coeffs[8*i+7])  : [src] "r" (msg[i]), [src2] "r" (7) :   );
    212a:	37e7e70b          	0x37e7e70b
    212e:	20e61023          	sh	a4,512(a2)
        for (j = 0; j < 8; j++) {
    2132:	197d                	addi	s2,s2,-1
    2134:	fa091fe3          	bnez	s2,20f2 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0xbc>
    for (i = 0; i < KYBER_N / 8; i++) {
    2138:	0ea1                	addi	t4,t4,8
    213a:	0c05                	addi	s8,s8,1
    213c:	f79e98e3          	bne	t4,s9,20ac <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x76>
    PQCLEAN_KYBER768_CLEAN_gen_matrix(at, seed, 0);
    2140:	6d8d                	lui	s11,0x3
    2142:	7a7d                	lui	s4,0xfffff
    2144:	e00a0c93          	addi	s9,s4,-512 # ffffee00 <_sp+0xfff1e550>
    2148:	020d8793          	addi	a5,s11,32 # 3020 <__swbuf_r+0x78>
    214c:	0818                	addi	a4,sp,16
    214e:	97e6                	add	a5,a5,s9
    2150:	00e78cb3          	add	s9,a5,a4
    2154:	fe0a8593          	addi	a1,s5,-32 # ffffcfe0 <_sp+0xfff1c730>
    2158:	020d8793          	addi	a5,s11,32
    215c:	97ae                	add	a5,a5,a1
    215e:	00e785b3          	add	a1,a5,a4
    2162:	8566                	mv	a0,s9
    2164:	4601                	li	a2,0
    2166:	39fd                	jal	1e64 <PQCLEAN_KYBER768_CLEAN_gen_matrix.constprop.0>
        PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1(sp.vec + i, coins, nonce++);
    2168:	800a0a13          	addi	s4,s4,-2048
    216c:	020d8793          	addi	a5,s11,32
    2170:	97d2                	add	a5,a5,s4
    2172:	0818                	addi	a4,sp,16
    2174:	00e78bb3          	add	s7,a5,a4
    2178:	85ce                	mv	a1,s3
    217a:	4601                	li	a2,0
    217c:	855e                	mv	a0,s7
    217e:	3695                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    2180:	200b8d13          	addi	s10,s7,512
    2184:	85ce                	mv	a1,s3
    2186:	4605                	li	a2,1
    2188:	856a                	mv	a0,s10
    218a:	3ea1                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    218c:	400b8a13          	addi	s4,s7,1024
    2190:	85ce                	mv	a1,s3
    2192:	8552                	mv	a0,s4
    2194:	4609                	li	a2,2
    2196:	36b1                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
        PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta2(ep.vec + i, coins, nonce++);
    2198:	7c79                	lui	s8,0xffffe
    219a:	c00c0813          	addi	a6,s8,-1024 # ffffdc00 <_sp+0xfff1d350>
    219e:	020d8793          	addi	a5,s11,32
    21a2:	97c2                	add	a5,a5,a6
    21a4:	0818                	addi	a4,sp,16
    21a6:	00e78b33          	add	s6,a5,a4
    21aa:	85ce                	mv	a1,s3
    21ac:	460d                	li	a2,3
    21ae:	855a                	mv	a0,s6
    21b0:	3e0d                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    21b2:	85ce                	mv	a1,s3
    21b4:	4611                	li	a2,4
    21b6:	200b0513          	addi	a0,s6,512
    21ba:	3625                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    21bc:	85ce                	mv	a1,s3
    21be:	4615                	li	a2,5
    21c0:	400b0513          	addi	a0,s6,1024
    21c4:	3e39                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta2(&epp, coins, nonce++);
    21c6:	4532                	lw	a0,12(sp)
    21c8:	4619                	li	a2,6
    21ca:	85ce                	mv	a1,s3
    21cc:	3e19                	jal	1ce2 <PQCLEAN_KYBER768_CLEAN_poly_getnoise_eta1>
    ntt_driver(sp.vec[0].coeffs, sp.vec[0].coeffs);
    21ce:	85de                	mv	a1,s7
    21d0:	855e                	mv	a0,s7
    21d2:	b2eff0ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(sp.vec[1].coeffs, sp.vec[1].coeffs);
    21d6:	85ea                	mv	a1,s10
    21d8:	856a                	mv	a0,s10
    21da:	b26ff0ef          	jal	ra,1500 <ntt_driver>
    ntt_driver(sp.vec[2].coeffs, sp.vec[2].coeffs);
    21de:	85d2                	mv	a1,s4
    21e0:	8552                	mv	a0,s4
    21e2:	b1eff0ef          	jal	ra,1500 <ntt_driver>
        PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
    21e6:	600a8593          	addi	a1,s5,1536
    21ea:	020d8793          	addi	a5,s11,32
    21ee:	97ae                	add	a5,a5,a1
    21f0:	0818                	addi	a4,sp,16
    21f2:	00e789b3          	add	s3,a5,a4
    21f6:	85e6                	mv	a1,s9
    21f8:	865e                	mv	a2,s7
    21fa:	854e                	mv	a0,s3
    21fc:	e99fe0ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
    2200:	20098a13          	addi	s4,s3,512
    2204:	600c8593          	addi	a1,s9,1536
    2208:	865e                	mv	a2,s7
    220a:	8552                	mv	a0,s4
    220c:	e89fe0ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
    2210:	40098c93          	addi	s9,s3,1024
    2214:	a30d8793          	addi	a5,s11,-1488
    2218:	002785b3          	add	a1,a5,sp
    221c:	865e                	mv	a2,s7
    221e:	8566                	mv	a0,s9
    2220:	e75fe0ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
    PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
    2224:	400a8a93          	addi	s5,s5,1024
    2228:	020d8713          	addi	a4,s11,32
    222c:	0814                	addi	a3,sp,16
    222e:	9756                	add	a4,a4,s5
    2230:	200c0593          	addi	a1,s8,512
    2234:	020d8793          	addi	a5,s11,32
    2238:	00d70ab3          	add	s5,a4,a3
    223c:	97ae                	add	a5,a5,a1
    223e:	00d785b3          	add	a1,a5,a3
    2242:	865e                	mv	a2,s7
    2244:	8556                	mv	a0,s5
    2246:	e4ffe0ef          	jal	ra,1094 <PQCLEAN_KYBER768_CLEAN_polyvec_basemul_acc_montgomery>
    intt_driver(b.vec[0].coeffs, b.vec[0].coeffs);
    224a:	85ce                	mv	a1,s3
    224c:	854e                	mv	a0,s3
    224e:	bfcff0ef          	jal	ra,164a <intt_driver>
    intt_driver(b.vec[1].coeffs, b.vec[1].coeffs);
    2252:	85d2                	mv	a1,s4
    2254:	8552                	mv	a0,s4
    2256:	bf4ff0ef          	jal	ra,164a <intt_driver>
    intt_driver(b.vec[2].coeffs, b.vec[2].coeffs);    
    225a:	85e6                	mv	a1,s9
    225c:	8566                	mv	a0,s9
    225e:	becff0ef          	jal	ra,164a <intt_driver>
    intt_driver(v.coeffs, v.coeffs);
    2262:	85d6                	mv	a1,s5
    2264:	8556                	mv	a0,s5
    2266:	be4ff0ef          	jal	ra,164a <intt_driver>
    for (i = 0; i < KYBER_K; i++) {
    226a:	6885                	lui	a7,0x1
    226c:	80088893          	addi	a7,a7,-2048 # 800 <main+0x5ea>
    2270:	885a                	mv	a6,s6
    2272:	854e                	mv	a0,s3
    2274:	85d2                	mv	a1,s4
    2276:	98ce                	add	a7,a7,s3
    for (i = 0; i < KYBER_N; i++) {
    2278:	e0058793          	addi	a5,a1,-512
    memcpy(seed, packedpk + KYBER_POLYVECBYTES, KYBER_SYMBYTES);
    227c:	86c2                	mv	a3,a6
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    227e:	0007d703          	lhu	a4,0(a5)
    2282:	0006d603          	lhu	a2,0(a3)
    for (i = 0; i < KYBER_N; i++) {
    2286:	0789                	addi	a5,a5,2
    2288:	0689                	addi	a3,a3,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    228a:	9732                	add	a4,a4,a2
    228c:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
    2290:	feb797e3          	bne	a5,a1,227e <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x248>
    2294:	20078593          	addi	a1,a5,512
    2298:	20080813          	addi	a6,a6,512
    229c:	fd159ee3          	bne	a1,a7,2278 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x242>
    22a0:	76f5                	lui	a3,0xffffd
    22a2:	670d                	lui	a4,0x3
    22a4:	40068893          	addi	a7,a3,1024 # ffffd400 <_sp+0xfff1cb50>
    22a8:	02070793          	addi	a5,a4,32 # 3020 <__swbuf_r+0x78>
    22ac:	97c6                	add	a5,a5,a7
    22ae:	0810                	addi	a2,sp,16
    22b0:	00c788b3          	add	a7,a5,a2
    22b4:	02070793          	addi	a5,a4,32
    22b8:	97b6                	add	a5,a5,a3
    22ba:	00c786b3          	add	a3,a5,a2
    22be:	20088313          	addi	t1,a7,512
    22c2:	87c6                	mv	a5,a7
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    22c4:	0007d703          	lhu	a4,0(a5)
    22c8:	0006d603          	lhu	a2,0(a3)
    for (i = 0; i < KYBER_N; i++) {
    22cc:	0789                	addi	a5,a5,2
    22ce:	0689                	addi	a3,a3,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    22d0:	9732                	add	a4,a4,a2
    22d2:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
    22d6:	fe6797e3          	bne	a5,t1,22c4 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x28e>
    22da:	76f5                	lui	a3,0xffffd
    22dc:	678d                	lui	a5,0x3
    22de:	20068693          	addi	a3,a3,512 # ffffd200 <_sp+0xfff1c950>
    22e2:	02078793          	addi	a5,a5,32 # 3020 <__swbuf_r+0x78>
    22e6:	97b6                	add	a5,a5,a3
    22e8:	0818                	addi	a4,sp,16
    22ea:	00e786b3          	add	a3,a5,a4
    22ee:	87c6                	mv	a5,a7
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    22f0:	0007d703          	lhu	a4,0(a5)
    22f4:	0006d603          	lhu	a2,0(a3)
    for (i = 0; i < KYBER_N; i++) {
    22f8:	0789                	addi	a5,a5,2
    22fa:	0689                	addi	a3,a3,2
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
    22fc:	9732                	add	a4,a4,a2
    22fe:	fee79f23          	sh	a4,-2(a5)
    for (i = 0; i < KYBER_N; i++) {
    2302:	fe6797e3          	bne	a5,t1,22f0 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x2ba>
    2306:	60098e13          	addi	t3,s3,1536
    230a:	85ce                	mv	a1,s3
    for (i = 0; i < KYBER_N; i++) {
    230c:	10000813          	li	a6,256
        PQCLEAN_KYBER768_CLEAN_poly_reduce(&r->vec[i]);
    2310:	862e                	mv	a2,a1
    2312:	4781                	li	a5,0
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
    2314:	00065683          	lhu	a3,0(a2)
    2318:	0006c68b          	0x6c68b
    231c:	00179713          	slli	a4,a5,0x1
    2320:	972e                	add	a4,a4,a1
    2322:	00d71023          	sh	a3,0(a4)
    for (i = 0; i < KYBER_N; i++) {
    2326:	0785                	addi	a5,a5,1
    2328:	0609                	addi	a2,a2,2
    232a:	ff0795e3          	bne	a5,a6,2314 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x2de>
    for (i = 0; i < KYBER_K; i++) {
    232e:	20058593          	addi	a1,a1,512
    2332:	fdc59fe3          	bne	a1,t3,2310 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x2da>
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
    2336:	670d                	lui	a4,0x3
    2338:	77f5                	lui	a5,0xffffd
    233a:	02070713          	addi	a4,a4,32 # 3020 <__swbuf_r+0x78>
    233e:	973e                	add	a4,a4,a5
    2340:	081c                	addi	a5,sp,16
    2342:	97ba                	add	a5,a5,a4
    2344:	86c6                	mv	a3,a7
    2346:	c63e                	sw	a5,12(sp)
    for (i = 0; i < KYBER_N; i++) {
    2348:	10000613          	li	a2,256
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
    234c:	0006d703          	lhu	a4,0(a3)
    2350:	0007470b          	0x7470b
    2354:	45b2                	lw	a1,12(sp)
    2356:	00191793          	slli	a5,s2,0x1
    for (i = 0; i < KYBER_N; i++) {
    235a:	0905                	addi	s2,s2,1
        asm volatile (".insn r 0x0b, 0x004, 0, %[dst], %[src], x0\r\n" : [dst] "=r" (r->coeffs[i]) : [src] "r" (r->coeffs[i]) : );
    235c:	97ae                	add	a5,a5,a1
    235e:	40e79023          	sh	a4,1024(a5) # ffffd400 <_sp+0xfff1cb50>
    for (i = 0; i < KYBER_N; i++) {
    2362:	0689                	addi	a3,a3,2
    2364:	fec914e3          	bne	s2,a2,234c <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x316>
    2368:	14048f13          	addi	t5,s1,320
    236c:	50048f93          	addi	t6,s1,1280
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[0])  : [src] "r" (a->vec[i].coeffs[4 * j ]), [x] "r" (0) :  );
    2370:	4e01                	li	t3,0
    2372:	ec0f0613          	addi	a2,t5,-320
        for (j = 0; j < KYBER_N / 4; j++) {
    2376:	882a                	mv	a6,a0
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[0])  : [src] "r" (a->vec[i].coeffs[4 * j ]), [x] "r" (0) :  );
    2378:	00085583          	lhu	a1,0(a6)
    237c:	49c5e58b          	0x49c5e58b
    2380:	05c2                	slli	a1,a1,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->vec[i].coeffs[4 * j + 1]), [x] "r" (0) :  );
    2382:	00285703          	lhu	a4,2(a6)
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[0])  : [src] "r" (a->vec[i].coeffs[4 * j ]), [x] "r" (0) :  );
    2386:	81c1                	srli	a1,a1,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->vec[i].coeffs[4 * j + 1]), [x] "r" (0) :  );
    2388:	49c7670b          	0x49c7670b
    238c:	0742                	slli	a4,a4,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->vec[i].coeffs[4 * j + 2]), [x] "r" (0) :  );
    238e:	00485783          	lhu	a5,4(a6)
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->vec[i].coeffs[4 * j + 1]), [x] "r" (0) :  );
    2392:	8341                	srli	a4,a4,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->vec[i].coeffs[4 * j + 2]), [x] "r" (0) :  );
    2394:	49c7e78b          	0x49c7e78b
    2398:	07c2                	slli	a5,a5,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[3])  : [src] "r" (a->vec[i].coeffs[4 * j + 3]), [x] "r" (0) :  );
    239a:	00685683          	lhu	a3,6(a6)
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->vec[i].coeffs[4 * j + 2]), [x] "r" (0) :  );
    239e:	83c1                	srli	a5,a5,0x10
            asm volatile (".insn r 0x0b, 0x6, 36, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[3])  : [src] "r" (a->vec[i].coeffs[4 * j + 3]), [x] "r" (0) :  );
    23a0:	49c6e68b          	0x49c6e68b
    23a4:	06c2                	slli	a3,a3,0x10
    23a6:	82c1                	srli	a3,a3,0x10
            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
    23a8:	00271913          	slli	s2,a4,0x2
            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
    23ac:	00479393          	slli	t2,a5,0x4
            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
    23b0:	00669293          	slli	t0,a3,0x6
            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
    23b4:	0085de93          	srli	t4,a1,0x8
            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
    23b8:	8319                	srli	a4,a4,0x6
            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
    23ba:	8391                	srli	a5,a5,0x4
            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
    23bc:	012eeeb3          	or	t4,t4,s2
            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
    23c0:	00776733          	or	a4,a4,t2
            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
    23c4:	0057e7b3          	or	a5,a5,t0
            r[4] = (uint8_t)(t[3] >> 2);
    23c8:	8289                	srli	a3,a3,0x2
            r[0] = (uint8_t)(t[0] >> 0);
    23ca:	00b60023          	sb	a1,0(a2)
            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
    23ce:	01d600a3          	sb	t4,1(a2)
            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
    23d2:	00e60123          	sb	a4,2(a2)
            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
    23d6:	00f601a3          	sb	a5,3(a2)
            r[4] = (uint8_t)(t[3] >> 2);
    23da:	00d60223          	sb	a3,4(a2)
            r += 5;
    23de:	0615                	addi	a2,a2,5
        for (j = 0; j < KYBER_N / 4; j++) {
    23e0:	0821                	addi	a6,a6,8
    23e2:	f9e61be3          	bne	a2,t5,2378 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x342>
    for (i = 0; i < KYBER_K; i++) {
    23e6:	14060f13          	addi	t5,a2,320
    23ea:	20050513          	addi	a0,a0,512
    23ee:	f9ef92e3          	bne	t6,t5,2372 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x33c>
    PQCLEAN_KYBER768_CLEAN_poly_compress(r + KYBER_POLYVECCOMPRESSEDBYTES, v);
    23f2:	3c048493          	addi	s1,s1,960
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[0])  : [src] "r" (a->coeffs[8 * i]), [x] "r" (0) :  );
    23f6:	4781                	li	a5,0
    23f8:	0008d603          	lhu	a2,0(a7)
    23fc:	22f6660b          	0x22f6660b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->coeffs[8 * i + 1]), [x] "r" (0) :  );
    2400:	0028de03          	lhu	t3,2(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[0])  : [src] "r" (a->coeffs[8 * i]), [x] "r" (0) :  );
    2404:	0ff67613          	zext.b	a2,a2
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->coeffs[8 * i + 1]), [x] "r" (0) :  );
    2408:	22fe6e0b          	0x22fe6e0b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->coeffs[8 * i + 2]), [x] "r" (0) :  );
    240c:	0048de83          	lhu	t4,4(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[1])  : [src] "r" (a->coeffs[8 * i + 1]), [x] "r" (0) :  );
    2410:	0ffe7e13          	zext.b	t3,t3
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->coeffs[8 * i + 2]), [x] "r" (0) :  );
    2414:	22feee8b          	0x22feee8b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[3])  : [src] "r" (a->coeffs[8 * i + 3]), [x] "r" (0) :  );
    2418:	0068d803          	lhu	a6,6(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[2])  : [src] "r" (a->coeffs[8 * i + 2]), [x] "r" (0) :  );
    241c:	0ffefe93          	zext.b	t4,t4
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[3])  : [src] "r" (a->coeffs[8 * i + 3]), [x] "r" (0) :  );
    2420:	22f8680b          	0x22f8680b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[4])  : [src] "r" (a->coeffs[8 * i + 4]), [x] "r" (0) :  );
    2424:	0088d683          	lhu	a3,8(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[3])  : [src] "r" (a->coeffs[8 * i + 3]), [x] "r" (0) :  );
    2428:	0ff87813          	zext.b	a6,a6
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[4])  : [src] "r" (a->coeffs[8 * i + 4]), [x] "r" (0) :  );
    242c:	22f6e68b          	0x22f6e68b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[5])  : [src] "r" (a->coeffs[8 * i + 5]), [x] "r" (0) :  );
    2430:	00a8d503          	lhu	a0,10(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[4])  : [src] "r" (a->coeffs[8 * i + 4]), [x] "r" (0) :  );
    2434:	0ff6f693          	zext.b	a3,a3
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[5])  : [src] "r" (a->coeffs[8 * i + 5]), [x] "r" (0) :  );
    2438:	22f5650b          	0x22f5650b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[6])  : [src] "r" (a->coeffs[8 * i + 6]), [x] "r" (0) :  );
    243c:	00c8d703          	lhu	a4,12(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[5])  : [src] "r" (a->coeffs[8 * i + 5]), [x] "r" (0) :  );
    2440:	0ff57513          	zext.b	a0,a0
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[6])  : [src] "r" (a->coeffs[8 * i + 6]), [x] "r" (0) :  );
    2444:	22f7670b          	0x22f7670b
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[7])  : [src] "r" (a->coeffs[8 * i + 7]), [x] "r" (0) :  );
    2448:	00e8d583          	lhu	a1,14(a7)
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[6])  : [src] "r" (a->coeffs[8 * i + 6]), [x] "r" (0) :  );
    244c:	0ff77713          	zext.b	a4,a4
        asm volatile (".insn r 0x0b, 0x6, 17, %[dst], %[src], %[x]\r\n" : [dst] "=r" (t[7])  : [src] "r" (a->coeffs[8 * i + 7]), [x] "r" (0) :  );
    2450:	22f5e58b          	0x22f5e58b
    2454:	0ff5f593          	zext.b	a1,a1
        r[0] = t[0] | (t[1] << 4);
    2458:	0e12                	slli	t3,t3,0x4
        r[1] = t[2] | (t[3] << 4);
    245a:	0812                	slli	a6,a6,0x4
        r[2] = t[4] | (t[5] << 4);
    245c:	0512                	slli	a0,a0,0x4
        r[3] = t[6] | (t[7] << 4);
    245e:	0592                	slli	a1,a1,0x4
        r[0] = t[0] | (t[1] << 4);
    2460:	01c66633          	or	a2,a2,t3
        r[1] = t[2] | (t[3] << 4);
    2464:	010ee833          	or	a6,t4,a6
        r[2] = t[4] | (t[5] << 4);
    2468:	8ec9                	or	a3,a3,a0
        r[3] = t[6] | (t[7] << 4);
    246a:	8f4d                	or	a4,a4,a1
        r[0] = t[0] | (t[1] << 4);
    246c:	00c48023          	sb	a2,0(s1)
        r[1] = t[2] | (t[3] << 4);
    2470:	010480a3          	sb	a6,1(s1)
        r[2] = t[4] | (t[5] << 4);
    2474:	00d48123          	sb	a3,2(s1)
        r[3] = t[6] | (t[7] << 4);
    2478:	00e481a3          	sb	a4,3(s1)
    for (i = 0; i < KYBER_N / 8; i++) {
    247c:	08c1                	addi	a7,a7,16
        r += 4;
    247e:	0491                	addi	s1,s1,4
    for (i = 0; i < KYBER_N / 8; i++) {
    2480:	f6689ce3          	bne	a7,t1,23f8 <PQCLEAN_KYBER768_CLEAN_indcpa_enc+0x3c2>
}
    2484:	628d                	lui	t0,0x3
    2486:	9116                	add	sp,sp,t0
    2488:	40f6                	lw	ra,92(sp)
    248a:	44e6                	lw	s1,88(sp)
    248c:	4956                	lw	s2,84(sp)
    248e:	49c6                	lw	s3,80(sp)
    2490:	4a36                	lw	s4,76(sp)
    2492:	4aa6                	lw	s5,72(sp)
    2494:	4b16                	lw	s6,68(sp)
    2496:	4b86                	lw	s7,64(sp)
    2498:	5c72                	lw	s8,60(sp)
    249a:	5ce2                	lw	s9,56(sp)
    249c:	5d52                	lw	s10,52(sp)
    249e:	5dc2                	lw	s11,48(sp)
    24a0:	6125                	addi	sp,sp,96
    24a2:	8082                	ret

000024a4 <printbytes.constprop.0>:
static void printbytes(const uint8_t *x, size_t xlen) {
    24a4:	1141                	addi	sp,sp,-16
    24a6:	c426                	sw	s1,8(sp)
    24a8:	c24a                	sw	s2,4(sp)
    24aa:	c04e                	sw	s3,0(sp)
    24ac:	c606                	sw	ra,12(sp)
    24ae:	84aa                	mv	s1,a0
    24b0:	00850993          	addi	s3,a0,8
    24b4:	00080937          	lui	s2,0x80
        printf("%02x", x[i]);
    24b8:	0004c583          	lbu	a1,0(s1)
    24bc:	0d490513          	addi	a0,s2,212 # 800d4 <no_exception_handler_msg+0x3f>
    for (i = 0; i < xlen/4; i++) {
    24c0:	0485                	addi	s1,s1,1
        printf("%02x", x[i]);
    24c2:	78a010ef          	jal	ra,3c4c <iprintf>
    for (i = 0; i < xlen/4; i++) {
    24c6:	ff3499e3          	bne	s1,s3,24b8 <printbytes.constprop.0+0x14>
}
    24ca:	40b2                	lw	ra,12(sp)
    24cc:	44a2                	lw	s1,8(sp)
    24ce:	4912                	lw	s2,4(sp)
    24d0:	4982                	lw	s3,0(sp)
    printf("\n");
    24d2:	4529                	li	a0,10
}
    24d4:	0141                	addi	sp,sp,16
    printf("\n");
    24d6:	7d60106f          	j	3cac <putchar>

000024da <init>:
// Solderpad Hardware License, Version 2.1, see LICENSE.md for details.
// SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
int init()
{
    return 0;
    24da:	4501                	li	a0,0
    24dc:	8082                	ret

000024de <_close>:
}

int _close(int file)
{
    return -1;
}
    24de:	557d                	li	a0,-1
    24e0:	8082                	ret

000024e2 <_exit>:
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    24e2:	200007b7          	lui	a5,0x20000
    24e6:	c3c8                	sw	a0,4(a5)
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
    24e8:	4705                	li	a4,1
    24ea:	00e78023          	sb	a4,0(a5) # 20000000 <_sp+0x1ff1f750>
    soc_ctrl_t soc_ctrl;
    soc_ctrl.base_addr = mmio_region_from_addr((uintptr_t)SOC_CTRL_START_ADDRESS);
    soc_ctrl_set_exit_value(&soc_ctrl, exit_status);
    soc_ctrl_set_valid(&soc_ctrl, (uint8_t)1);

    asm volatile("wfi");
    24ee:	10500073          	wfi

000024f2 <_fstat>:
    return -1;
}

int _fstat(int file, struct stat *st)
{
    st->st_mode = S_IFCHR;
    24f2:	6789                	lui	a5,0x2
    24f4:	c1dc                	sw	a5,4(a1)
    return 0;
    // errno = -ENOSYS;
    // return -1;
}
    24f6:	4501                	li	a0,0
    24f8:	8082                	ret

000024fa <_isatty>:
    return -1;
}

int _isatty(int file)
{
    return (file == STDOUT_FILENO);
    24fa:	157d                	addi	a0,a0,-1
}
    24fc:	00153513          	seqz	a0,a0
    2500:	8082                	ret

00002502 <_lseek>:
}

off_t _lseek(int file, off_t ptr, int dir)
{
    return 0;
}
    2502:	4501                	li	a0,0
    2504:	8082                	ret

00002506 <_read>:
}

ssize_t _read(int file, void *ptr, size_t len)
{
    return 0;
}
    2506:	4501                	li	a0,0
    2508:	8082                	ret

0000250a <_write>:
    return -1;
}

ssize_t _write(int file, const void *ptr, size_t len)
{
    if (file != STDOUT_FILENO) {
    250a:	4785                	li	a5,1
    250c:	08f51d63          	bne	a0,a5,25a6 <_write+0x9c>
{
    2510:	1141                	addi	sp,sp,-16
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    2512:	200007b7          	lui	a5,0x20000
    2516:	c24a                	sw	s2,4(sp)
    2518:	8932                	mv	s2,a2
    251a:	4fd0                	lw	a2,28(a5)
    251c:	c606                	sw	ra,12(sp)
    251e:	c426                	sw	s1,8(sp)
  if (uart->baudrate == 0 || uart->clk_freq_hz == 0) {
    2520:	ce11                	beqz	a2,253c <_write+0x32>
  uint64_t nco =
    2522:	84ae                	mv	s1,a1
    2524:	4681                	li	a3,0
    2526:	80000537          	lui	a0,0x80000
    252a:	03e00593          	li	a1,62
    252e:	628020ef          	jal	ra,4b56 <__udivdi3>
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
    2532:	01051793          	slli	a5,a0,0x10
    2536:	83c1                	srli	a5,a5,0x10
  if (nco != nco_masked) {
    2538:	00a78a63          	beq	a5,a0,254c <_write+0x42>
        errno = ENOSYS;
    253c:	000807b7          	lui	a5,0x80
    2540:	05800713          	li	a4,88
    2544:	6ae7a623          	sw	a4,1708(a5) # 806ac <errno>
        return -1;
    2548:	557d                	li	a0,-1
    254a:	a889                	j	259c <_write+0x92>
    254c:	f9e5                	bnez	a1,253c <_write+0x32>
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    254e:	200b0737          	lui	a4,0x200b0
    2552:	00072623          	sw	zero,12(a4) # 200b000c <_sp+0x1ffcf75c>
    2556:	478d                	li	a5,3
    2558:	cf5c                	sw	a5,28(a4)
    255a:	02072223          	sw	zero,36(a4)
    255e:	02072623          	sw	zero,44(a4)
    2562:	00072223          	sw	zero,4(a4)
  bitfield |= (value & field.mask) << field.index;
    2566:	01051793          	slli	a5,a0,0x10
    256a:	56fd                	li	a3,-1
    256c:	c314                	sw	a3,0(a4)
    256e:	0037e793          	ori	a5,a5,3
    2572:	c75c                	sw	a5,12(a4)
    2574:	00072223          	sw	zero,4(a4)
  while (len) {
    2578:	02090163          	beqz	s2,259a <_write+0x90>
    257c:	012485b3          	add	a1,s1,s2
    uart_putchar(uart, *data);
    2580:	0004c683          	lbu	a3,0(s1)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    2584:	4b1c                	lw	a5,16(a4)
  while (uart_tx_full(uart)) {
    2586:	8b85                	andi	a5,a5,1
    2588:	fff5                	bnez	a5,2584 <_write+0x7a>
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
    258a:	cf14                	sw	a3,24(a4)
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
    258c:	4b1c                	lw	a5,16(a4)
  return (bitfield >> field.index) & field.mask;
    258e:	838d                	srli	a5,a5,0x3
  while (!uart_tx_idle(uart)) {
    2590:	8b85                	andi	a5,a5,1
    2592:	dfed                	beqz	a5,258c <_write+0x82>
    data++;
    2594:	0485                	addi	s1,s1,1
  while (len) {
    2596:	fe9595e3          	bne	a1,s1,2580 <_write+0x76>
    if (uart_init(&uart) != kErrorOk) {
        errno = ENOSYS;
        return -1;
    }

    return uart_write(&uart,(uint8_t *)ptr,len);
    259a:	854a                	mv	a0,s2

}
    259c:	40b2                	lw	ra,12(sp)
    259e:	44a2                	lw	s1,8(sp)
    25a0:	4912                	lw	s2,4(sp)
    25a2:	0141                	addi	sp,sp,16
    25a4:	8082                	ret
        errno = ENOSYS;
    25a6:	000807b7          	lui	a5,0x80
    25aa:	05800713          	li	a4,88
    25ae:	6ae7a623          	sw	a4,1708(a5) # 806ac <errno>
        return -1;
    25b2:	557d                	li	a0,-1
}
    25b4:	8082                	ret

000025b6 <_sbrk>:
    return 0;
}

void *_sbrk(ptrdiff_t incr)
{
    char *old_brk = brk;
    25b6:	00080737          	lui	a4,0x80

    if (__heap_start == __heap_end) {
    25ba:	00081637          	lui	a2,0x81
    25be:	000b17b7          	lui	a5,0xb1
    char *old_brk = brk;
    25c2:	69870713          	addi	a4,a4,1688 # 80698 <brk>
    if (__heap_start == __heap_end) {
    25c6:	8a460613          	addi	a2,a2,-1884 # 808a4 <__BSS_END__>
    25ca:	8a478793          	addi	a5,a5,-1884 # b08a4 <__heap_end>
{
    25ce:	86aa                	mv	a3,a0
    char *old_brk = brk;
    25d0:	4308                	lw	a0,0(a4)
    if (__heap_start == __heap_end) {
    25d2:	00f60b63          	beq	a2,a5,25e8 <_sbrk+0x32>
        return NULL;
    }

    if ((brk += incr) < __heap_end) {
    25d6:	00d50633          	add	a2,a0,a3
    25da:	00f67563          	bgeu	a2,a5,25e4 <_sbrk+0x2e>
        brk += incr;
    25de:	9636                	add	a2,a2,a3
    25e0:	c310                	sw	a2,0(a4)
    25e2:	8082                	ret
    } else {
        brk = __heap_end;
    25e4:	c31c                	sw	a5,0(a4)
    25e6:	8082                	ret
        return NULL;
    25e8:	4501                	li	a0,0
    }
    return old_brk;
}
    25ea:	8082                	ret

000025ec <handler_exception>:
  };
}

// Below functions are default weak exception handlers meant to be overriden
__attribute__((weak)) void handler_exception(void) {
    25ec:	7119                	addi	sp,sp,-128
    25ee:	de86                	sw	ra,124(sp)
    25f0:	dc96                	sw	t0,120(sp)
    25f2:	da9a                	sw	t1,116(sp)
    25f4:	d89e                	sw	t2,112(sp)
    25f6:	d6aa                	sw	a0,108(sp)
    25f8:	d4ae                	sw	a1,104(sp)
    25fa:	d2b2                	sw	a2,100(sp)
    25fc:	d0b6                	sw	a3,96(sp)
    25fe:	ceba                	sw	a4,92(sp)
    2600:	ccbe                	sw	a5,88(sp)
    2602:	cac2                	sw	a6,84(sp)
    2604:	c8c6                	sw	a7,80(sp)
    2606:	c6f2                	sw	t3,76(sp)
    2608:	c4f6                	sw	t4,72(sp)
    260a:	c2fa                	sw	t5,68(sp)
    260c:	c0fe                	sw	t6,64(sp)
  uint32_t mcause;
  exc_id_t exc_cause;

  CSR_READ(CSR_REG_MCAUSE, &mcause);
    260e:	342027f3          	csrr	a5,mcause
  exc_cause = (exc_id_t)(mcause & kIdMax);

  switch (exc_cause) {
    2612:	472d                	li	a4,11
  exc_cause = (exc_id_t)(mcause & kIdMax);
    2614:	8bfd                	andi	a5,a5,31
  switch (exc_cause) {
    2616:	00f76a63          	bltu	a4,a5,262a <handler_exception+0x3e>
    261a:	00080737          	lui	a4,0x80
    261e:	078a                	slli	a5,a5,0x2
    2620:	26070713          	addi	a4,a4,608 # 80260 <no_exception_handler_msg+0x1cb>
    2624:	97ba                	add	a5,a5,a4
    2626:	439c                	lw	a5,0(a5)
    2628:	8782                	jr	a5
      break;
    case kECall:
      handler_ecall();
      break;
    default:
      while (1) {
    262a:	a001                	j	262a <handler_exception+0x3e>
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address\n";
  print_exc_msg(exc_msg);
}

__attribute__((weak)) void handler_ecall(void) {
  printf("Environment call encountered\n");
    262c:	00080537          	lui	a0,0x80
    2630:	15c50513          	addi	a0,a0,348 # 8015c <no_exception_handler_msg+0xc7>
    2634:	06f000ef          	jal	ra,2ea2 <puts>
  while (1) {
    2638:	a001                	j	2638 <handler_exception+0x4c>
  const char fault_msg[] =
    263a:	000807b7          	lui	a5,0x80
    263e:	17c78793          	addi	a5,a5,380 # 8017c <no_exception_handler_msg+0xe7>
    2642:	0048                	addi	a0,sp,4
    2644:	872a                	mv	a4,a0
    2646:	03078893          	addi	a7,a5,48
    264a:	0007a803          	lw	a6,0(a5)
    264e:	43cc                	lw	a1,4(a5)
    2650:	4790                	lw	a2,8(a5)
    2652:	47d4                	lw	a3,12(a5)
    2654:	01072023          	sw	a6,0(a4)
    2658:	c34c                	sw	a1,4(a4)
    265a:	c710                	sw	a2,8(a4)
    265c:	c754                	sw	a3,12(a4)
    265e:	07c1                	addi	a5,a5,16
    2660:	0741                	addi	a4,a4,16
    2662:	ff1794e3          	bne	a5,a7,264a <handler_exception+0x5e>
    2666:	4394                	lw	a3,0(a5)
    2668:	0047c783          	lbu	a5,4(a5)
    266c:	c314                	sw	a3,0(a4)
    266e:	00f70223          	sb	a5,4(a4)
  print_exc_msg(fault_msg);
    2672:	e4cff0ef          	jal	ra,1cbe <print_exc_msg>
  const char fault_msg[] =
    2676:	000807b7          	lui	a5,0x80
    267a:	17c78793          	addi	a5,a5,380 # 8017c <no_exception_handler_msg+0xe7>
    267e:	0048                	addi	a0,sp,4
    2680:	872a                	mv	a4,a0
    2682:	03078893          	addi	a7,a5,48
    2686:	0007a803          	lw	a6,0(a5)
    268a:	43cc                	lw	a1,4(a5)
    268c:	4790                	lw	a2,8(a5)
    268e:	47d4                	lw	a3,12(a5)
    2690:	01072023          	sw	a6,0(a4)
    2694:	c34c                	sw	a1,4(a4)
    2696:	c710                	sw	a2,8(a4)
    2698:	c754                	sw	a3,12(a4)
    269a:	07c1                	addi	a5,a5,16
    269c:	0741                	addi	a4,a4,16
    269e:	ff1794e3          	bne	a5,a7,2686 <handler_exception+0x9a>
    26a2:	b7d1                	j	2666 <handler_exception+0x7a>
  const char fault_msg[] =
    26a4:	000807b7          	lui	a5,0x80
    26a8:	1b478793          	addi	a5,a5,436 # 801b4 <no_exception_handler_msg+0x11f>
    26ac:	0048                	addi	a0,sp,4
    26ae:	872a                	mv	a4,a0
    26b0:	03c78313          	addi	t1,a5,60
    26b4:	0007a883          	lw	a7,0(a5)
    26b8:	0047a803          	lw	a6,4(a5)
    26bc:	478c                	lw	a1,8(a5)
    26be:	47d0                	lw	a2,12(a5)
    26c0:	4b94                	lw	a3,16(a5)
    26c2:	01172023          	sw	a7,0(a4)
    26c6:	01072223          	sw	a6,4(a4)
    26ca:	c70c                	sw	a1,8(a4)
    26cc:	c750                	sw	a2,12(a4)
    26ce:	cb14                	sw	a3,16(a4)
    26d0:	07d1                	addi	a5,a5,20
    26d2:	0751                	addi	a4,a4,20
    26d4:	fe6790e3          	bne	a5,t1,26b4 <handler_exception+0xc8>
  print_exc_msg(exc_msg);
    26d8:	de6ff0ef          	jal	ra,1cbe <print_exc_msg>
  const char exc_msg[] =
    26dc:	000807b7          	lui	a5,0x80
    26e0:	1f078793          	addi	a5,a5,496 # 801f0 <no_exception_handler_msg+0x15b>
    26e4:	0048                	addi	a0,sp,4
    26e6:	872a                	mv	a4,a0
    26e8:	03078893          	addi	a7,a5,48
    26ec:	0007a803          	lw	a6,0(a5)
    26f0:	43cc                	lw	a1,4(a5)
    26f2:	4790                	lw	a2,8(a5)
    26f4:	47d4                	lw	a3,12(a5)
    26f6:	01072023          	sw	a6,0(a4)
    26fa:	c34c                	sw	a1,4(a4)
    26fc:	c710                	sw	a2,8(a4)
    26fe:	c754                	sw	a3,12(a4)
    2700:	07c1                	addi	a5,a5,16
    2702:	0741                	addi	a4,a4,16
    2704:	ff1794e3          	bne	a5,a7,26ec <handler_exception+0x100>
    2708:	4390                	lw	a2,0(a5)
    270a:	43d4                	lw	a3,4(a5)
    270c:	0087c783          	lbu	a5,8(a5)
    2710:	c310                	sw	a2,0(a4)
    2712:	c354                	sw	a3,4(a4)
    2714:	00f70423          	sb	a5,8(a4)
  print_exc_msg(exc_msg);
    2718:	da6ff0ef          	jal	ra,1cbe <print_exc_msg>
  const char exc_msg[] = "Load/Store fault, mtval shows the fault address\n";
    271c:	000807b7          	lui	a5,0x80
    2720:	22c78793          	addi	a5,a5,556 # 8022c <no_exception_handler_msg+0x197>
    2724:	0048                	addi	a0,sp,4
    2726:	872a                	mv	a4,a0
    2728:	03078893          	addi	a7,a5,48
    272c:	0007a803          	lw	a6,0(a5)
    2730:	43cc                	lw	a1,4(a5)
    2732:	4790                	lw	a2,8(a5)
    2734:	47d4                	lw	a3,12(a5)
    2736:	01072023          	sw	a6,0(a4)
    273a:	c34c                	sw	a1,4(a4)
    273c:	c710                	sw	a2,8(a4)
    273e:	c754                	sw	a3,12(a4)
    2740:	07c1                	addi	a5,a5,16
    2742:	0741                	addi	a4,a4,16
    2744:	ff1794e3          	bne	a5,a7,272c <handler_exception+0x140>
    2748:	0007c783          	lbu	a5,0(a5)
    274c:	00f70023          	sb	a5,0(a4)
    2750:	b761                	j	26d8 <handler_exception+0xec>
    2752:	000807b7          	lui	a5,0x80
    2756:	22c78793          	addi	a5,a5,556 # 8022c <no_exception_handler_msg+0x197>
    275a:	0048                	addi	a0,sp,4
    275c:	872a                	mv	a4,a0
    275e:	03078893          	addi	a7,a5,48
    2762:	0007a803          	lw	a6,0(a5)
    2766:	43cc                	lw	a1,4(a5)
    2768:	4790                	lw	a2,8(a5)
    276a:	47d4                	lw	a3,12(a5)
    276c:	01072023          	sw	a6,0(a4)
    2770:	c34c                	sw	a1,4(a4)
    2772:	c710                	sw	a2,8(a4)
    2774:	c754                	sw	a3,12(a4)
    2776:	07c1                	addi	a5,a5,16
    2778:	0741                	addi	a4,a4,16
    277a:	ff1794e3          	bne	a5,a7,2762 <handler_exception+0x176>
    277e:	b7e9                	j	2748 <handler_exception+0x15c>
    2780:	0000                	unimp
	...

00002784 <handler_irq_software>:
__attribute__((weak)) void handler_irq_software(void) {
    2784:	7139                	addi	sp,sp,-64
    2786:	d62a                	sw	a0,44(sp)
  printf("Software IRQ triggered!\n");
    2788:	00080537          	lui	a0,0x80
    278c:	29050513          	addi	a0,a0,656 # 80290 <no_exception_handler_msg+0x1fb>
__attribute__((weak)) void handler_irq_software(void) {
    2790:	de06                	sw	ra,60(sp)
    2792:	dc16                	sw	t0,56(sp)
    2794:	da1a                	sw	t1,52(sp)
    2796:	d81e                	sw	t2,48(sp)
    2798:	d42e                	sw	a1,40(sp)
    279a:	d232                	sw	a2,36(sp)
    279c:	d036                	sw	a3,32(sp)
    279e:	ce3a                	sw	a4,28(sp)
    27a0:	cc3e                	sw	a5,24(sp)
    27a2:	ca42                	sw	a6,20(sp)
    27a4:	c846                	sw	a7,16(sp)
    27a6:	c672                	sw	t3,12(sp)
    27a8:	c476                	sw	t4,8(sp)
    27aa:	c27a                	sw	t5,4(sp)
    27ac:	c07e                	sw	t6,0(sp)
  printf("Software IRQ triggered!\n");
    27ae:	2dd5                	jal	2ea2 <puts>
  while (1) {
    27b0:	a001                	j	27b0 <handler_irq_software+0x2c>
	...

000027b4 <handler_irq_timer>:
__attribute__((weak)) void handler_irq_timer(void) {
    27b4:	7139                	addi	sp,sp,-64
    27b6:	d62a                	sw	a0,44(sp)
  printf("Timer IRQ triggered!\n");
    27b8:	00080537          	lui	a0,0x80
    27bc:	2a850513          	addi	a0,a0,680 # 802a8 <no_exception_handler_msg+0x213>
__attribute__((weak)) void handler_irq_timer(void) {
    27c0:	de06                	sw	ra,60(sp)
    27c2:	dc16                	sw	t0,56(sp)
    27c4:	da1a                	sw	t1,52(sp)
    27c6:	d81e                	sw	t2,48(sp)
    27c8:	d42e                	sw	a1,40(sp)
    27ca:	d232                	sw	a2,36(sp)
    27cc:	d036                	sw	a3,32(sp)
    27ce:	ce3a                	sw	a4,28(sp)
    27d0:	cc3e                	sw	a5,24(sp)
    27d2:	ca42                	sw	a6,20(sp)
    27d4:	c846                	sw	a7,16(sp)
    27d6:	c672                	sw	t3,12(sp)
    27d8:	c476                	sw	t4,8(sp)
    27da:	c27a                	sw	t5,4(sp)
    27dc:	c07e                	sw	t6,0(sp)
  printf("Timer IRQ triggered!\n");
    27de:	25d1                	jal	2ea2 <puts>
  while (1) {
    27e0:	a001                	j	27e0 <handler_irq_timer+0x2c>
	...

000027e4 <handler_irq_external>:
{
    27e4:	715d                	addi	sp,sp,-80
    27e6:	cc4a                	sw	s2,24(sp)
  *claim_data = rv_plic_peri->CC0;
    27e8:	30000937          	lui	s2,0x30000
{
    27ec:	de26                	sw	s1,60(sp)
  *claim_data = rv_plic_peri->CC0;
    27ee:	20c92483          	lw	s1,524(s2) # 3000020c <_sp+0x2ff1f95c>
{
    27f2:	d23e                	sw	a5,36(sp)
    handlers[int_id](int_id);
    27f4:	000807b7          	lui	a5,0x80
{
    27f8:	d43a                	sw	a4,40(sp)
    handlers[int_id](int_id);
    27fa:	6c878793          	addi	a5,a5,1736 # 806c8 <handlers>
    27fe:	00249713          	slli	a4,s1,0x2
    2802:	97ba                	add	a5,a5,a4
    2804:	439c                	lw	a5,0(a5)
{
    2806:	dc2a                	sw	a0,56(sp)
    2808:	c686                	sw	ra,76(sp)
    280a:	c496                	sw	t0,72(sp)
    280c:	c29a                	sw	t1,68(sp)
    280e:	c09e                	sw	t2,64(sp)
    2810:	da2e                	sw	a1,52(sp)
    2812:	d832                	sw	a2,48(sp)
    2814:	d636                	sw	a3,44(sp)
    2816:	d042                	sw	a6,32(sp)
    2818:	ce46                	sw	a7,28(sp)
    281a:	ca72                	sw	t3,20(sp)
    281c:	c876                	sw	t4,16(sp)
    281e:	c67a                	sw	t5,12(sp)
    2820:	c47e                	sw	t6,8(sp)
    handlers[int_id](int_id);
    2822:	8526                	mv	a0,s1
    2824:	9782                	jalr	a5
    plic_intr_flag = 1;
    2826:	000807b7          	lui	a5,0x80
    282a:	4705                	li	a4,1
    282c:	6ae78423          	sb	a4,1704(a5) # 806a8 <plic_intr_flag>
  rv_plic_peri->CC0 = *complete_data;
    2830:	20992623          	sw	s1,524(s2)
}
    2834:	40b6                	lw	ra,76(sp)
    2836:	42a6                	lw	t0,72(sp)
    2838:	4316                	lw	t1,68(sp)
    283a:	4386                	lw	t2,64(sp)
    283c:	54f2                	lw	s1,60(sp)
    283e:	5562                	lw	a0,56(sp)
    2840:	55d2                	lw	a1,52(sp)
    2842:	5642                	lw	a2,48(sp)
    2844:	56b2                	lw	a3,44(sp)
    2846:	5722                	lw	a4,40(sp)
    2848:	5792                	lw	a5,36(sp)
    284a:	5802                	lw	a6,32(sp)
    284c:	48f2                	lw	a7,28(sp)
    284e:	4962                	lw	s2,24(sp)
    2850:	4e52                	lw	t3,20(sp)
    2852:	4ec2                	lw	t4,16(sp)
    2854:	4f32                	lw	t5,12(sp)
    2856:	4fa2                	lw	t6,8(sp)
    2858:	6161                	addi	sp,sp,80
    285a:	30200073          	mret

0000285e <fic_irq_dma>:
    dma_cb.intrFlag = 1;
    285e:	000807b7          	lui	a5,0x80
    2862:	4705                	li	a4,1
    2864:	6ce78023          	sb	a4,1728(a5) # 806c0 <dma_cb+0x4>
}
    2868:	8082                	ret
	...

0000286c <handler_irq_fast_dma>:
    // call the weak fic handler
    fic_irq_timer_3();
}

void handler_irq_fast_dma(void)
{
    286c:	1141                	addi	sp,sp,-16
    286e:	c63a                	sw	a4,12(sp)
    2870:	c43e                	sw	a5,8(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2872:	4721                	li	a4,8
    2874:	200707b7          	lui	a5,0x20070
    2878:	c3d8                	sw	a4,4(a5)
    dma_cb.intrFlag = 1;
    287a:	000807b7          	lui	a5,0x80
    287e:	4705                	li	a4,1
    2880:	6ce78023          	sb	a4,1728(a5) # 806c0 <dma_cb+0x4>
    // The interrupt is cleared.
    clear_fast_interrupt(kDma_fic_e);
    // call the weak fic handler
    fic_irq_dma();
}
    2884:	4732                	lw	a4,12(sp)
    2886:	47a2                	lw	a5,8(sp)
    2888:	0141                	addi	sp,sp,16
    288a:	30200073          	mret
	...

00002890 <handler_irq_fast_timer_1>:
{
    2890:	7139                	addi	sp,sp,-64
    2892:	ce3a                	sw	a4,28(sp)
    2894:	cc3e                	sw	a5,24(sp)
    2896:	de06                	sw	ra,60(sp)
    2898:	dc16                	sw	t0,56(sp)
    289a:	da1a                	sw	t1,52(sp)
    289c:	d81e                	sw	t2,48(sp)
    289e:	d62a                	sw	a0,44(sp)
    28a0:	d42e                	sw	a1,40(sp)
    28a2:	d232                	sw	a2,36(sp)
    28a4:	d036                	sw	a3,32(sp)
    28a6:	ca42                	sw	a6,20(sp)
    28a8:	c846                	sw	a7,16(sp)
    28aa:	c672                	sw	t3,12(sp)
    28ac:	c476                	sw	t4,8(sp)
    28ae:	c27a                	sw	t5,4(sp)
    28b0:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    28b2:	200707b7          	lui	a5,0x20070
    28b6:	4705                	li	a4,1
    28b8:	c3d8                	sw	a4,4(a5)
    fic_irq_timer_1();
    28ba:	c0afe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    28be:	50f2                	lw	ra,60(sp)
    28c0:	52e2                	lw	t0,56(sp)
    28c2:	5352                	lw	t1,52(sp)
    28c4:	53c2                	lw	t2,48(sp)
    28c6:	5532                	lw	a0,44(sp)
    28c8:	55a2                	lw	a1,40(sp)
    28ca:	5612                	lw	a2,36(sp)
    28cc:	5682                	lw	a3,32(sp)
    28ce:	4772                	lw	a4,28(sp)
    28d0:	47e2                	lw	a5,24(sp)
    28d2:	4852                	lw	a6,20(sp)
    28d4:	48c2                	lw	a7,16(sp)
    28d6:	4e32                	lw	t3,12(sp)
    28d8:	4ea2                	lw	t4,8(sp)
    28da:	4f12                	lw	t5,4(sp)
    28dc:	4f82                	lw	t6,0(sp)
    28de:	6121                	addi	sp,sp,64
    28e0:	30200073          	mret
    28e4:	0000                	unimp
	...

000028e8 <handler_irq_fast_timer_2>:
{
    28e8:	7139                	addi	sp,sp,-64
    28ea:	ce3a                	sw	a4,28(sp)
    28ec:	cc3e                	sw	a5,24(sp)
    28ee:	de06                	sw	ra,60(sp)
    28f0:	dc16                	sw	t0,56(sp)
    28f2:	da1a                	sw	t1,52(sp)
    28f4:	d81e                	sw	t2,48(sp)
    28f6:	d62a                	sw	a0,44(sp)
    28f8:	d42e                	sw	a1,40(sp)
    28fa:	d232                	sw	a2,36(sp)
    28fc:	d036                	sw	a3,32(sp)
    28fe:	ca42                	sw	a6,20(sp)
    2900:	c846                	sw	a7,16(sp)
    2902:	c672                	sw	t3,12(sp)
    2904:	c476                	sw	t4,8(sp)
    2906:	c27a                	sw	t5,4(sp)
    2908:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    290a:	200707b7          	lui	a5,0x20070
    290e:	4709                	li	a4,2
    2910:	c3d8                	sw	a4,4(a5)
    fic_irq_timer_2();
    2912:	bb2fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2916:	50f2                	lw	ra,60(sp)
    2918:	52e2                	lw	t0,56(sp)
    291a:	5352                	lw	t1,52(sp)
    291c:	53c2                	lw	t2,48(sp)
    291e:	5532                	lw	a0,44(sp)
    2920:	55a2                	lw	a1,40(sp)
    2922:	5612                	lw	a2,36(sp)
    2924:	5682                	lw	a3,32(sp)
    2926:	4772                	lw	a4,28(sp)
    2928:	47e2                	lw	a5,24(sp)
    292a:	4852                	lw	a6,20(sp)
    292c:	48c2                	lw	a7,16(sp)
    292e:	4e32                	lw	t3,12(sp)
    2930:	4ea2                	lw	t4,8(sp)
    2932:	4f12                	lw	t5,4(sp)
    2934:	4f82                	lw	t6,0(sp)
    2936:	6121                	addi	sp,sp,64
    2938:	30200073          	mret
    293c:	0000                	unimp
	...

00002940 <handler_irq_fast_timer_3>:
{
    2940:	7139                	addi	sp,sp,-64
    2942:	ce3a                	sw	a4,28(sp)
    2944:	cc3e                	sw	a5,24(sp)
    2946:	de06                	sw	ra,60(sp)
    2948:	dc16                	sw	t0,56(sp)
    294a:	da1a                	sw	t1,52(sp)
    294c:	d81e                	sw	t2,48(sp)
    294e:	d62a                	sw	a0,44(sp)
    2950:	d42e                	sw	a1,40(sp)
    2952:	d232                	sw	a2,36(sp)
    2954:	d036                	sw	a3,32(sp)
    2956:	ca42                	sw	a6,20(sp)
    2958:	c846                	sw	a7,16(sp)
    295a:	c672                	sw	t3,12(sp)
    295c:	c476                	sw	t4,8(sp)
    295e:	c27a                	sw	t5,4(sp)
    2960:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2962:	200707b7          	lui	a5,0x20070
    2966:	4711                	li	a4,4
    2968:	c3d8                	sw	a4,4(a5)
    fic_irq_timer_3();
    296a:	b5afe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    296e:	50f2                	lw	ra,60(sp)
    2970:	52e2                	lw	t0,56(sp)
    2972:	5352                	lw	t1,52(sp)
    2974:	53c2                	lw	t2,48(sp)
    2976:	5532                	lw	a0,44(sp)
    2978:	55a2                	lw	a1,40(sp)
    297a:	5612                	lw	a2,36(sp)
    297c:	5682                	lw	a3,32(sp)
    297e:	4772                	lw	a4,28(sp)
    2980:	47e2                	lw	a5,24(sp)
    2982:	4852                	lw	a6,20(sp)
    2984:	48c2                	lw	a7,16(sp)
    2986:	4e32                	lw	t3,12(sp)
    2988:	4ea2                	lw	t4,8(sp)
    298a:	4f12                	lw	t5,4(sp)
    298c:	4f82                	lw	t6,0(sp)
    298e:	6121                	addi	sp,sp,64
    2990:	30200073          	mret
    2994:	0000                	unimp
	...

00002998 <handler_irq_fast_spi>:

void handler_irq_fast_spi(void)
{
    2998:	7139                	addi	sp,sp,-64
    299a:	ce3a                	sw	a4,28(sp)
    299c:	cc3e                	sw	a5,24(sp)
    299e:	de06                	sw	ra,60(sp)
    29a0:	dc16                	sw	t0,56(sp)
    29a2:	da1a                	sw	t1,52(sp)
    29a4:	d81e                	sw	t2,48(sp)
    29a6:	d62a                	sw	a0,44(sp)
    29a8:	d42e                	sw	a1,40(sp)
    29aa:	d232                	sw	a2,36(sp)
    29ac:	d036                	sw	a3,32(sp)
    29ae:	ca42                	sw	a6,20(sp)
    29b0:	c846                	sw	a7,16(sp)
    29b2:	c672                	sw	t3,12(sp)
    29b4:	c476                	sw	t4,8(sp)
    29b6:	c27a                	sw	t5,4(sp)
    29b8:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    29ba:	200707b7          	lui	a5,0x20070
    29be:	4741                	li	a4,16
    29c0:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kSpi_fic_e);
    // call the weak fic handler
    fic_irq_spi();
    29c2:	b02fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    29c6:	50f2                	lw	ra,60(sp)
    29c8:	52e2                	lw	t0,56(sp)
    29ca:	5352                	lw	t1,52(sp)
    29cc:	53c2                	lw	t2,48(sp)
    29ce:	5532                	lw	a0,44(sp)
    29d0:	55a2                	lw	a1,40(sp)
    29d2:	5612                	lw	a2,36(sp)
    29d4:	5682                	lw	a3,32(sp)
    29d6:	4772                	lw	a4,28(sp)
    29d8:	47e2                	lw	a5,24(sp)
    29da:	4852                	lw	a6,20(sp)
    29dc:	48c2                	lw	a7,16(sp)
    29de:	4e32                	lw	t3,12(sp)
    29e0:	4ea2                	lw	t4,8(sp)
    29e2:	4f12                	lw	t5,4(sp)
    29e4:	4f82                	lw	t6,0(sp)
    29e6:	6121                	addi	sp,sp,64
    29e8:	30200073          	mret
    29ec:	0000                	unimp
	...

000029f0 <handler_irq_fast_spi_flash>:

void handler_irq_fast_spi_flash(void)
{
    29f0:	7139                	addi	sp,sp,-64
    29f2:	ce3a                	sw	a4,28(sp)
    29f4:	cc3e                	sw	a5,24(sp)
    29f6:	de06                	sw	ra,60(sp)
    29f8:	dc16                	sw	t0,56(sp)
    29fa:	da1a                	sw	t1,52(sp)
    29fc:	d81e                	sw	t2,48(sp)
    29fe:	d62a                	sw	a0,44(sp)
    2a00:	d42e                	sw	a1,40(sp)
    2a02:	d232                	sw	a2,36(sp)
    2a04:	d036                	sw	a3,32(sp)
    2a06:	ca42                	sw	a6,20(sp)
    2a08:	c846                	sw	a7,16(sp)
    2a0a:	c672                	sw	t3,12(sp)
    2a0c:	c476                	sw	t4,8(sp)
    2a0e:	c27a                	sw	t5,4(sp)
    2a10:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2a12:	200707b7          	lui	a5,0x20070
    2a16:	02000713          	li	a4,32
    2a1a:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kSpiFlash_fic_e);
    // call the weak fic handler
    fic_irq_spi_flash();
    2a1c:	aa8fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2a20:	50f2                	lw	ra,60(sp)
    2a22:	52e2                	lw	t0,56(sp)
    2a24:	5352                	lw	t1,52(sp)
    2a26:	53c2                	lw	t2,48(sp)
    2a28:	5532                	lw	a0,44(sp)
    2a2a:	55a2                	lw	a1,40(sp)
    2a2c:	5612                	lw	a2,36(sp)
    2a2e:	5682                	lw	a3,32(sp)
    2a30:	4772                	lw	a4,28(sp)
    2a32:	47e2                	lw	a5,24(sp)
    2a34:	4852                	lw	a6,20(sp)
    2a36:	48c2                	lw	a7,16(sp)
    2a38:	4e32                	lw	t3,12(sp)
    2a3a:	4ea2                	lw	t4,8(sp)
    2a3c:	4f12                	lw	t5,4(sp)
    2a3e:	4f82                	lw	t6,0(sp)
    2a40:	6121                	addi	sp,sp,64
    2a42:	30200073          	mret
	...

00002a48 <handler_irq_fast_gpio_0>:

void handler_irq_fast_gpio_0(void)
{
    2a48:	7139                	addi	sp,sp,-64
    2a4a:	ce3a                	sw	a4,28(sp)
    2a4c:	cc3e                	sw	a5,24(sp)
    2a4e:	de06                	sw	ra,60(sp)
    2a50:	dc16                	sw	t0,56(sp)
    2a52:	da1a                	sw	t1,52(sp)
    2a54:	d81e                	sw	t2,48(sp)
    2a56:	d62a                	sw	a0,44(sp)
    2a58:	d42e                	sw	a1,40(sp)
    2a5a:	d232                	sw	a2,36(sp)
    2a5c:	d036                	sw	a3,32(sp)
    2a5e:	ca42                	sw	a6,20(sp)
    2a60:	c846                	sw	a7,16(sp)
    2a62:	c672                	sw	t3,12(sp)
    2a64:	c476                	sw	t4,8(sp)
    2a66:	c27a                	sw	t5,4(sp)
    2a68:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2a6a:	200707b7          	lui	a5,0x20070
    2a6e:	04000713          	li	a4,64
    2a72:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_0_fic_e);
    // call the weak fic handler
    fic_irq_gpio_0();
    2a74:	a50fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2a78:	50f2                	lw	ra,60(sp)
    2a7a:	52e2                	lw	t0,56(sp)
    2a7c:	5352                	lw	t1,52(sp)
    2a7e:	53c2                	lw	t2,48(sp)
    2a80:	5532                	lw	a0,44(sp)
    2a82:	55a2                	lw	a1,40(sp)
    2a84:	5612                	lw	a2,36(sp)
    2a86:	5682                	lw	a3,32(sp)
    2a88:	4772                	lw	a4,28(sp)
    2a8a:	47e2                	lw	a5,24(sp)
    2a8c:	4852                	lw	a6,20(sp)
    2a8e:	48c2                	lw	a7,16(sp)
    2a90:	4e32                	lw	t3,12(sp)
    2a92:	4ea2                	lw	t4,8(sp)
    2a94:	4f12                	lw	t5,4(sp)
    2a96:	4f82                	lw	t6,0(sp)
    2a98:	6121                	addi	sp,sp,64
    2a9a:	30200073          	mret
	...

00002aa0 <handler_irq_fast_gpio_1>:

void handler_irq_fast_gpio_1(void)
{
    2aa0:	7139                	addi	sp,sp,-64
    2aa2:	ce3a                	sw	a4,28(sp)
    2aa4:	cc3e                	sw	a5,24(sp)
    2aa6:	de06                	sw	ra,60(sp)
    2aa8:	dc16                	sw	t0,56(sp)
    2aaa:	da1a                	sw	t1,52(sp)
    2aac:	d81e                	sw	t2,48(sp)
    2aae:	d62a                	sw	a0,44(sp)
    2ab0:	d42e                	sw	a1,40(sp)
    2ab2:	d232                	sw	a2,36(sp)
    2ab4:	d036                	sw	a3,32(sp)
    2ab6:	ca42                	sw	a6,20(sp)
    2ab8:	c846                	sw	a7,16(sp)
    2aba:	c672                	sw	t3,12(sp)
    2abc:	c476                	sw	t4,8(sp)
    2abe:	c27a                	sw	t5,4(sp)
    2ac0:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2ac2:	200707b7          	lui	a5,0x20070
    2ac6:	08000713          	li	a4,128
    2aca:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_1_fic_e);
    // call the weak fic handler
    fic_irq_gpio_1();
    2acc:	9f8fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2ad0:	50f2                	lw	ra,60(sp)
    2ad2:	52e2                	lw	t0,56(sp)
    2ad4:	5352                	lw	t1,52(sp)
    2ad6:	53c2                	lw	t2,48(sp)
    2ad8:	5532                	lw	a0,44(sp)
    2ada:	55a2                	lw	a1,40(sp)
    2adc:	5612                	lw	a2,36(sp)
    2ade:	5682                	lw	a3,32(sp)
    2ae0:	4772                	lw	a4,28(sp)
    2ae2:	47e2                	lw	a5,24(sp)
    2ae4:	4852                	lw	a6,20(sp)
    2ae6:	48c2                	lw	a7,16(sp)
    2ae8:	4e32                	lw	t3,12(sp)
    2aea:	4ea2                	lw	t4,8(sp)
    2aec:	4f12                	lw	t5,4(sp)
    2aee:	4f82                	lw	t6,0(sp)
    2af0:	6121                	addi	sp,sp,64
    2af2:	30200073          	mret
	...

00002af8 <handler_irq_fast_gpio_2>:

void handler_irq_fast_gpio_2(void)
{
    2af8:	7139                	addi	sp,sp,-64
    2afa:	ce3a                	sw	a4,28(sp)
    2afc:	cc3e                	sw	a5,24(sp)
    2afe:	de06                	sw	ra,60(sp)
    2b00:	dc16                	sw	t0,56(sp)
    2b02:	da1a                	sw	t1,52(sp)
    2b04:	d81e                	sw	t2,48(sp)
    2b06:	d62a                	sw	a0,44(sp)
    2b08:	d42e                	sw	a1,40(sp)
    2b0a:	d232                	sw	a2,36(sp)
    2b0c:	d036                	sw	a3,32(sp)
    2b0e:	ca42                	sw	a6,20(sp)
    2b10:	c846                	sw	a7,16(sp)
    2b12:	c672                	sw	t3,12(sp)
    2b14:	c476                	sw	t4,8(sp)
    2b16:	c27a                	sw	t5,4(sp)
    2b18:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2b1a:	200707b7          	lui	a5,0x20070
    2b1e:	10000713          	li	a4,256
    2b22:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_2_fic_e);
    // call the weak fic handler
    fic_irq_gpio_2();
    2b24:	9a0fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2b28:	50f2                	lw	ra,60(sp)
    2b2a:	52e2                	lw	t0,56(sp)
    2b2c:	5352                	lw	t1,52(sp)
    2b2e:	53c2                	lw	t2,48(sp)
    2b30:	5532                	lw	a0,44(sp)
    2b32:	55a2                	lw	a1,40(sp)
    2b34:	5612                	lw	a2,36(sp)
    2b36:	5682                	lw	a3,32(sp)
    2b38:	4772                	lw	a4,28(sp)
    2b3a:	47e2                	lw	a5,24(sp)
    2b3c:	4852                	lw	a6,20(sp)
    2b3e:	48c2                	lw	a7,16(sp)
    2b40:	4e32                	lw	t3,12(sp)
    2b42:	4ea2                	lw	t4,8(sp)
    2b44:	4f12                	lw	t5,4(sp)
    2b46:	4f82                	lw	t6,0(sp)
    2b48:	6121                	addi	sp,sp,64
    2b4a:	30200073          	mret
	...

00002b50 <handler_irq_fast_gpio_3>:

void handler_irq_fast_gpio_3(void)
{
    2b50:	7139                	addi	sp,sp,-64
    2b52:	ce3a                	sw	a4,28(sp)
    2b54:	cc3e                	sw	a5,24(sp)
    2b56:	de06                	sw	ra,60(sp)
    2b58:	dc16                	sw	t0,56(sp)
    2b5a:	da1a                	sw	t1,52(sp)
    2b5c:	d81e                	sw	t2,48(sp)
    2b5e:	d62a                	sw	a0,44(sp)
    2b60:	d42e                	sw	a1,40(sp)
    2b62:	d232                	sw	a2,36(sp)
    2b64:	d036                	sw	a3,32(sp)
    2b66:	ca42                	sw	a6,20(sp)
    2b68:	c846                	sw	a7,16(sp)
    2b6a:	c672                	sw	t3,12(sp)
    2b6c:	c476                	sw	t4,8(sp)
    2b6e:	c27a                	sw	t5,4(sp)
    2b70:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2b72:	200707b7          	lui	a5,0x20070
    2b76:	20000713          	li	a4,512
    2b7a:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_3_fic_e);
    // call the weak fic handler
    fic_irq_gpio_3();
    2b7c:	948fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2b80:	50f2                	lw	ra,60(sp)
    2b82:	52e2                	lw	t0,56(sp)
    2b84:	5352                	lw	t1,52(sp)
    2b86:	53c2                	lw	t2,48(sp)
    2b88:	5532                	lw	a0,44(sp)
    2b8a:	55a2                	lw	a1,40(sp)
    2b8c:	5612                	lw	a2,36(sp)
    2b8e:	5682                	lw	a3,32(sp)
    2b90:	4772                	lw	a4,28(sp)
    2b92:	47e2                	lw	a5,24(sp)
    2b94:	4852                	lw	a6,20(sp)
    2b96:	48c2                	lw	a7,16(sp)
    2b98:	4e32                	lw	t3,12(sp)
    2b9a:	4ea2                	lw	t4,8(sp)
    2b9c:	4f12                	lw	t5,4(sp)
    2b9e:	4f82                	lw	t6,0(sp)
    2ba0:	6121                	addi	sp,sp,64
    2ba2:	30200073          	mret
	...

00002ba8 <handler_irq_fast_gpio_4>:

void handler_irq_fast_gpio_4(void)
{
    2ba8:	7139                	addi	sp,sp,-64
    2baa:	ce3a                	sw	a4,28(sp)
    2bac:	cc3e                	sw	a5,24(sp)
    2bae:	de06                	sw	ra,60(sp)
    2bb0:	dc16                	sw	t0,56(sp)
    2bb2:	da1a                	sw	t1,52(sp)
    2bb4:	d81e                	sw	t2,48(sp)
    2bb6:	d62a                	sw	a0,44(sp)
    2bb8:	d42e                	sw	a1,40(sp)
    2bba:	d232                	sw	a2,36(sp)
    2bbc:	d036                	sw	a3,32(sp)
    2bbe:	ca42                	sw	a6,20(sp)
    2bc0:	c846                	sw	a7,16(sp)
    2bc2:	c672                	sw	t3,12(sp)
    2bc4:	c476                	sw	t4,8(sp)
    2bc6:	c27a                	sw	t5,4(sp)
    2bc8:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2bca:	200707b7          	lui	a5,0x20070
    2bce:	40000713          	li	a4,1024
    2bd2:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_4_fic_e);
    // call the weak fic handler
    fic_irq_gpio_4();
    2bd4:	8f0fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2bd8:	50f2                	lw	ra,60(sp)
    2bda:	52e2                	lw	t0,56(sp)
    2bdc:	5352                	lw	t1,52(sp)
    2bde:	53c2                	lw	t2,48(sp)
    2be0:	5532                	lw	a0,44(sp)
    2be2:	55a2                	lw	a1,40(sp)
    2be4:	5612                	lw	a2,36(sp)
    2be6:	5682                	lw	a3,32(sp)
    2be8:	4772                	lw	a4,28(sp)
    2bea:	47e2                	lw	a5,24(sp)
    2bec:	4852                	lw	a6,20(sp)
    2bee:	48c2                	lw	a7,16(sp)
    2bf0:	4e32                	lw	t3,12(sp)
    2bf2:	4ea2                	lw	t4,8(sp)
    2bf4:	4f12                	lw	t5,4(sp)
    2bf6:	4f82                	lw	t6,0(sp)
    2bf8:	6121                	addi	sp,sp,64
    2bfa:	30200073          	mret
	...

00002c00 <handler_irq_fast_gpio_5>:

void handler_irq_fast_gpio_5(void)
{
    2c00:	7139                	addi	sp,sp,-64
    2c02:	cc3e                	sw	a5,24(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2c04:	6785                	lui	a5,0x1
{
    2c06:	ce3a                	sw	a4,28(sp)
    2c08:	de06                	sw	ra,60(sp)
    2c0a:	dc16                	sw	t0,56(sp)
    2c0c:	da1a                	sw	t1,52(sp)
    2c0e:	d81e                	sw	t2,48(sp)
    2c10:	d62a                	sw	a0,44(sp)
    2c12:	d42e                	sw	a1,40(sp)
    2c14:	d232                	sw	a2,36(sp)
    2c16:	d036                	sw	a3,32(sp)
    2c18:	ca42                	sw	a6,20(sp)
    2c1a:	c846                	sw	a7,16(sp)
    2c1c:	c672                	sw	t3,12(sp)
    2c1e:	c476                	sw	t4,8(sp)
    2c20:	c27a                	sw	t5,4(sp)
    2c22:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2c24:	20070737          	lui	a4,0x20070
    2c28:	80078793          	addi	a5,a5,-2048 # 800 <main+0x5ea>
    2c2c:	c35c                	sw	a5,4(a4)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_5_fic_e);
    // call the weak fic handler
    fic_irq_gpio_5();
    2c2e:	896fe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2c32:	50f2                	lw	ra,60(sp)
    2c34:	52e2                	lw	t0,56(sp)
    2c36:	5352                	lw	t1,52(sp)
    2c38:	53c2                	lw	t2,48(sp)
    2c3a:	5532                	lw	a0,44(sp)
    2c3c:	55a2                	lw	a1,40(sp)
    2c3e:	5612                	lw	a2,36(sp)
    2c40:	5682                	lw	a3,32(sp)
    2c42:	4772                	lw	a4,28(sp)
    2c44:	47e2                	lw	a5,24(sp)
    2c46:	4852                	lw	a6,20(sp)
    2c48:	48c2                	lw	a7,16(sp)
    2c4a:	4e32                	lw	t3,12(sp)
    2c4c:	4ea2                	lw	t4,8(sp)
    2c4e:	4f12                	lw	t5,4(sp)
    2c50:	4f82                	lw	t6,0(sp)
    2c52:	6121                	addi	sp,sp,64
    2c54:	30200073          	mret
    2c58:	0000                	unimp
	...

00002c5c <handler_irq_fast_gpio_6>:

void handler_irq_fast_gpio_6(void)
{
    2c5c:	7139                	addi	sp,sp,-64
    2c5e:	ce3a                	sw	a4,28(sp)
    2c60:	cc3e                	sw	a5,24(sp)
    2c62:	de06                	sw	ra,60(sp)
    2c64:	dc16                	sw	t0,56(sp)
    2c66:	da1a                	sw	t1,52(sp)
    2c68:	d81e                	sw	t2,48(sp)
    2c6a:	d62a                	sw	a0,44(sp)
    2c6c:	d42e                	sw	a1,40(sp)
    2c6e:	d232                	sw	a2,36(sp)
    2c70:	d036                	sw	a3,32(sp)
    2c72:	ca42                	sw	a6,20(sp)
    2c74:	c846                	sw	a7,16(sp)
    2c76:	c672                	sw	t3,12(sp)
    2c78:	c476                	sw	t4,8(sp)
    2c7a:	c27a                	sw	t5,4(sp)
    2c7c:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2c7e:	200707b7          	lui	a5,0x20070
    2c82:	6705                	lui	a4,0x1
    2c84:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_6_fic_e);
    // call the weak fic handler
    fic_irq_gpio_6();
    2c86:	83efe0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2c8a:	50f2                	lw	ra,60(sp)
    2c8c:	52e2                	lw	t0,56(sp)
    2c8e:	5352                	lw	t1,52(sp)
    2c90:	53c2                	lw	t2,48(sp)
    2c92:	5532                	lw	a0,44(sp)
    2c94:	55a2                	lw	a1,40(sp)
    2c96:	5612                	lw	a2,36(sp)
    2c98:	5682                	lw	a3,32(sp)
    2c9a:	4772                	lw	a4,28(sp)
    2c9c:	47e2                	lw	a5,24(sp)
    2c9e:	4852                	lw	a6,20(sp)
    2ca0:	48c2                	lw	a7,16(sp)
    2ca2:	4e32                	lw	t3,12(sp)
    2ca4:	4ea2                	lw	t4,8(sp)
    2ca6:	4f12                	lw	t5,4(sp)
    2ca8:	4f82                	lw	t6,0(sp)
    2caa:	6121                	addi	sp,sp,64
    2cac:	30200073          	mret
    2cb0:	0000                	unimp
	...

00002cb4 <handler_irq_fast_gpio_7>:

void handler_irq_fast_gpio_7(void)
{
    2cb4:	7139                	addi	sp,sp,-64
    2cb6:	ce3a                	sw	a4,28(sp)
    2cb8:	cc3e                	sw	a5,24(sp)
    2cba:	de06                	sw	ra,60(sp)
    2cbc:	dc16                	sw	t0,56(sp)
    2cbe:	da1a                	sw	t1,52(sp)
    2cc0:	d81e                	sw	t2,48(sp)
    2cc2:	d62a                	sw	a0,44(sp)
    2cc4:	d42e                	sw	a1,40(sp)
    2cc6:	d232                	sw	a2,36(sp)
    2cc8:	d036                	sw	a3,32(sp)
    2cca:	ca42                	sw	a6,20(sp)
    2ccc:	c846                	sw	a7,16(sp)
    2cce:	c672                	sw	t3,12(sp)
    2cd0:	c476                	sw	t4,8(sp)
    2cd2:	c27a                	sw	t5,4(sp)
    2cd4:	c07e                	sw	t6,0(sp)
    fast_intr_ctrl_peri->FAST_INTR_CLEAR = reg;
    2cd6:	200707b7          	lui	a5,0x20070
    2cda:	6709                	lui	a4,0x2
    2cdc:	c3d8                	sw	a4,4(a5)
    // The interrupt is cleared.
    clear_fast_interrupt(kGpio_7_fic_e);
    // call the weak fic handler
    fic_irq_gpio_7();
    2cde:	fe7fd0ef          	jal	ra,cc4 <fic_irq_timer_1>
}
    2ce2:	50f2                	lw	ra,60(sp)
    2ce4:	52e2                	lw	t0,56(sp)
    2ce6:	5352                	lw	t1,52(sp)
    2ce8:	53c2                	lw	t2,48(sp)
    2cea:	5532                	lw	a0,44(sp)
    2cec:	55a2                	lw	a1,40(sp)
    2cee:	5612                	lw	a2,36(sp)
    2cf0:	5682                	lw	a3,32(sp)
    2cf2:	4772                	lw	a4,28(sp)
    2cf4:	47e2                	lw	a5,24(sp)
    2cf6:	4852                	lw	a6,20(sp)
    2cf8:	48c2                	lw	a7,16(sp)
    2cfa:	4e32                	lw	t3,12(sp)
    2cfc:	4ea2                	lw	t4,8(sp)
    2cfe:	4f12                	lw	t5,4(sp)
    2d00:	4f82                	lw	t6,0(sp)
    2d02:	6121                	addi	sp,sp,64
    2d04:	30200073          	mret
	...

00002d0a <atexit>:
    2d0a:	85aa                	mv	a1,a0
    2d0c:	4681                	li	a3,0
    2d0e:	4601                	li	a2,0
    2d10:	4501                	li	a0,0
    2d12:	a985                	j	3182 <__register_exitproc>

00002d14 <__libc_fini_array>:
    2d14:	1141                	addi	sp,sp,-16
    2d16:	000807b7          	lui	a5,0x80
    2d1a:	c422                	sw	s0,8(sp)
    2d1c:	00080437          	lui	s0,0x80
    2d20:	63478713          	addi	a4,a5,1588 # 80634 <impure_data>
    2d24:	63440413          	addi	s0,s0,1588 # 80634 <impure_data>
    2d28:	8c19                	sub	s0,s0,a4
    2d2a:	c226                	sw	s1,4(sp)
    2d2c:	c606                	sw	ra,12(sp)
    2d2e:	8409                	srai	s0,s0,0x2
    2d30:	63478493          	addi	s1,a5,1588
    2d34:	e411                	bnez	s0,2d40 <__libc_fini_array+0x2c>
    2d36:	40b2                	lw	ra,12(sp)
    2d38:	4422                	lw	s0,8(sp)
    2d3a:	4492                	lw	s1,4(sp)
    2d3c:	0141                	addi	sp,sp,16
    2d3e:	8082                	ret
    2d40:	147d                	addi	s0,s0,-1
    2d42:	00241793          	slli	a5,s0,0x2
    2d46:	97a6                	add	a5,a5,s1
    2d48:	439c                	lw	a5,0(a5)
    2d4a:	9782                	jalr	a5
    2d4c:	b7e5                	j	2d34 <__libc_fini_array+0x20>

00002d4e <__libc_init_array>:
    2d4e:	1141                	addi	sp,sp,-16
    2d50:	c422                	sw	s0,8(sp)
    2d52:	c226                	sw	s1,4(sp)
    2d54:	00080437          	lui	s0,0x80
    2d58:	000804b7          	lui	s1,0x80
    2d5c:	63448793          	addi	a5,s1,1588 # 80634 <impure_data>
    2d60:	63440413          	addi	s0,s0,1588 # 80634 <impure_data>
    2d64:	8c1d                	sub	s0,s0,a5
    2d66:	c04a                	sw	s2,0(sp)
    2d68:	c606                	sw	ra,12(sp)
    2d6a:	8409                	srai	s0,s0,0x2
    2d6c:	63448493          	addi	s1,s1,1588
    2d70:	4901                	li	s2,0
    2d72:	02891763          	bne	s2,s0,2da0 <__libc_init_array+0x52>
    2d76:	000804b7          	lui	s1,0x80
    2d7a:	00080437          	lui	s0,0x80
    2d7e:	63448793          	addi	a5,s1,1588 # 80634 <impure_data>
    2d82:	63440413          	addi	s0,s0,1588 # 80634 <impure_data>
    2d86:	8c1d                	sub	s0,s0,a5
    2d88:	8409                	srai	s0,s0,0x2
    2d8a:	63448493          	addi	s1,s1,1588
    2d8e:	4901                	li	s2,0
    2d90:	00891d63          	bne	s2,s0,2daa <__libc_init_array+0x5c>
    2d94:	40b2                	lw	ra,12(sp)
    2d96:	4422                	lw	s0,8(sp)
    2d98:	4492                	lw	s1,4(sp)
    2d9a:	4902                	lw	s2,0(sp)
    2d9c:	0141                	addi	sp,sp,16
    2d9e:	8082                	ret
    2da0:	409c                	lw	a5,0(s1)
    2da2:	0905                	addi	s2,s2,1
    2da4:	0491                	addi	s1,s1,4
    2da6:	9782                	jalr	a5
    2da8:	b7e9                	j	2d72 <__libc_init_array+0x24>
    2daa:	409c                	lw	a5,0(s1)
    2dac:	0905                	addi	s2,s2,1
    2dae:	0491                	addi	s1,s1,4
    2db0:	9782                	jalr	a5
    2db2:	bff9                	j	2d90 <__libc_init_array+0x42>

00002db4 <memset>:
    2db4:	832a                	mv	t1,a0
    2db6:	c611                	beqz	a2,2dc2 <memset+0xe>
    2db8:	00b30023          	sb	a1,0(t1)
    2dbc:	167d                	addi	a2,a2,-1
    2dbe:	0305                	addi	t1,t1,1
    2dc0:	fe65                	bnez	a2,2db8 <memset+0x4>
    2dc2:	8082                	ret

00002dc4 <_puts_r>:
    2dc4:	1101                	addi	sp,sp,-32
    2dc6:	ca26                	sw	s1,20(sp)
    2dc8:	c84a                	sw	s2,16(sp)
    2dca:	ce06                	sw	ra,28(sp)
    2dcc:	cc22                	sw	s0,24(sp)
    2dce:	c64e                	sw	s3,12(sp)
    2dd0:	c452                	sw	s4,8(sp)
    2dd2:	84aa                	mv	s1,a0
    2dd4:	892e                	mv	s2,a1
    2dd6:	c509                	beqz	a0,2de0 <_puts_r+0x1c>
    2dd8:	4d1c                	lw	a5,24(a0)
    2dda:	e399                	bnez	a5,2de0 <_puts_r+0x1c>
    2ddc:	77c000ef          	jal	ra,3558 <__sinit>
    2de0:	4c9c                	lw	a5,24(s1)
    2de2:	4480                	lw	s0,8(s1)
    2de4:	e781                	bnez	a5,2dec <_puts_r+0x28>
    2de6:	8526                	mv	a0,s1
    2de8:	770000ef          	jal	ra,3558 <__sinit>
    2dec:	000807b7          	lui	a5,0x80
    2df0:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    2df4:	02f41c63          	bne	s0,a5,2e2c <_puts_r+0x68>
    2df8:	40c0                	lw	s0,4(s1)
    2dfa:	00c45783          	lhu	a5,12(s0)
    2dfe:	8ba1                	andi	a5,a5,8
    2e00:	c7b1                	beqz	a5,2e4c <_puts_r+0x88>
    2e02:	481c                	lw	a5,16(s0)
    2e04:	c7a1                	beqz	a5,2e4c <_puts_r+0x88>
    2e06:	59fd                	li	s3,-1
    2e08:	4a29                	li	s4,10
    2e0a:	441c                	lw	a5,8(s0)
    2e0c:	00094583          	lbu	a1,0(s2)
    2e10:	17fd                	addi	a5,a5,-1
    2e12:	e9b1                	bnez	a1,2e66 <_puts_r+0xa2>
    2e14:	c41c                	sw	a5,8(s0)
    2e16:	0607de63          	bgez	a5,2e92 <_puts_r+0xce>
    2e1a:	8622                	mv	a2,s0
    2e1c:	45a9                	li	a1,10
    2e1e:	8526                	mv	a0,s1
    2e20:	2261                	jal	2fa8 <__swbuf_r>
    2e22:	57fd                	li	a5,-1
    2e24:	02f50863          	beq	a0,a5,2e54 <_puts_r+0x90>
    2e28:	4529                	li	a0,10
    2e2a:	a035                	j	2e56 <_puts_r+0x92>
    2e2c:	000807b7          	lui	a5,0x80
    2e30:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    2e34:	00f41463          	bne	s0,a5,2e3c <_puts_r+0x78>
    2e38:	4480                	lw	s0,8(s1)
    2e3a:	b7c1                	j	2dfa <_puts_r+0x36>
    2e3c:	000807b7          	lui	a5,0x80
    2e40:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    2e44:	faf41be3          	bne	s0,a5,2dfa <_puts_r+0x36>
    2e48:	44c0                	lw	s0,12(s1)
    2e4a:	bf45                	j	2dfa <_puts_r+0x36>
    2e4c:	85a2                	mv	a1,s0
    2e4e:	8526                	mv	a0,s1
    2e50:	241d                	jal	3076 <__swsetup_r>
    2e52:	d955                	beqz	a0,2e06 <_puts_r+0x42>
    2e54:	557d                	li	a0,-1
    2e56:	40f2                	lw	ra,28(sp)
    2e58:	4462                	lw	s0,24(sp)
    2e5a:	44d2                	lw	s1,20(sp)
    2e5c:	4942                	lw	s2,16(sp)
    2e5e:	49b2                	lw	s3,12(sp)
    2e60:	4a22                	lw	s4,8(sp)
    2e62:	6105                	addi	sp,sp,32
    2e64:	8082                	ret
    2e66:	c41c                	sw	a5,8(s0)
    2e68:	0905                	addi	s2,s2,1
    2e6a:	0007d763          	bgez	a5,2e78 <_puts_r+0xb4>
    2e6e:	4c18                	lw	a4,24(s0)
    2e70:	00e7cb63          	blt	a5,a4,2e86 <_puts_r+0xc2>
    2e74:	01458963          	beq	a1,s4,2e86 <_puts_r+0xc2>
    2e78:	401c                	lw	a5,0(s0)
    2e7a:	00178713          	addi	a4,a5,1
    2e7e:	c018                	sw	a4,0(s0)
    2e80:	00b78023          	sb	a1,0(a5)
    2e84:	b759                	j	2e0a <_puts_r+0x46>
    2e86:	8622                	mv	a2,s0
    2e88:	8526                	mv	a0,s1
    2e8a:	2a39                	jal	2fa8 <__swbuf_r>
    2e8c:	f7351fe3          	bne	a0,s3,2e0a <_puts_r+0x46>
    2e90:	b7d1                	j	2e54 <_puts_r+0x90>
    2e92:	401c                	lw	a5,0(s0)
    2e94:	00178713          	addi	a4,a5,1
    2e98:	c018                	sw	a4,0(s0)
    2e9a:	4729                	li	a4,10
    2e9c:	00e78023          	sb	a4,0(a5)
    2ea0:	b761                	j	2e28 <_puts_r+0x64>

00002ea2 <puts>:
    2ea2:	000807b7          	lui	a5,0x80
    2ea6:	85aa                	mv	a1,a0
    2ea8:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    2eac:	bf21                	j	2dc4 <_puts_r>

00002eae <cleanup_glue>:
    2eae:	1141                	addi	sp,sp,-16
    2eb0:	c422                	sw	s0,8(sp)
    2eb2:	842e                	mv	s0,a1
    2eb4:	418c                	lw	a1,0(a1)
    2eb6:	c226                	sw	s1,4(sp)
    2eb8:	c606                	sw	ra,12(sp)
    2eba:	84aa                	mv	s1,a0
    2ebc:	c191                	beqz	a1,2ec0 <cleanup_glue+0x12>
    2ebe:	3fc5                	jal	2eae <cleanup_glue>
    2ec0:	85a2                	mv	a1,s0
    2ec2:	4422                	lw	s0,8(sp)
    2ec4:	40b2                	lw	ra,12(sp)
    2ec6:	8526                	mv	a0,s1
    2ec8:	4492                	lw	s1,4(sp)
    2eca:	0141                	addi	sp,sp,16
    2ecc:	17d0006f          	j	3848 <_free_r>

00002ed0 <_reclaim_reent>:
    2ed0:	000807b7          	lui	a5,0x80
    2ed4:	69c7a783          	lw	a5,1692(a5) # 8069c <_impure_ptr>
    2ed8:	0ca78763          	beq	a5,a0,2fa6 <_reclaim_reent+0xd6>
    2edc:	515c                	lw	a5,36(a0)
    2ede:	1101                	addi	sp,sp,-32
    2ee0:	cc22                	sw	s0,24(sp)
    2ee2:	ce06                	sw	ra,28(sp)
    2ee4:	ca26                	sw	s1,20(sp)
    2ee6:	c84a                	sw	s2,16(sp)
    2ee8:	c64e                	sw	s3,12(sp)
    2eea:	842a                	mv	s0,a0
    2eec:	cf81                	beqz	a5,2f04 <_reclaim_reent+0x34>
    2eee:	47dc                	lw	a5,12(a5)
    2ef0:	4481                	li	s1,0
    2ef2:	08000913          	li	s2,128
    2ef6:	e3d1                	bnez	a5,2f7a <_reclaim_reent+0xaa>
    2ef8:	505c                	lw	a5,36(s0)
    2efa:	438c                	lw	a1,0(a5)
    2efc:	c581                	beqz	a1,2f04 <_reclaim_reent+0x34>
    2efe:	8522                	mv	a0,s0
    2f00:	149000ef          	jal	ra,3848 <_free_r>
    2f04:	484c                	lw	a1,20(s0)
    2f06:	c581                	beqz	a1,2f0e <_reclaim_reent+0x3e>
    2f08:	8522                	mv	a0,s0
    2f0a:	13f000ef          	jal	ra,3848 <_free_r>
    2f0e:	504c                	lw	a1,36(s0)
    2f10:	c581                	beqz	a1,2f18 <_reclaim_reent+0x48>
    2f12:	8522                	mv	a0,s0
    2f14:	135000ef          	jal	ra,3848 <_free_r>
    2f18:	5c0c                	lw	a1,56(s0)
    2f1a:	c581                	beqz	a1,2f22 <_reclaim_reent+0x52>
    2f1c:	8522                	mv	a0,s0
    2f1e:	12b000ef          	jal	ra,3848 <_free_r>
    2f22:	5c4c                	lw	a1,60(s0)
    2f24:	c581                	beqz	a1,2f2c <_reclaim_reent+0x5c>
    2f26:	8522                	mv	a0,s0
    2f28:	121000ef          	jal	ra,3848 <_free_r>
    2f2c:	402c                	lw	a1,64(s0)
    2f2e:	c581                	beqz	a1,2f36 <_reclaim_reent+0x66>
    2f30:	8522                	mv	a0,s0
    2f32:	117000ef          	jal	ra,3848 <_free_r>
    2f36:	4c6c                	lw	a1,92(s0)
    2f38:	c581                	beqz	a1,2f40 <_reclaim_reent+0x70>
    2f3a:	8522                	mv	a0,s0
    2f3c:	10d000ef          	jal	ra,3848 <_free_r>
    2f40:	4c2c                	lw	a1,88(s0)
    2f42:	c581                	beqz	a1,2f4a <_reclaim_reent+0x7a>
    2f44:	8522                	mv	a0,s0
    2f46:	103000ef          	jal	ra,3848 <_free_r>
    2f4a:	584c                	lw	a1,52(s0)
    2f4c:	c581                	beqz	a1,2f54 <_reclaim_reent+0x84>
    2f4e:	8522                	mv	a0,s0
    2f50:	0f9000ef          	jal	ra,3848 <_free_r>
    2f54:	4c1c                	lw	a5,24(s0)
    2f56:	c3a9                	beqz	a5,2f98 <_reclaim_reent+0xc8>
    2f58:	541c                	lw	a5,40(s0)
    2f5a:	8522                	mv	a0,s0
    2f5c:	9782                	jalr	a5
    2f5e:	442c                	lw	a1,72(s0)
    2f60:	cd85                	beqz	a1,2f98 <_reclaim_reent+0xc8>
    2f62:	8522                	mv	a0,s0
    2f64:	4462                	lw	s0,24(sp)
    2f66:	40f2                	lw	ra,28(sp)
    2f68:	44d2                	lw	s1,20(sp)
    2f6a:	4942                	lw	s2,16(sp)
    2f6c:	49b2                	lw	s3,12(sp)
    2f6e:	6105                	addi	sp,sp,32
    2f70:	bf3d                	j	2eae <cleanup_glue>
    2f72:	95a6                	add	a1,a1,s1
    2f74:	418c                	lw	a1,0(a1)
    2f76:	e991                	bnez	a1,2f8a <_reclaim_reent+0xba>
    2f78:	0491                	addi	s1,s1,4
    2f7a:	505c                	lw	a5,36(s0)
    2f7c:	47cc                	lw	a1,12(a5)
    2f7e:	ff249ae3          	bne	s1,s2,2f72 <_reclaim_reent+0xa2>
    2f82:	8522                	mv	a0,s0
    2f84:	0c5000ef          	jal	ra,3848 <_free_r>
    2f88:	bf85                	j	2ef8 <_reclaim_reent+0x28>
    2f8a:	0005a983          	lw	s3,0(a1)
    2f8e:	8522                	mv	a0,s0
    2f90:	0b9000ef          	jal	ra,3848 <_free_r>
    2f94:	85ce                	mv	a1,s3
    2f96:	b7c5                	j	2f76 <_reclaim_reent+0xa6>
    2f98:	40f2                	lw	ra,28(sp)
    2f9a:	4462                	lw	s0,24(sp)
    2f9c:	44d2                	lw	s1,20(sp)
    2f9e:	4942                	lw	s2,16(sp)
    2fa0:	49b2                	lw	s3,12(sp)
    2fa2:	6105                	addi	sp,sp,32
    2fa4:	8082                	ret
    2fa6:	8082                	ret

00002fa8 <__swbuf_r>:
    2fa8:	1101                	addi	sp,sp,-32
    2faa:	cc22                	sw	s0,24(sp)
    2fac:	ca26                	sw	s1,20(sp)
    2fae:	c84a                	sw	s2,16(sp)
    2fb0:	ce06                	sw	ra,28(sp)
    2fb2:	c64e                	sw	s3,12(sp)
    2fb4:	84aa                	mv	s1,a0
    2fb6:	892e                	mv	s2,a1
    2fb8:	8432                	mv	s0,a2
    2fba:	c501                	beqz	a0,2fc2 <__swbuf_r+0x1a>
    2fbc:	4d1c                	lw	a5,24(a0)
    2fbe:	e391                	bnez	a5,2fc2 <__swbuf_r+0x1a>
    2fc0:	2b61                	jal	3558 <__sinit>
    2fc2:	000807b7          	lui	a5,0x80
    2fc6:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    2fca:	06f41963          	bne	s0,a5,303c <__swbuf_r+0x94>
    2fce:	40c0                	lw	s0,4(s1)
    2fd0:	4c1c                	lw	a5,24(s0)
    2fd2:	c41c                	sw	a5,8(s0)
    2fd4:	00c45783          	lhu	a5,12(s0)
    2fd8:	8ba1                	andi	a5,a5,8
    2fda:	c3c9                	beqz	a5,305c <__swbuf_r+0xb4>
    2fdc:	481c                	lw	a5,16(s0)
    2fde:	cfbd                	beqz	a5,305c <__swbuf_r+0xb4>
    2fe0:	481c                	lw	a5,16(s0)
    2fe2:	4008                	lw	a0,0(s0)
    2fe4:	0ff97993          	zext.b	s3,s2
    2fe8:	0ff97913          	zext.b	s2,s2
    2fec:	8d1d                	sub	a0,a0,a5
    2fee:	485c                	lw	a5,20(s0)
    2ff0:	00f54663          	blt	a0,a5,2ffc <__swbuf_r+0x54>
    2ff4:	85a2                	mv	a1,s0
    2ff6:	8526                	mv	a0,s1
    2ff8:	2931                	jal	3414 <_fflush_r>
    2ffa:	e52d                	bnez	a0,3064 <__swbuf_r+0xbc>
    2ffc:	441c                	lw	a5,8(s0)
    2ffe:	0505                	addi	a0,a0,1
    3000:	17fd                	addi	a5,a5,-1
    3002:	c41c                	sw	a5,8(s0)
    3004:	401c                	lw	a5,0(s0)
    3006:	00178713          	addi	a4,a5,1
    300a:	c018                	sw	a4,0(s0)
    300c:	01378023          	sb	s3,0(a5)
    3010:	485c                	lw	a5,20(s0)
    3012:	00a78963          	beq	a5,a0,3024 <__swbuf_r+0x7c>
    3016:	00c45783          	lhu	a5,12(s0)
    301a:	8b85                	andi	a5,a5,1
    301c:	cb81                	beqz	a5,302c <__swbuf_r+0x84>
    301e:	47a9                	li	a5,10
    3020:	00f91663          	bne	s2,a5,302c <__swbuf_r+0x84>
    3024:	85a2                	mv	a1,s0
    3026:	8526                	mv	a0,s1
    3028:	26f5                	jal	3414 <_fflush_r>
    302a:	ed0d                	bnez	a0,3064 <__swbuf_r+0xbc>
    302c:	40f2                	lw	ra,28(sp)
    302e:	4462                	lw	s0,24(sp)
    3030:	44d2                	lw	s1,20(sp)
    3032:	49b2                	lw	s3,12(sp)
    3034:	854a                	mv	a0,s2
    3036:	4942                	lw	s2,16(sp)
    3038:	6105                	addi	sp,sp,32
    303a:	8082                	ret
    303c:	000807b7          	lui	a5,0x80
    3040:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    3044:	00f41463          	bne	s0,a5,304c <__swbuf_r+0xa4>
    3048:	4480                	lw	s0,8(s1)
    304a:	b759                	j	2fd0 <__swbuf_r+0x28>
    304c:	000807b7          	lui	a5,0x80
    3050:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    3054:	f6f41ee3          	bne	s0,a5,2fd0 <__swbuf_r+0x28>
    3058:	44c0                	lw	s0,12(s1)
    305a:	bf9d                	j	2fd0 <__swbuf_r+0x28>
    305c:	85a2                	mv	a1,s0
    305e:	8526                	mv	a0,s1
    3060:	2819                	jal	3076 <__swsetup_r>
    3062:	dd3d                	beqz	a0,2fe0 <__swbuf_r+0x38>
    3064:	597d                	li	s2,-1
    3066:	b7d9                	j	302c <__swbuf_r+0x84>

00003068 <__swbuf>:
    3068:	000807b7          	lui	a5,0x80
    306c:	862e                	mv	a2,a1
    306e:	85aa                	mv	a1,a0
    3070:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3074:	bf15                	j	2fa8 <__swbuf_r>

00003076 <__swsetup_r>:
    3076:	1141                	addi	sp,sp,-16
    3078:	000807b7          	lui	a5,0x80
    307c:	c226                	sw	s1,4(sp)
    307e:	69c7a483          	lw	s1,1692(a5) # 8069c <_impure_ptr>
    3082:	c422                	sw	s0,8(sp)
    3084:	c04a                	sw	s2,0(sp)
    3086:	c606                	sw	ra,12(sp)
    3088:	892a                	mv	s2,a0
    308a:	842e                	mv	s0,a1
    308c:	c489                	beqz	s1,3096 <__swsetup_r+0x20>
    308e:	4c9c                	lw	a5,24(s1)
    3090:	e399                	bnez	a5,3096 <__swsetup_r+0x20>
    3092:	8526                	mv	a0,s1
    3094:	21d1                	jal	3558 <__sinit>
    3096:	000807b7          	lui	a5,0x80
    309a:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    309e:	02f41763          	bne	s0,a5,30cc <__swsetup_r+0x56>
    30a2:	40c0                	lw	s0,4(s1)
    30a4:	00c41783          	lh	a5,12(s0)
    30a8:	01079713          	slli	a4,a5,0x10
    30ac:	0087f693          	andi	a3,a5,8
    30b0:	8341                	srli	a4,a4,0x10
    30b2:	eab5                	bnez	a3,3126 <__swsetup_r+0xb0>
    30b4:	01077693          	andi	a3,a4,16
    30b8:	ea95                	bnez	a3,30ec <__swsetup_r+0x76>
    30ba:	4725                	li	a4,9
    30bc:	00e92023          	sw	a4,0(s2)
    30c0:	0407e793          	ori	a5,a5,64
    30c4:	00f41623          	sh	a5,12(s0)
    30c8:	557d                	li	a0,-1
    30ca:	a879                	j	3168 <__swsetup_r+0xf2>
    30cc:	000807b7          	lui	a5,0x80
    30d0:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    30d4:	00f41463          	bne	s0,a5,30dc <__swsetup_r+0x66>
    30d8:	4480                	lw	s0,8(s1)
    30da:	b7e9                	j	30a4 <__swsetup_r+0x2e>
    30dc:	000807b7          	lui	a5,0x80
    30e0:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    30e4:	fcf410e3          	bne	s0,a5,30a4 <__swsetup_r+0x2e>
    30e8:	44c0                	lw	s0,12(s1)
    30ea:	bf6d                	j	30a4 <__swsetup_r+0x2e>
    30ec:	8b11                	andi	a4,a4,4
    30ee:	c715                	beqz	a4,311a <__swsetup_r+0xa4>
    30f0:	584c                	lw	a1,52(s0)
    30f2:	c991                	beqz	a1,3106 <__swsetup_r+0x90>
    30f4:	04440793          	addi	a5,s0,68
    30f8:	00f58563          	beq	a1,a5,3102 <__swsetup_r+0x8c>
    30fc:	854a                	mv	a0,s2
    30fe:	74a000ef          	jal	ra,3848 <_free_r>
    3102:	02042a23          	sw	zero,52(s0)
    3106:	00c45783          	lhu	a5,12(s0)
    310a:	00042223          	sw	zero,4(s0)
    310e:	fdb7f793          	andi	a5,a5,-37
    3112:	00f41623          	sh	a5,12(s0)
    3116:	481c                	lw	a5,16(s0)
    3118:	c01c                	sw	a5,0(s0)
    311a:	00c45783          	lhu	a5,12(s0)
    311e:	0087e793          	ori	a5,a5,8
    3122:	00f41623          	sh	a5,12(s0)
    3126:	481c                	lw	a5,16(s0)
    3128:	ef81                	bnez	a5,3140 <__swsetup_r+0xca>
    312a:	00c45783          	lhu	a5,12(s0)
    312e:	20000713          	li	a4,512
    3132:	2807f793          	andi	a5,a5,640
    3136:	00e78563          	beq	a5,a4,3140 <__swsetup_r+0xca>
    313a:	85a2                	mv	a1,s0
    313c:	854a                	mv	a0,s2
    313e:	2d85                	jal	37ae <__smakebuf_r>
    3140:	00c41783          	lh	a5,12(s0)
    3144:	01079713          	slli	a4,a5,0x10
    3148:	0017f693          	andi	a3,a5,1
    314c:	8341                	srli	a4,a4,0x10
    314e:	c29d                	beqz	a3,3174 <__swsetup_r+0xfe>
    3150:	4854                	lw	a3,20(s0)
    3152:	00042423          	sw	zero,8(s0)
    3156:	40d006b3          	neg	a3,a3
    315a:	cc14                	sw	a3,24(s0)
    315c:	4814                	lw	a3,16(s0)
    315e:	4501                	li	a0,0
    3160:	e681                	bnez	a3,3168 <__swsetup_r+0xf2>
    3162:	08077713          	andi	a4,a4,128
    3166:	ff29                	bnez	a4,30c0 <__swsetup_r+0x4a>
    3168:	40b2                	lw	ra,12(sp)
    316a:	4422                	lw	s0,8(sp)
    316c:	4492                	lw	s1,4(sp)
    316e:	4902                	lw	s2,0(sp)
    3170:	0141                	addi	sp,sp,16
    3172:	8082                	ret
    3174:	00277693          	andi	a3,a4,2
    3178:	4601                	li	a2,0
    317a:	e291                	bnez	a3,317e <__swsetup_r+0x108>
    317c:	4850                	lw	a2,20(s0)
    317e:	c410                	sw	a2,8(s0)
    3180:	bff1                	j	315c <__swsetup_r+0xe6>

00003182 <__register_exitproc>:
    3182:	00080837          	lui	a6,0x80
    3186:	6b082783          	lw	a5,1712(a6) # 806b0 <_global_atexit>
    318a:	88aa                	mv	a7,a0
    318c:	e39d                	bnez	a5,31b2 <__register_exitproc+0x30>
    318e:	00081737          	lui	a4,0x81
    3192:	81870513          	addi	a0,a4,-2024 # 80818 <_global_atexit0>
    3196:	6aa82823          	sw	a0,1712(a6)
    319a:	00000313          	li	t1,0
    319e:	81870793          	addi	a5,a4,-2024
    31a2:	00030863          	beqz	t1,31b2 <__register_exitproc+0x30>
    31a6:	00002783          	lw	a5,0(zero) # 0 <__vector_start>
    31aa:	08f52423          	sw	a5,136(a0)
    31ae:	81870793          	addi	a5,a4,-2024
    31b2:	43d8                	lw	a4,4(a5)
    31b4:	487d                	li	a6,31
    31b6:	557d                	li	a0,-1
    31b8:	04e84663          	blt	a6,a4,3204 <__register_exitproc+0x82>
    31bc:	02088d63          	beqz	a7,31f6 <__register_exitproc+0x74>
    31c0:	0887a803          	lw	a6,136(a5)
    31c4:	04080063          	beqz	a6,3204 <__register_exitproc+0x82>
    31c8:	00271513          	slli	a0,a4,0x2
    31cc:	9542                	add	a0,a0,a6
    31ce:	c110                	sw	a2,0(a0)
    31d0:	10082303          	lw	t1,256(a6)
    31d4:	4605                	li	a2,1
    31d6:	00e61633          	sll	a2,a2,a4
    31da:	00c36333          	or	t1,t1,a2
    31de:	10682023          	sw	t1,256(a6)
    31e2:	08d52023          	sw	a3,128(a0)
    31e6:	4689                	li	a3,2
    31e8:	00d89763          	bne	a7,a3,31f6 <__register_exitproc+0x74>
    31ec:	10482683          	lw	a3,260(a6)
    31f0:	8ed1                	or	a3,a3,a2
    31f2:	10d82223          	sw	a3,260(a6)
    31f6:	00170693          	addi	a3,a4,1
    31fa:	070a                	slli	a4,a4,0x2
    31fc:	c3d4                	sw	a3,4(a5)
    31fe:	97ba                	add	a5,a5,a4
    3200:	c78c                	sw	a1,8(a5)
    3202:	4501                	li	a0,0
    3204:	8082                	ret

00003206 <__call_exitprocs>:
    3206:	7179                	addi	sp,sp,-48
    3208:	c85a                	sw	s6,16(sp)
    320a:	00080b37          	lui	s6,0x80
    320e:	ca56                	sw	s5,20(sp)
    3210:	c65e                	sw	s7,12(sp)
    3212:	c462                	sw	s8,8(sp)
    3214:	d606                	sw	ra,44(sp)
    3216:	d422                	sw	s0,40(sp)
    3218:	d226                	sw	s1,36(sp)
    321a:	d04a                	sw	s2,32(sp)
    321c:	ce4e                	sw	s3,28(sp)
    321e:	cc52                	sw	s4,24(sp)
    3220:	c266                	sw	s9,4(sp)
    3222:	8baa                	mv	s7,a0
    3224:	8aae                	mv	s5,a1
    3226:	6b0b0b13          	addi	s6,s6,1712 # 806b0 <_global_atexit>
    322a:	4c05                	li	s8,1
    322c:	000b2483          	lw	s1,0(s6)
    3230:	cc81                	beqz	s1,3248 <__call_exitprocs+0x42>
    3232:	40c0                	lw	s0,4(s1)
    3234:	0884a983          	lw	s3,136(s1)
    3238:	fff40913          	addi	s2,s0,-1
    323c:	040a                	slli	s0,s0,0x2
    323e:	00898a33          	add	s4,s3,s0
    3242:	9426                	add	s0,s0,s1
    3244:	00095f63          	bgez	s2,3262 <__call_exitprocs+0x5c>
    3248:	50b2                	lw	ra,44(sp)
    324a:	5422                	lw	s0,40(sp)
    324c:	5492                	lw	s1,36(sp)
    324e:	5902                	lw	s2,32(sp)
    3250:	49f2                	lw	s3,28(sp)
    3252:	4a62                	lw	s4,24(sp)
    3254:	4ad2                	lw	s5,20(sp)
    3256:	4b42                	lw	s6,16(sp)
    3258:	4bb2                	lw	s7,12(sp)
    325a:	4c22                	lw	s8,8(sp)
    325c:	4c92                	lw	s9,4(sp)
    325e:	6145                	addi	sp,sp,48
    3260:	8082                	ret
    3262:	000a8c63          	beqz	s5,327a <__call_exitprocs+0x74>
    3266:	00099663          	bnez	s3,3272 <__call_exitprocs+0x6c>
    326a:	197d                	addi	s2,s2,-1
    326c:	1a71                	addi	s4,s4,-4
    326e:	1471                	addi	s0,s0,-4
    3270:	bfd1                	j	3244 <__call_exitprocs+0x3e>
    3272:	07ca2783          	lw	a5,124(s4)
    3276:	ff579ae3          	bne	a5,s5,326a <__call_exitprocs+0x64>
    327a:	40d8                	lw	a4,4(s1)
    327c:	405c                	lw	a5,4(s0)
    327e:	177d                	addi	a4,a4,-1
    3280:	03271863          	bne	a4,s2,32b0 <__call_exitprocs+0xaa>
    3284:	0124a223          	sw	s2,4(s1)
    3288:	d3ed                	beqz	a5,326a <__call_exitprocs+0x64>
    328a:	0044ac83          	lw	s9,4(s1)
    328e:	00098863          	beqz	s3,329e <__call_exitprocs+0x98>
    3292:	1009a683          	lw	a3,256(s3)
    3296:	012c1733          	sll	a4,s8,s2
    329a:	8ef9                	and	a3,a3,a4
    329c:	ee89                	bnez	a3,32b6 <__call_exitprocs+0xb0>
    329e:	9782                	jalr	a5
    32a0:	40d8                	lw	a4,4(s1)
    32a2:	000b2783          	lw	a5,0(s6)
    32a6:	f99713e3          	bne	a4,s9,322c <__call_exitprocs+0x26>
    32aa:	fcf480e3          	beq	s1,a5,326a <__call_exitprocs+0x64>
    32ae:	bfbd                	j	322c <__call_exitprocs+0x26>
    32b0:	00042223          	sw	zero,4(s0)
    32b4:	bfd1                	j	3288 <__call_exitprocs+0x82>
    32b6:	1049a683          	lw	a3,260(s3)
    32ba:	ffca2583          	lw	a1,-4(s4)
    32be:	8f75                	and	a4,a4,a3
    32c0:	e701                	bnez	a4,32c8 <__call_exitprocs+0xc2>
    32c2:	855e                	mv	a0,s7
    32c4:	9782                	jalr	a5
    32c6:	bfe9                	j	32a0 <__call_exitprocs+0x9a>
    32c8:	852e                	mv	a0,a1
    32ca:	9782                	jalr	a5
    32cc:	bfd1                	j	32a0 <__call_exitprocs+0x9a>

000032ce <__sflush_r>:
    32ce:	00c5d783          	lhu	a5,12(a1)
    32d2:	1101                	addi	sp,sp,-32
    32d4:	cc22                	sw	s0,24(sp)
    32d6:	ca26                	sw	s1,20(sp)
    32d8:	ce06                	sw	ra,28(sp)
    32da:	c84a                	sw	s2,16(sp)
    32dc:	c64e                	sw	s3,12(sp)
    32de:	0087f713          	andi	a4,a5,8
    32e2:	84aa                	mv	s1,a0
    32e4:	842e                	mv	s0,a1
    32e6:	e375                	bnez	a4,33ca <testvectors.c.52f02a3b+0x52>
    32e8:	41d8                	lw	a4,4(a1)
    32ea:	00e04763          	bgtz	a4,32f8 <__sflush_r+0x2a>
    32ee:	41b8                	lw	a4,64(a1)
    32f0:	00e04463          	bgtz	a4,32f8 <__sflush_r+0x2a>
    32f4:	4501                	li	a0,0
    32f6:	a875                	j	33b2 <testvectors.c.52f02a3b+0x3a>
    32f8:	5458                	lw	a4,44(s0)
    32fa:	df6d                	beqz	a4,32f4 <__sflush_r+0x26>
    32fc:	6685                	lui	a3,0x1
    32fe:	0004a903          	lw	s2,0(s1)
    3302:	8ff5                	and	a5,a5,a3
    3304:	0004a023          	sw	zero,0(s1)
    3308:	500c                	lw	a1,32(s0)
    330a:	cfa5                	beqz	a5,3382 <testvectors.c.52f02a3b+0xa>
    330c:	4868                	lw	a0,84(s0)
    330e:	00c45783          	lhu	a5,12(s0)
    3312:	8b91                	andi	a5,a5,4
    3314:	c799                	beqz	a5,3322 <__sflush_r+0x54>
    3316:	405c                	lw	a5,4(s0)
    3318:	8d1d                	sub	a0,a0,a5
    331a:	585c                	lw	a5,52(s0)
    331c:	c399                	beqz	a5,3322 <__sflush_r+0x54>
    331e:	403c                	lw	a5,64(s0)
    3320:	8d1d                	sub	a0,a0,a5
    3322:	545c                	lw	a5,44(s0)
    3324:	500c                	lw	a1,32(s0)
    3326:	862a                	mv	a2,a0
    3328:	4681                	li	a3,0
    332a:	8526                	mv	a0,s1
    332c:	9782                	jalr	a5
    332e:	57fd                	li	a5,-1
    3330:	00c45703          	lhu	a4,12(s0)
    3334:	00f51d63          	bne	a0,a5,334e <__sflush_r+0x80>
    3338:	4094                	lw	a3,0(s1)
    333a:	47f5                	li	a5,29
    333c:	08d7e263          	bltu	a5,a3,33c0 <testvectors.c.52f02a3b+0x48>
    3340:	dfc007b7          	lui	a5,0xdfc00
    3344:	17f9                	addi	a5,a5,-2
    3346:	40d7d7b3          	sra	a5,a5,a3
    334a:	8b85                	andi	a5,a5,1
    334c:	ebb5                	bnez	a5,33c0 <testvectors.c.52f02a3b+0x48>
    334e:	481c                	lw	a5,16(s0)
    3350:	00042223          	sw	zero,4(s0)
    3354:	c01c                	sw	a5,0(s0)
    3356:	6785                	lui	a5,0x1
    3358:	8f7d                	and	a4,a4,a5
    335a:	c719                	beqz	a4,3368 <__sflush_r+0x9a>
    335c:	57fd                	li	a5,-1
    335e:	00f51463          	bne	a0,a5,3366 <__sflush_r+0x98>
    3362:	409c                	lw	a5,0(s1)
    3364:	e391                	bnez	a5,3368 <__sflush_r+0x9a>
    3366:	c868                	sw	a0,84(s0)
    3368:	584c                	lw	a1,52(s0)
    336a:	0124a023          	sw	s2,0(s1)
    336e:	d1d9                	beqz	a1,32f4 <__sflush_r+0x26>
    3370:	04440793          	addi	a5,s0,68
    3374:	00f58463          	beq	a1,a5,337c <testvectors.c.52f02a3b+0x4>
    3378:	8526                	mv	a0,s1
    337a:	21f9                	jal	3848 <_free_r>
    337c:	02042a23          	sw	zero,52(s0)
    3380:	bf95                	j	32f4 <__sflush_r+0x26>
    3382:	4685                	li	a3,1
    3384:	4601                	li	a2,0
    3386:	8526                	mv	a0,s1
    3388:	9702                	jalr	a4
    338a:	57fd                	li	a5,-1
    338c:	f8f511e3          	bne	a0,a5,330e <__sflush_r+0x40>
    3390:	409c                	lw	a5,0(s1)
    3392:	dfb5                	beqz	a5,330e <__sflush_r+0x40>
    3394:	4775                	li	a4,29
    3396:	00e78563          	beq	a5,a4,33a0 <testvectors.c.52f02a3b+0x28>
    339a:	4759                	li	a4,22
    339c:	00e79563          	bne	a5,a4,33a6 <testvectors.c.52f02a3b+0x2e>
    33a0:	0124a023          	sw	s2,0(s1)
    33a4:	bf81                	j	32f4 <__sflush_r+0x26>
    33a6:	00c45783          	lhu	a5,12(s0)
    33aa:	0407e793          	ori	a5,a5,64
    33ae:	00f41623          	sh	a5,12(s0)
    33b2:	40f2                	lw	ra,28(sp)
    33b4:	4462                	lw	s0,24(sp)
    33b6:	44d2                	lw	s1,20(sp)
    33b8:	4942                	lw	s2,16(sp)
    33ba:	49b2                	lw	s3,12(sp)
    33bc:	6105                	addi	sp,sp,32
    33be:	8082                	ret
    33c0:	04076713          	ori	a4,a4,64
    33c4:	00e41623          	sh	a4,12(s0)
    33c8:	b7ed                	j	33b2 <testvectors.c.52f02a3b+0x3a>
    33ca:	0105a983          	lw	s3,16(a1)
    33ce:	f20983e3          	beqz	s3,32f4 <__sflush_r+0x26>
    33d2:	0005a903          	lw	s2,0(a1)
    33d6:	8b8d                	andi	a5,a5,3
    33d8:	0135a023          	sw	s3,0(a1)
    33dc:	41390933          	sub	s2,s2,s3
    33e0:	4701                	li	a4,0
    33e2:	e391                	bnez	a5,33e6 <testvectors.c.52f02a3b+0x6e>
    33e4:	49d8                	lw	a4,20(a1)
    33e6:	c418                	sw	a4,8(s0)
    33e8:	f12056e3          	blez	s2,32f4 <__sflush_r+0x26>
    33ec:	541c                	lw	a5,40(s0)
    33ee:	500c                	lw	a1,32(s0)
    33f0:	86ca                	mv	a3,s2
    33f2:	864e                	mv	a2,s3
    33f4:	8526                	mv	a0,s1
    33f6:	9782                	jalr	a5
    33f8:	00a04a63          	bgtz	a0,340c <testvectors.c.52f02a3b+0x94>
    33fc:	00c45783          	lhu	a5,12(s0)
    3400:	557d                	li	a0,-1
    3402:	0407e793          	ori	a5,a5,64
    3406:	00f41623          	sh	a5,12(s0)
    340a:	b765                	j	33b2 <testvectors.c.52f02a3b+0x3a>
    340c:	99aa                	add	s3,s3,a0
    340e:	40a90933          	sub	s2,s2,a0
    3412:	bfd9                	j	33e8 <testvectors.c.52f02a3b+0x70>

00003414 <_fflush_r>:
    3414:	499c                	lw	a5,16(a1)
    3416:	cfb9                	beqz	a5,3474 <_fflush_r+0x60>
    3418:	1101                	addi	sp,sp,-32
    341a:	cc22                	sw	s0,24(sp)
    341c:	ce06                	sw	ra,28(sp)
    341e:	842a                	mv	s0,a0
    3420:	c511                	beqz	a0,342c <_fflush_r+0x18>
    3422:	4d1c                	lw	a5,24(a0)
    3424:	e781                	bnez	a5,342c <_fflush_r+0x18>
    3426:	c62e                	sw	a1,12(sp)
    3428:	2a05                	jal	3558 <__sinit>
    342a:	45b2                	lw	a1,12(sp)
    342c:	000807b7          	lui	a5,0x80
    3430:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    3434:	00f59b63          	bne	a1,a5,344a <_fflush_r+0x36>
    3438:	404c                	lw	a1,4(s0)
    343a:	00c59783          	lh	a5,12(a1)
    343e:	c795                	beqz	a5,346a <_fflush_r+0x56>
    3440:	8522                	mv	a0,s0
    3442:	4462                	lw	s0,24(sp)
    3444:	40f2                	lw	ra,28(sp)
    3446:	6105                	addi	sp,sp,32
    3448:	b559                	j	32ce <__sflush_r>
    344a:	000807b7          	lui	a5,0x80
    344e:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    3452:	00f59463          	bne	a1,a5,345a <_fflush_r+0x46>
    3456:	440c                	lw	a1,8(s0)
    3458:	b7cd                	j	343a <_fflush_r+0x26>
    345a:	000807b7          	lui	a5,0x80
    345e:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    3462:	fcf59ce3          	bne	a1,a5,343a <_fflush_r+0x26>
    3466:	444c                	lw	a1,12(s0)
    3468:	bfc9                	j	343a <_fflush_r+0x26>
    346a:	40f2                	lw	ra,28(sp)
    346c:	4462                	lw	s0,24(sp)
    346e:	4501                	li	a0,0
    3470:	6105                	addi	sp,sp,32
    3472:	8082                	ret
    3474:	4501                	li	a0,0
    3476:	8082                	ret

00003478 <fflush>:
    3478:	85aa                	mv	a1,a0
    347a:	e909                	bnez	a0,348c <fflush+0x14>
    347c:	000807b7          	lui	a5,0x80
    3480:	6947a503          	lw	a0,1684(a5) # 80694 <_global_impure_ptr>
    3484:	658d                	lui	a1,0x3
    3486:	41458593          	addi	a1,a1,1044 # 3414 <_fflush_r>
    348a:	acb9                	j	36e8 <_fwalk_reent>
    348c:	000807b7          	lui	a5,0x80
    3490:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3494:	b741                	j	3414 <_fflush_r>

00003496 <__fp_lock>:
    3496:	4501                	li	a0,0
    3498:	8082                	ret

0000349a <std>:
    349a:	1141                	addi	sp,sp,-16
    349c:	c422                	sw	s0,8(sp)
    349e:	c606                	sw	ra,12(sp)
    34a0:	842a                	mv	s0,a0
    34a2:	00b51623          	sh	a1,12(a0)
    34a6:	00c51723          	sh	a2,14(a0)
    34aa:	00052023          	sw	zero,0(a0)
    34ae:	00052223          	sw	zero,4(a0)
    34b2:	00052423          	sw	zero,8(a0)
    34b6:	06052223          	sw	zero,100(a0)
    34ba:	00052823          	sw	zero,16(a0)
    34be:	00052a23          	sw	zero,20(a0)
    34c2:	00052c23          	sw	zero,24(a0)
    34c6:	4621                	li	a2,8
    34c8:	4581                	li	a1,0
    34ca:	05c50513          	addi	a0,a0,92
    34ce:	8e7ff0ef          	jal	ra,2db4 <memset>
    34d2:	6791                	lui	a5,0x4
    34d4:	9f678793          	addi	a5,a5,-1546 # 39f6 <__sread>
    34d8:	d05c                	sw	a5,36(s0)
    34da:	6791                	lui	a5,0x4
    34dc:	a2a78793          	addi	a5,a5,-1494 # 3a2a <__swrite>
    34e0:	d41c                	sw	a5,40(s0)
    34e2:	6791                	lui	a5,0x4
    34e4:	a7878793          	addi	a5,a5,-1416 # 3a78 <__sseek>
    34e8:	d45c                	sw	a5,44(s0)
    34ea:	6791                	lui	a5,0x4
    34ec:	aae78793          	addi	a5,a5,-1362 # 3aae <__sclose>
    34f0:	40b2                	lw	ra,12(sp)
    34f2:	d000                	sw	s0,32(s0)
    34f4:	d81c                	sw	a5,48(s0)
    34f6:	4422                	lw	s0,8(sp)
    34f8:	0141                	addi	sp,sp,16
    34fa:	8082                	ret

000034fc <_cleanup_r>:
    34fc:	658d                	lui	a1,0x3
    34fe:	41458593          	addi	a1,a1,1044 # 3414 <_fflush_r>
    3502:	a2dd                	j	36e8 <_fwalk_reent>

00003504 <__fp_unlock>:
    3504:	4501                	li	a0,0
    3506:	8082                	ret

00003508 <__sfmoreglue>:
    3508:	1141                	addi	sp,sp,-16
    350a:	c226                	sw	s1,4(sp)
    350c:	06800793          	li	a5,104
    3510:	fff58493          	addi	s1,a1,-1
    3514:	02f484b3          	mul	s1,s1,a5
    3518:	c04a                	sw	s2,0(sp)
    351a:	892e                	mv	s2,a1
    351c:	c422                	sw	s0,8(sp)
    351e:	c606                	sw	ra,12(sp)
    3520:	07448593          	addi	a1,s1,116
    3524:	26d9                	jal	38ea <_malloc_r>
    3526:	842a                	mv	s0,a0
    3528:	cd01                	beqz	a0,3540 <__sfmoreglue+0x38>
    352a:	00052023          	sw	zero,0(a0)
    352e:	01252223          	sw	s2,4(a0)
    3532:	0531                	addi	a0,a0,12
    3534:	c408                	sw	a0,8(s0)
    3536:	06848613          	addi	a2,s1,104
    353a:	4581                	li	a1,0
    353c:	879ff0ef          	jal	ra,2db4 <memset>
    3540:	40b2                	lw	ra,12(sp)
    3542:	8522                	mv	a0,s0
    3544:	4422                	lw	s0,8(sp)
    3546:	4492                	lw	s1,4(sp)
    3548:	4902                	lw	s2,0(sp)
    354a:	0141                	addi	sp,sp,16
    354c:	8082                	ret

0000354e <_cleanup>:
    354e:	000807b7          	lui	a5,0x80
    3552:	6947a503          	lw	a0,1684(a5) # 80694 <_global_impure_ptr>
    3556:	b75d                	j	34fc <_cleanup_r>

00003558 <__sinit>:
    3558:	4d1c                	lw	a5,24(a0)
    355a:	e3b5                	bnez	a5,35be <init.c.97f15b39+0x23>
    355c:	1141                	addi	sp,sp,-16
    355e:	678d                	lui	a5,0x3
    3560:	c422                	sw	s0,8(sp)
    3562:	c606                	sw	ra,12(sp)
    3564:	4fc78793          	addi	a5,a5,1276 # 34fc <_cleanup_r>
    3568:	d51c                	sw	a5,40(a0)
    356a:	000807b7          	lui	a5,0x80
    356e:	6947a783          	lw	a5,1684(a5) # 80694 <_global_impure_ptr>
    3572:	04052423          	sw	zero,72(a0)
    3576:	04052623          	sw	zero,76(a0)
    357a:	04052823          	sw	zero,80(a0)
    357e:	842a                	mv	s0,a0
    3580:	00f51463          	bne	a0,a5,3588 <__sinit+0x30>
    3584:	4785                	li	a5,1
    3586:	cd1c                	sw	a5,24(a0)
    3588:	8522                	mv	a0,s0
    358a:	281d                	jal	35c0 <__sfp>
    358c:	c048                	sw	a0,4(s0)
    358e:	8522                	mv	a0,s0
    3590:	2805                	jal	35c0 <__sfp>
    3592:	c408                	sw	a0,8(s0)
    3594:	8522                	mv	a0,s0
    3596:	202d                	jal	35c0 <__sfp>
    3598:	c448                	sw	a0,12(s0)
    359a:	4048                	lw	a0,4(s0)
    359c:	4601                	li	a2,0
    359e:	4591                	li	a1,4
    35a0:	3ded                	jal	349a <std>
    35a2:	4408                	lw	a0,8(s0)
    35a4:	4605                	li	a2,1
    35a6:	45a5                	li	a1,9
    35a8:	3dcd                	jal	349a <std>
    35aa:	4448                	lw	a0,12(s0)
    35ac:	4609                	li	a2,2
    35ae:	45c9                	li	a1,18
    35b0:	35ed                	jal	349a <std>
    35b2:	4785                	li	a5,1
    35b4:	40b2                	lw	ra,12(sp)
    35b6:	cc1c                	sw	a5,24(s0)
    35b8:	4422                	lw	s0,8(sp)
    35ba:	0141                	addi	sp,sp,16
    35bc:	8082                	ret
    35be:	8082                	ret

000035c0 <__sfp>:
    35c0:	1141                	addi	sp,sp,-16
    35c2:	000807b7          	lui	a5,0x80
    35c6:	c226                	sw	s1,4(sp)
    35c8:	6947a483          	lw	s1,1684(a5) # 80694 <_global_impure_ptr>
    35cc:	c04a                	sw	s2,0(sp)
    35ce:	c606                	sw	ra,12(sp)
    35d0:	4c9c                	lw	a5,24(s1)
    35d2:	c422                	sw	s0,8(sp)
    35d4:	892a                	mv	s2,a0
    35d6:	e399                	bnez	a5,35dc <syscalls.c.c388568e+0xf>
    35d8:	8526                	mv	a0,s1
    35da:	3fbd                	jal	3558 <__sinit>
    35dc:	04848493          	addi	s1,s1,72
    35e0:	4480                	lw	s0,8(s1)
    35e2:	40dc                	lw	a5,4(s1)
    35e4:	17fd                	addi	a5,a5,-1
    35e6:	0007d663          	bgez	a5,35f2 <syscalls.c.c388568e+0x25>
    35ea:	409c                	lw	a5,0(s1)
    35ec:	cfb9                	beqz	a5,364a <syscalls.c.c388568e+0x7d>
    35ee:	4084                	lw	s1,0(s1)
    35f0:	bfc5                	j	35e0 <syscalls.c.c388568e+0x13>
    35f2:	00c41703          	lh	a4,12(s0)
    35f6:	e739                	bnez	a4,3644 <syscalls.c.c388568e+0x77>
    35f8:	77c1                	lui	a5,0xffff0
    35fa:	0785                	addi	a5,a5,1
    35fc:	06042223          	sw	zero,100(s0)
    3600:	00042023          	sw	zero,0(s0)
    3604:	00042223          	sw	zero,4(s0)
    3608:	00042423          	sw	zero,8(s0)
    360c:	c45c                	sw	a5,12(s0)
    360e:	00042823          	sw	zero,16(s0)
    3612:	00042a23          	sw	zero,20(s0)
    3616:	00042c23          	sw	zero,24(s0)
    361a:	4621                	li	a2,8
    361c:	4581                	li	a1,0
    361e:	05c40513          	addi	a0,s0,92
    3622:	f92ff0ef          	jal	ra,2db4 <memset>
    3626:	02042a23          	sw	zero,52(s0)
    362a:	02042c23          	sw	zero,56(s0)
    362e:	04042423          	sw	zero,72(s0)
    3632:	04042623          	sw	zero,76(s0)
    3636:	40b2                	lw	ra,12(sp)
    3638:	8522                	mv	a0,s0
    363a:	4422                	lw	s0,8(sp)
    363c:	4492                	lw	s1,4(sp)
    363e:	4902                	lw	s2,0(sp)
    3640:	0141                	addi	sp,sp,16
    3642:	8082                	ret
    3644:	06840413          	addi	s0,s0,104
    3648:	bf71                	j	35e4 <syscalls.c.c388568e+0x17>
    364a:	4591                	li	a1,4
    364c:	854a                	mv	a0,s2
    364e:	3d6d                	jal	3508 <__sfmoreglue>
    3650:	c088                	sw	a0,0(s1)
    3652:	842a                	mv	s0,a0
    3654:	fd49                	bnez	a0,35ee <syscalls.c.c388568e+0x21>
    3656:	47b1                	li	a5,12
    3658:	00f92023          	sw	a5,0(s2)
    365c:	bfe9                	j	3636 <syscalls.c.c388568e+0x69>

0000365e <__sfp_lock_acquire>:
    365e:	8082                	ret

00003660 <__sfp_lock_release>:
    3660:	8082                	ret

00003662 <__sinit_lock_acquire>:
    3662:	8082                	ret

00003664 <__sinit_lock_release>:
    3664:	8082                	ret

00003666 <__fp_lock_all>:
    3666:	000807b7          	lui	a5,0x80
    366a:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    366e:	658d                	lui	a1,0x3
    3670:	49658593          	addi	a1,a1,1174 # 3496 <__fp_lock>
    3674:	a809                	j	3686 <_fwalk>

00003676 <__fp_unlock_all>:
    3676:	000807b7          	lui	a5,0x80
    367a:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    367e:	658d                	lui	a1,0x3
    3680:	50458593          	addi	a1,a1,1284 # 3504 <__fp_unlock>
    3684:	a009                	j	3686 <_fwalk>

00003686 <_fwalk>:
    3686:	1101                	addi	sp,sp,-32
    3688:	cc22                	sw	s0,24(sp)
    368a:	c84a                	sw	s2,16(sp)
    368c:	c64e                	sw	s3,12(sp)
    368e:	c256                	sw	s5,4(sp)
    3690:	c05a                	sw	s6,0(sp)
    3692:	ce06                	sw	ra,28(sp)
    3694:	ca26                	sw	s1,20(sp)
    3696:	c452                	sw	s4,8(sp)
    3698:	89ae                	mv	s3,a1
    369a:	04850413          	addi	s0,a0,72
    369e:	4901                	li	s2,0
    36a0:	4a85                	li	s5,1
    36a2:	5b7d                	li	s6,-1
    36a4:	4404                	lw	s1,8(s0)
    36a6:	00442a03          	lw	s4,4(s0)
    36aa:	1a7d                	addi	s4,s4,-1
    36ac:	000a5f63          	bgez	s4,36ca <_fwalk+0x44>
    36b0:	4000                	lw	s0,0(s0)
    36b2:	f86d                	bnez	s0,36a4 <_fwalk+0x1e>
    36b4:	40f2                	lw	ra,28(sp)
    36b6:	4462                	lw	s0,24(sp)
    36b8:	44d2                	lw	s1,20(sp)
    36ba:	49b2                	lw	s3,12(sp)
    36bc:	4a22                	lw	s4,8(sp)
    36be:	4a92                	lw	s5,4(sp)
    36c0:	4b02                	lw	s6,0(sp)
    36c2:	854a                	mv	a0,s2
    36c4:	4942                	lw	s2,16(sp)
    36c6:	6105                	addi	sp,sp,32
    36c8:	8082                	ret
    36ca:	00c4d783          	lhu	a5,12(s1)
    36ce:	00fafa63          	bgeu	s5,a5,36e2 <_fwalk+0x5c>
    36d2:	00e49783          	lh	a5,14(s1)
    36d6:	01678663          	beq	a5,s6,36e2 <_fwalk+0x5c>
    36da:	8526                	mv	a0,s1
    36dc:	9982                	jalr	s3
    36de:	00a96933          	or	s2,s2,a0
    36e2:	06848493          	addi	s1,s1,104
    36e6:	b7d1                	j	36aa <_fwalk+0x24>

000036e8 <_fwalk_reent>:
    36e8:	7179                	addi	sp,sp,-48
    36ea:	d422                	sw	s0,40(sp)
    36ec:	d04a                	sw	s2,32(sp)
    36ee:	ce4e                	sw	s3,28(sp)
    36f0:	cc52                	sw	s4,24(sp)
    36f2:	c85a                	sw	s6,16(sp)
    36f4:	c65e                	sw	s7,12(sp)
    36f6:	d606                	sw	ra,44(sp)
    36f8:	d226                	sw	s1,36(sp)
    36fa:	ca56                	sw	s5,20(sp)
    36fc:	892a                	mv	s2,a0
    36fe:	8a2e                	mv	s4,a1
    3700:	04850413          	addi	s0,a0,72
    3704:	4981                	li	s3,0
    3706:	4b05                	li	s6,1
    3708:	5bfd                	li	s7,-1
    370a:	4404                	lw	s1,8(s0)
    370c:	00442a83          	lw	s5,4(s0)
    3710:	1afd                	addi	s5,s5,-1
    3712:	020ad063          	bgez	s5,3732 <_fwalk_reent+0x4a>
    3716:	4000                	lw	s0,0(s0)
    3718:	f86d                	bnez	s0,370a <_fwalk_reent+0x22>
    371a:	50b2                	lw	ra,44(sp)
    371c:	5422                	lw	s0,40(sp)
    371e:	5492                	lw	s1,36(sp)
    3720:	5902                	lw	s2,32(sp)
    3722:	4a62                	lw	s4,24(sp)
    3724:	4ad2                	lw	s5,20(sp)
    3726:	4b42                	lw	s6,16(sp)
    3728:	4bb2                	lw	s7,12(sp)
    372a:	854e                	mv	a0,s3
    372c:	49f2                	lw	s3,28(sp)
    372e:	6145                	addi	sp,sp,48
    3730:	8082                	ret
    3732:	00c4d783          	lhu	a5,12(s1)
    3736:	00fb7b63          	bgeu	s6,a5,374c <_fwalk_reent+0x64>
    373a:	00e49783          	lh	a5,14(s1)
    373e:	01778763          	beq	a5,s7,374c <_fwalk_reent+0x64>
    3742:	85a6                	mv	a1,s1
    3744:	854a                	mv	a0,s2
    3746:	9a02                	jalr	s4
    3748:	00a9e9b3          	or	s3,s3,a0
    374c:	06848493          	addi	s1,s1,104
    3750:	b7c1                	j	3710 <_fwalk_reent+0x28>

00003752 <__swhatbuf_r>:
    3752:	7159                	addi	sp,sp,-112
    3754:	d4a2                	sw	s0,104(sp)
    3756:	842e                	mv	s0,a1
    3758:	00e59583          	lh	a1,14(a1)
    375c:	d2a6                	sw	s1,100(sp)
    375e:	d0ca                	sw	s2,96(sp)
    3760:	d686                	sw	ra,108(sp)
    3762:	84b2                	mv	s1,a2
    3764:	8936                	mv	s2,a3
    3766:	0205d463          	bgez	a1,378e <__swhatbuf_r+0x3c>
    376a:	00c45783          	lhu	a5,12(s0)
    376e:	0807f793          	andi	a5,a5,128
    3772:	cf85                	beqz	a5,37aa <__swhatbuf_r+0x58>
    3774:	4781                	li	a5,0
    3776:	04000713          	li	a4,64
    377a:	50b6                	lw	ra,108(sp)
    377c:	5426                	lw	s0,104(sp)
    377e:	00f92023          	sw	a5,0(s2)
    3782:	c098                	sw	a4,0(s1)
    3784:	5906                	lw	s2,96(sp)
    3786:	5496                	lw	s1,100(sp)
    3788:	4501                	li	a0,0
    378a:	6165                	addi	sp,sp,112
    378c:	8082                	ret
    378e:	0030                	addi	a2,sp,8
    3790:	2661                	jal	3b18 <_fstat_r>
    3792:	fc054ce3          	bltz	a0,376a <__swhatbuf_r+0x18>
    3796:	4732                	lw	a4,12(sp)
    3798:	67bd                	lui	a5,0xf
    379a:	8ff9                	and	a5,a5,a4
    379c:	7779                	lui	a4,0xffffe
    379e:	97ba                	add	a5,a5,a4
    37a0:	0017b793          	seqz	a5,a5
    37a4:	40000713          	li	a4,1024
    37a8:	bfc9                	j	377a <__swhatbuf_r+0x28>
    37aa:	4781                	li	a5,0
    37ac:	bfe5                	j	37a4 <__swhatbuf_r+0x52>

000037ae <__smakebuf_r>:
    37ae:	00c5d783          	lhu	a5,12(a1)
    37b2:	1101                	addi	sp,sp,-32
    37b4:	cc22                	sw	s0,24(sp)
    37b6:	ce06                	sw	ra,28(sp)
    37b8:	ca26                	sw	s1,20(sp)
    37ba:	c84a                	sw	s2,16(sp)
    37bc:	8b89                	andi	a5,a5,2
    37be:	842e                	mv	s0,a1
    37c0:	cf89                	beqz	a5,37da <__smakebuf_r+0x2c>
    37c2:	04740793          	addi	a5,s0,71
    37c6:	c01c                	sw	a5,0(s0)
    37c8:	c81c                	sw	a5,16(s0)
    37ca:	4785                	li	a5,1
    37cc:	c85c                	sw	a5,20(s0)
    37ce:	40f2                	lw	ra,28(sp)
    37d0:	4462                	lw	s0,24(sp)
    37d2:	44d2                	lw	s1,20(sp)
    37d4:	4942                	lw	s2,16(sp)
    37d6:	6105                	addi	sp,sp,32
    37d8:	8082                	ret
    37da:	0074                	addi	a3,sp,12
    37dc:	0030                	addi	a2,sp,8
    37de:	84aa                	mv	s1,a0
    37e0:	3f8d                	jal	3752 <__swhatbuf_r>
    37e2:	45a2                	lw	a1,8(sp)
    37e4:	892a                	mv	s2,a0
    37e6:	8526                	mv	a0,s1
    37e8:	2209                	jal	38ea <_malloc_r>
    37ea:	ed01                	bnez	a0,3802 <__smakebuf_r+0x54>
    37ec:	00c41783          	lh	a5,12(s0)
    37f0:	2007f713          	andi	a4,a5,512
    37f4:	ff69                	bnez	a4,37ce <__smakebuf_r+0x20>
    37f6:	9bf1                	andi	a5,a5,-4
    37f8:	0027e793          	ori	a5,a5,2
    37fc:	00f41623          	sh	a5,12(s0)
    3800:	b7c9                	j	37c2 <__smakebuf_r+0x14>
    3802:	678d                	lui	a5,0x3
    3804:	4fc78793          	addi	a5,a5,1276 # 34fc <_cleanup_r>
    3808:	d49c                	sw	a5,40(s1)
    380a:	00c45783          	lhu	a5,12(s0)
    380e:	c008                	sw	a0,0(s0)
    3810:	c808                	sw	a0,16(s0)
    3812:	0807e793          	ori	a5,a5,128
    3816:	00f41623          	sh	a5,12(s0)
    381a:	47a2                	lw	a5,8(sp)
    381c:	c85c                	sw	a5,20(s0)
    381e:	47b2                	lw	a5,12(sp)
    3820:	cf89                	beqz	a5,383a <__smakebuf_r+0x8c>
    3822:	00e41583          	lh	a1,14(s0)
    3826:	8526                	mv	a0,s1
    3828:	260d                	jal	3b4a <_isatty_r>
    382a:	c901                	beqz	a0,383a <__smakebuf_r+0x8c>
    382c:	00c45783          	lhu	a5,12(s0)
    3830:	9bf1                	andi	a5,a5,-4
    3832:	0017e793          	ori	a5,a5,1
    3836:	00f41623          	sh	a5,12(s0)
    383a:	00c45783          	lhu	a5,12(s0)
    383e:	0127e533          	or	a0,a5,s2
    3842:	00a41623          	sh	a0,12(s0)
    3846:	b761                	j	37ce <__smakebuf_r+0x20>

00003848 <_free_r>:
    3848:	c1c5                	beqz	a1,38e8 <_free_r+0xa0>
    384a:	ffc5a783          	lw	a5,-4(a1)
    384e:	1101                	addi	sp,sp,-32
    3850:	cc22                	sw	s0,24(sp)
    3852:	ce06                	sw	ra,28(sp)
    3854:	ffc58413          	addi	s0,a1,-4
    3858:	0007d363          	bgez	a5,385e <_free_r+0x16>
    385c:	943e                	add	s0,s0,a5
    385e:	c62a                	sw	a0,12(sp)
    3860:	26b9                	jal	3bae <__malloc_lock>
    3862:	00080737          	lui	a4,0x80
    3866:	6b472783          	lw	a5,1716(a4) # 806b4 <__malloc_free_list>
    386a:	4532                	lw	a0,12(sp)
    386c:	eb89                	bnez	a5,387e <_free_r+0x36>
    386e:	00042223          	sw	zero,4(s0)
    3872:	6a872a23          	sw	s0,1716(a4)
    3876:	4462                	lw	s0,24(sp)
    3878:	40f2                	lw	ra,28(sp)
    387a:	6105                	addi	sp,sp,32
    387c:	ae15                	j	3bb0 <__malloc_unlock>
    387e:	00f47d63          	bgeu	s0,a5,3898 <_free_r+0x50>
    3882:	4010                	lw	a2,0(s0)
    3884:	00c406b3          	add	a3,s0,a2
    3888:	00d79663          	bne	a5,a3,3894 <_free_r+0x4c>
    388c:	4394                	lw	a3,0(a5)
    388e:	43dc                	lw	a5,4(a5)
    3890:	96b2                	add	a3,a3,a2
    3892:	c014                	sw	a3,0(s0)
    3894:	c05c                	sw	a5,4(s0)
    3896:	bff1                	j	3872 <_free_r+0x2a>
    3898:	873e                	mv	a4,a5
    389a:	43dc                	lw	a5,4(a5)
    389c:	c399                	beqz	a5,38a2 <_free_r+0x5a>
    389e:	fef47de3          	bgeu	s0,a5,3898 <_free_r+0x50>
    38a2:	4314                	lw	a3,0(a4)
    38a4:	00d70633          	add	a2,a4,a3
    38a8:	00861f63          	bne	a2,s0,38c6 <_free_r+0x7e>
    38ac:	4010                	lw	a2,0(s0)
    38ae:	96b2                	add	a3,a3,a2
    38b0:	c314                	sw	a3,0(a4)
    38b2:	00d70633          	add	a2,a4,a3
    38b6:	fcc790e3          	bne	a5,a2,3876 <_free_r+0x2e>
    38ba:	4390                	lw	a2,0(a5)
    38bc:	43dc                	lw	a5,4(a5)
    38be:	96b2                	add	a3,a3,a2
    38c0:	c314                	sw	a3,0(a4)
    38c2:	c35c                	sw	a5,4(a4)
    38c4:	bf4d                	j	3876 <_free_r+0x2e>
    38c6:	00c47563          	bgeu	s0,a2,38d0 <_free_r+0x88>
    38ca:	47b1                	li	a5,12
    38cc:	c11c                	sw	a5,0(a0)
    38ce:	b765                	j	3876 <_free_r+0x2e>
    38d0:	4010                	lw	a2,0(s0)
    38d2:	00c406b3          	add	a3,s0,a2
    38d6:	00d79663          	bne	a5,a3,38e2 <_free_r+0x9a>
    38da:	4394                	lw	a3,0(a5)
    38dc:	43dc                	lw	a5,4(a5)
    38de:	96b2                	add	a3,a3,a2
    38e0:	c014                	sw	a3,0(s0)
    38e2:	c05c                	sw	a5,4(s0)
    38e4:	c340                	sw	s0,4(a4)
    38e6:	bf41                	j	3876 <_free_r+0x2e>
    38e8:	8082                	ret

000038ea <_malloc_r>:
    38ea:	1101                	addi	sp,sp,-32
    38ec:	ca26                	sw	s1,20(sp)
    38ee:	00358493          	addi	s1,a1,3
    38f2:	98f1                	andi	s1,s1,-4
    38f4:	c84a                	sw	s2,16(sp)
    38f6:	ce06                	sw	ra,28(sp)
    38f8:	cc22                	sw	s0,24(sp)
    38fa:	c64e                	sw	s3,12(sp)
    38fc:	04a1                	addi	s1,s1,8
    38fe:	47b1                	li	a5,12
    3900:	892a                	mv	s2,a0
    3902:	04f4f663          	bgeu	s1,a5,394e <_malloc_r+0x64>
    3906:	44b1                	li	s1,12
    3908:	04b4e563          	bltu	s1,a1,3952 <_malloc_r+0x68>
    390c:	854a                	mv	a0,s2
    390e:	2445                	jal	3bae <__malloc_lock>
    3910:	000807b7          	lui	a5,0x80
    3914:	6b478713          	addi	a4,a5,1716 # 806b4 <__malloc_free_list>
    3918:	4318                	lw	a4,0(a4)
    391a:	6b478693          	addi	a3,a5,1716
    391e:	843a                	mv	s0,a4
    3920:	e421                	bnez	s0,3968 <_malloc_r+0x7e>
    3922:	00080437          	lui	s0,0x80
    3926:	6b840413          	addi	s0,s0,1720 # 806b8 <__malloc_sbrk_start>
    392a:	401c                	lw	a5,0(s0)
    392c:	e789                	bnez	a5,3936 <_malloc_r+0x4c>
    392e:	4581                	li	a1,0
    3930:	854a                	mv	a0,s2
    3932:	2851                	jal	39c6 <_sbrk_r>
    3934:	c008                	sw	a0,0(s0)
    3936:	85a6                	mv	a1,s1
    3938:	854a                	mv	a0,s2
    393a:	2071                	jal	39c6 <_sbrk_r>
    393c:	59fd                	li	s3,-1
    393e:	07351863          	bne	a0,s3,39ae <_malloc_r+0xc4>
    3942:	47b1                	li	a5,12
    3944:	00f92023          	sw	a5,0(s2)
    3948:	854a                	mv	a0,s2
    394a:	249d                	jal	3bb0 <__malloc_unlock>
    394c:	a031                	j	3958 <_malloc_r+0x6e>
    394e:	fa04dde3          	bgez	s1,3908 <_malloc_r+0x1e>
    3952:	47b1                	li	a5,12
    3954:	00f92023          	sw	a5,0(s2)
    3958:	4501                	li	a0,0
    395a:	40f2                	lw	ra,28(sp)
    395c:	4462                	lw	s0,24(sp)
    395e:	44d2                	lw	s1,20(sp)
    3960:	4942                	lw	s2,16(sp)
    3962:	49b2                	lw	s3,12(sp)
    3964:	6105                	addi	sp,sp,32
    3966:	8082                	ret
    3968:	401c                	lw	a5,0(s0)
    396a:	8f85                	sub	a5,a5,s1
    396c:	0207ce63          	bltz	a5,39a8 <_malloc_r+0xbe>
    3970:	462d                	li	a2,11
    3972:	00f67663          	bgeu	a2,a5,397e <_malloc_r+0x94>
    3976:	c01c                	sw	a5,0(s0)
    3978:	943e                	add	s0,s0,a5
    397a:	c004                	sw	s1,0(s0)
    397c:	a029                	j	3986 <_malloc_r+0x9c>
    397e:	405c                	lw	a5,4(s0)
    3980:	02871263          	bne	a4,s0,39a4 <_malloc_r+0xba>
    3984:	c29c                	sw	a5,0(a3)
    3986:	854a                	mv	a0,s2
    3988:	2425                	jal	3bb0 <__malloc_unlock>
    398a:	00b40513          	addi	a0,s0,11
    398e:	00440793          	addi	a5,s0,4
    3992:	9961                	andi	a0,a0,-8
    3994:	40f50733          	sub	a4,a0,a5
    3998:	fcf501e3          	beq	a0,a5,395a <_malloc_r+0x70>
    399c:	943a                	add	s0,s0,a4
    399e:	8f89                	sub	a5,a5,a0
    39a0:	c01c                	sw	a5,0(s0)
    39a2:	bf65                	j	395a <_malloc_r+0x70>
    39a4:	c35c                	sw	a5,4(a4)
    39a6:	b7c5                	j	3986 <_malloc_r+0x9c>
    39a8:	8722                	mv	a4,s0
    39aa:	4040                	lw	s0,4(s0)
    39ac:	bf95                	j	3920 <_malloc_r+0x36>
    39ae:	00350413          	addi	s0,a0,3
    39b2:	9871                	andi	s0,s0,-4
    39b4:	fc8503e3          	beq	a0,s0,397a <_malloc_r+0x90>
    39b8:	40a405b3          	sub	a1,s0,a0
    39bc:	854a                	mv	a0,s2
    39be:	2021                	jal	39c6 <_sbrk_r>
    39c0:	fb351de3          	bne	a0,s3,397a <_malloc_r+0x90>
    39c4:	bfbd                	j	3942 <_malloc_r+0x58>

000039c6 <_sbrk_r>:
    39c6:	1141                	addi	sp,sp,-16
    39c8:	c422                	sw	s0,8(sp)
    39ca:	c226                	sw	s1,4(sp)
    39cc:	842a                	mv	s0,a0
    39ce:	000804b7          	lui	s1,0x80
    39d2:	852e                	mv	a0,a1
    39d4:	c606                	sw	ra,12(sp)
    39d6:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    39da:	bddfe0ef          	jal	ra,25b6 <_sbrk>
    39de:	57fd                	li	a5,-1
    39e0:	00f51663          	bne	a0,a5,39ec <_sbrk_r+0x26>
    39e4:	6ac4a783          	lw	a5,1708(s1)
    39e8:	c391                	beqz	a5,39ec <_sbrk_r+0x26>
    39ea:	c01c                	sw	a5,0(s0)
    39ec:	40b2                	lw	ra,12(sp)
    39ee:	4422                	lw	s0,8(sp)
    39f0:	4492                	lw	s1,4(sp)
    39f2:	0141                	addi	sp,sp,16
    39f4:	8082                	ret

000039f6 <__sread>:
    39f6:	1141                	addi	sp,sp,-16
    39f8:	c422                	sw	s0,8(sp)
    39fa:	842e                	mv	s0,a1
    39fc:	00e59583          	lh	a1,14(a1)
    3a00:	c606                	sw	ra,12(sp)
    3a02:	2a45                	jal	3bb2 <_read_r>
    3a04:	00054963          	bltz	a0,3a16 <__sread+0x20>
    3a08:	487c                	lw	a5,84(s0)
    3a0a:	97aa                	add	a5,a5,a0
    3a0c:	c87c                	sw	a5,84(s0)
    3a0e:	40b2                	lw	ra,12(sp)
    3a10:	4422                	lw	s0,8(sp)
    3a12:	0141                	addi	sp,sp,16
    3a14:	8082                	ret
    3a16:	00c45783          	lhu	a5,12(s0)
    3a1a:	777d                	lui	a4,0xfffff
    3a1c:	177d                	addi	a4,a4,-1
    3a1e:	8ff9                	and	a5,a5,a4
    3a20:	00f41623          	sh	a5,12(s0)
    3a24:	b7ed                	j	3a0e <__sread+0x18>

00003a26 <__seofread>:
    3a26:	4501                	li	a0,0
    3a28:	8082                	ret

00003a2a <__swrite>:
    3a2a:	00c5d783          	lhu	a5,12(a1)
    3a2e:	1101                	addi	sp,sp,-32
    3a30:	cc22                	sw	s0,24(sp)
    3a32:	ca26                	sw	s1,20(sp)
    3a34:	c84a                	sw	s2,16(sp)
    3a36:	c64e                	sw	s3,12(sp)
    3a38:	ce06                	sw	ra,28(sp)
    3a3a:	1007f793          	andi	a5,a5,256
    3a3e:	84aa                	mv	s1,a0
    3a40:	842e                	mv	s0,a1
    3a42:	8932                	mv	s2,a2
    3a44:	89b6                	mv	s3,a3
    3a46:	c791                	beqz	a5,3a52 <__swrite+0x28>
    3a48:	00e59583          	lh	a1,14(a1)
    3a4c:	4689                	li	a3,2
    3a4e:	4601                	li	a2,0
    3a50:	222d                	jal	3b7a <_lseek_r>
    3a52:	00c45783          	lhu	a5,12(s0)
    3a56:	777d                	lui	a4,0xfffff
    3a58:	177d                	addi	a4,a4,-1
    3a5a:	8ff9                	and	a5,a5,a4
    3a5c:	00e41583          	lh	a1,14(s0)
    3a60:	00f41623          	sh	a5,12(s0)
    3a64:	4462                	lw	s0,24(sp)
    3a66:	40f2                	lw	ra,28(sp)
    3a68:	86ce                	mv	a3,s3
    3a6a:	864a                	mv	a2,s2
    3a6c:	49b2                	lw	s3,12(sp)
    3a6e:	4942                	lw	s2,16(sp)
    3a70:	8526                	mv	a0,s1
    3a72:	44d2                	lw	s1,20(sp)
    3a74:	6105                	addi	sp,sp,32
    3a76:	a83d                	j	3ab4 <_write_r>

00003a78 <__sseek>:
    3a78:	1141                	addi	sp,sp,-16
    3a7a:	c422                	sw	s0,8(sp)
    3a7c:	842e                	mv	s0,a1
    3a7e:	00e59583          	lh	a1,14(a1)
    3a82:	c606                	sw	ra,12(sp)
    3a84:	28dd                	jal	3b7a <_lseek_r>
    3a86:	577d                	li	a4,-1
    3a88:	00c45783          	lhu	a5,12(s0)
    3a8c:	00e51b63          	bne	a0,a4,3aa2 <__sseek+0x2a>
    3a90:	777d                	lui	a4,0xfffff
    3a92:	177d                	addi	a4,a4,-1
    3a94:	8ff9                	and	a5,a5,a4
    3a96:	00f41623          	sh	a5,12(s0)
    3a9a:	40b2                	lw	ra,12(sp)
    3a9c:	4422                	lw	s0,8(sp)
    3a9e:	0141                	addi	sp,sp,16
    3aa0:	8082                	ret
    3aa2:	6705                	lui	a4,0x1
    3aa4:	8fd9                	or	a5,a5,a4
    3aa6:	00f41623          	sh	a5,12(s0)
    3aaa:	c868                	sw	a0,84(s0)
    3aac:	b7fd                	j	3a9a <__sseek+0x22>

00003aae <__sclose>:
    3aae:	00e59583          	lh	a1,14(a1)
    3ab2:	a81d                	j	3ae8 <_close_r>

00003ab4 <_write_r>:
    3ab4:	1141                	addi	sp,sp,-16
    3ab6:	c422                	sw	s0,8(sp)
    3ab8:	c226                	sw	s1,4(sp)
    3aba:	842a                	mv	s0,a0
    3abc:	000804b7          	lui	s1,0x80
    3ac0:	852e                	mv	a0,a1
    3ac2:	85b2                	mv	a1,a2
    3ac4:	8636                	mv	a2,a3
    3ac6:	c606                	sw	ra,12(sp)
    3ac8:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3acc:	a3ffe0ef          	jal	ra,250a <_write>
    3ad0:	57fd                	li	a5,-1
    3ad2:	00f51663          	bne	a0,a5,3ade <_write_r+0x2a>
    3ad6:	6ac4a783          	lw	a5,1708(s1)
    3ada:	c391                	beqz	a5,3ade <_write_r+0x2a>
    3adc:	c01c                	sw	a5,0(s0)
    3ade:	40b2                	lw	ra,12(sp)
    3ae0:	4422                	lw	s0,8(sp)
    3ae2:	4492                	lw	s1,4(sp)
    3ae4:	0141                	addi	sp,sp,16
    3ae6:	8082                	ret

00003ae8 <_close_r>:
    3ae8:	1141                	addi	sp,sp,-16
    3aea:	c422                	sw	s0,8(sp)
    3aec:	c226                	sw	s1,4(sp)
    3aee:	842a                	mv	s0,a0
    3af0:	000804b7          	lui	s1,0x80
    3af4:	852e                	mv	a0,a1
    3af6:	c606                	sw	ra,12(sp)
    3af8:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3afc:	9e3fe0ef          	jal	ra,24de <_close>
    3b00:	57fd                	li	a5,-1
    3b02:	00f51663          	bne	a0,a5,3b0e <_close_r+0x26>
    3b06:	6ac4a783          	lw	a5,1708(s1)
    3b0a:	c391                	beqz	a5,3b0e <_close_r+0x26>
    3b0c:	c01c                	sw	a5,0(s0)
    3b0e:	40b2                	lw	ra,12(sp)
    3b10:	4422                	lw	s0,8(sp)
    3b12:	4492                	lw	s1,4(sp)
    3b14:	0141                	addi	sp,sp,16
    3b16:	8082                	ret

00003b18 <_fstat_r>:
    3b18:	1141                	addi	sp,sp,-16
    3b1a:	c422                	sw	s0,8(sp)
    3b1c:	c226                	sw	s1,4(sp)
    3b1e:	842a                	mv	s0,a0
    3b20:	000804b7          	lui	s1,0x80
    3b24:	852e                	mv	a0,a1
    3b26:	85b2                	mv	a1,a2
    3b28:	c606                	sw	ra,12(sp)
    3b2a:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3b2e:	9c5fe0ef          	jal	ra,24f2 <_fstat>
    3b32:	57fd                	li	a5,-1
    3b34:	00f51663          	bne	a0,a5,3b40 <_fstat_r+0x28>
    3b38:	6ac4a783          	lw	a5,1708(s1)
    3b3c:	c391                	beqz	a5,3b40 <_fstat_r+0x28>
    3b3e:	c01c                	sw	a5,0(s0)
    3b40:	40b2                	lw	ra,12(sp)
    3b42:	4422                	lw	s0,8(sp)
    3b44:	4492                	lw	s1,4(sp)
    3b46:	0141                	addi	sp,sp,16
    3b48:	8082                	ret

00003b4a <_isatty_r>:
    3b4a:	1141                	addi	sp,sp,-16
    3b4c:	c422                	sw	s0,8(sp)
    3b4e:	c226                	sw	s1,4(sp)
    3b50:	842a                	mv	s0,a0
    3b52:	000804b7          	lui	s1,0x80
    3b56:	852e                	mv	a0,a1
    3b58:	c606                	sw	ra,12(sp)
    3b5a:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3b5e:	99dfe0ef          	jal	ra,24fa <_isatty>
    3b62:	57fd                	li	a5,-1
    3b64:	00f51663          	bne	a0,a5,3b70 <_isatty_r+0x26>
    3b68:	6ac4a783          	lw	a5,1708(s1)
    3b6c:	c391                	beqz	a5,3b70 <_isatty_r+0x26>
    3b6e:	c01c                	sw	a5,0(s0)
    3b70:	40b2                	lw	ra,12(sp)
    3b72:	4422                	lw	s0,8(sp)
    3b74:	4492                	lw	s1,4(sp)
    3b76:	0141                	addi	sp,sp,16
    3b78:	8082                	ret

00003b7a <_lseek_r>:
    3b7a:	1141                	addi	sp,sp,-16
    3b7c:	c422                	sw	s0,8(sp)
    3b7e:	c226                	sw	s1,4(sp)
    3b80:	842a                	mv	s0,a0
    3b82:	000804b7          	lui	s1,0x80
    3b86:	852e                	mv	a0,a1
    3b88:	85b2                	mv	a1,a2
    3b8a:	8636                	mv	a2,a3
    3b8c:	c606                	sw	ra,12(sp)
    3b8e:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3b92:	971fe0ef          	jal	ra,2502 <_lseek>
    3b96:	57fd                	li	a5,-1
    3b98:	00f51663          	bne	a0,a5,3ba4 <_lseek_r+0x2a>
    3b9c:	6ac4a783          	lw	a5,1708(s1)
    3ba0:	c391                	beqz	a5,3ba4 <_lseek_r+0x2a>
    3ba2:	c01c                	sw	a5,0(s0)
    3ba4:	40b2                	lw	ra,12(sp)
    3ba6:	4422                	lw	s0,8(sp)
    3ba8:	4492                	lw	s1,4(sp)
    3baa:	0141                	addi	sp,sp,16
    3bac:	8082                	ret

00003bae <__malloc_lock>:
    3bae:	8082                	ret

00003bb0 <__malloc_unlock>:
    3bb0:	8082                	ret

00003bb2 <_read_r>:
    3bb2:	1141                	addi	sp,sp,-16
    3bb4:	c422                	sw	s0,8(sp)
    3bb6:	c226                	sw	s1,4(sp)
    3bb8:	842a                	mv	s0,a0
    3bba:	000804b7          	lui	s1,0x80
    3bbe:	852e                	mv	a0,a1
    3bc0:	85b2                	mv	a1,a2
    3bc2:	8636                	mv	a2,a3
    3bc4:	c606                	sw	ra,12(sp)
    3bc6:	6a04a623          	sw	zero,1708(s1) # 806ac <errno>
    3bca:	93dfe0ef          	jal	ra,2506 <_read>
    3bce:	57fd                	li	a5,-1
    3bd0:	00f51663          	bne	a0,a5,3bdc <_read_r+0x2a>
    3bd4:	6ac4a783          	lw	a5,1708(s1)
    3bd8:	c391                	beqz	a5,3bdc <_read_r+0x2a>
    3bda:	c01c                	sw	a5,0(s0)
    3bdc:	40b2                	lw	ra,12(sp)
    3bde:	4422                	lw	s0,8(sp)
    3be0:	4492                	lw	s1,4(sp)
    3be2:	0141                	addi	sp,sp,16
    3be4:	8082                	ret

00003be6 <malloc>:
    3be6:	000807b7          	lui	a5,0x80
    3bea:	85aa                	mv	a1,a0
    3bec:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3bf0:	b9ed                	j	38ea <_malloc_r>

00003bf2 <free>:
    3bf2:	000807b7          	lui	a5,0x80
    3bf6:	85aa                	mv	a1,a0
    3bf8:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3bfc:	b1b1                	j	3848 <_free_r>

00003bfe <memcpy>:
    3bfe:	832a                	mv	t1,a0
    3c00:	ca09                	beqz	a2,3c12 <memcpy+0x14>
    3c02:	00058383          	lb	t2,0(a1)
    3c06:	00730023          	sb	t2,0(t1)
    3c0a:	167d                	addi	a2,a2,-1
    3c0c:	0305                	addi	t1,t1,1
    3c0e:	0585                	addi	a1,a1,1
    3c10:	fa6d                	bnez	a2,3c02 <memcpy+0x4>
    3c12:	8082                	ret

00003c14 <_iprintf_r>:
    3c14:	7139                	addi	sp,sp,-64
    3c16:	cc22                	sw	s0,24(sp)
    3c18:	ca26                	sw	s1,20(sp)
    3c1a:	ce06                	sw	ra,28(sp)
    3c1c:	d432                	sw	a2,40(sp)
    3c1e:	d636                	sw	a3,44(sp)
    3c20:	d83a                	sw	a4,48(sp)
    3c22:	da3e                	sw	a5,52(sp)
    3c24:	dc42                	sw	a6,56(sp)
    3c26:	de46                	sw	a7,60(sp)
    3c28:	842a                	mv	s0,a0
    3c2a:	84ae                	mv	s1,a1
    3c2c:	c509                	beqz	a0,3c36 <_iprintf_r+0x22>
    3c2e:	4d1c                	lw	a5,24(a0)
    3c30:	e399                	bnez	a5,3c36 <_iprintf_r+0x22>
    3c32:	927ff0ef          	jal	ra,3558 <__sinit>
    3c36:	440c                	lw	a1,8(s0)
    3c38:	1034                	addi	a3,sp,40
    3c3a:	8626                	mv	a2,s1
    3c3c:	8522                	mv	a0,s0
    3c3e:	c636                	sw	a3,12(sp)
    3c40:	2a6d                	jal	3dfa <_vfiprintf_r>
    3c42:	40f2                	lw	ra,28(sp)
    3c44:	4462                	lw	s0,24(sp)
    3c46:	44d2                	lw	s1,20(sp)
    3c48:	6121                	addi	sp,sp,64
    3c4a:	8082                	ret

00003c4c <iprintf>:
    3c4c:	715d                	addi	sp,sp,-80
    3c4e:	c2be                	sw	a5,68(sp)
    3c50:	000807b7          	lui	a5,0x80
    3c54:	d422                	sw	s0,40(sp)
    3c56:	842a                	mv	s0,a0
    3c58:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3c5c:	d606                	sw	ra,44(sp)
    3c5e:	da2e                	sw	a1,52(sp)
    3c60:	dc32                	sw	a2,56(sp)
    3c62:	de36                	sw	a3,60(sp)
    3c64:	c0ba                	sw	a4,64(sp)
    3c66:	c4c2                	sw	a6,72(sp)
    3c68:	c6c6                	sw	a7,76(sp)
    3c6a:	c519                	beqz	a0,3c78 <iprintf+0x2c>
    3c6c:	4d1c                	lw	a5,24(a0)
    3c6e:	e789                	bnez	a5,3c78 <iprintf+0x2c>
    3c70:	c62a                	sw	a0,12(sp)
    3c72:	8e7ff0ef          	jal	ra,3558 <__sinit>
    3c76:	4532                	lw	a0,12(sp)
    3c78:	450c                	lw	a1,8(a0)
    3c7a:	1854                	addi	a3,sp,52
    3c7c:	8622                	mv	a2,s0
    3c7e:	ce36                	sw	a3,28(sp)
    3c80:	2aad                	jal	3dfa <_vfiprintf_r>
    3c82:	50b2                	lw	ra,44(sp)
    3c84:	5422                	lw	s0,40(sp)
    3c86:	6161                	addi	sp,sp,80
    3c88:	8082                	ret

00003c8a <_putchar_r>:
    3c8a:	1101                	addi	sp,sp,-32
    3c8c:	cc22                	sw	s0,24(sp)
    3c8e:	ce06                	sw	ra,28(sp)
    3c90:	842a                	mv	s0,a0
    3c92:	c519                	beqz	a0,3ca0 <_putchar_r+0x16>
    3c94:	4d1c                	lw	a5,24(a0)
    3c96:	e789                	bnez	a5,3ca0 <_putchar_r+0x16>
    3c98:	c62e                	sw	a1,12(sp)
    3c9a:	8bfff0ef          	jal	ra,3558 <__sinit>
    3c9e:	45b2                	lw	a1,12(sp)
    3ca0:	4410                	lw	a2,8(s0)
    3ca2:	8522                	mv	a0,s0
    3ca4:	4462                	lw	s0,24(sp)
    3ca6:	40f2                	lw	ra,28(sp)
    3ca8:	6105                	addi	sp,sp,32
    3caa:	a03d                	j	3cd8 <_putc_r>

00003cac <putchar>:
    3cac:	000807b7          	lui	a5,0x80
    3cb0:	85aa                	mv	a1,a0
    3cb2:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3cb6:	cd19                	beqz	a0,3cd4 <putchar+0x28>
    3cb8:	4d1c                	lw	a5,24(a0)
    3cba:	ef89                	bnez	a5,3cd4 <putchar+0x28>
    3cbc:	1101                	addi	sp,sp,-32
    3cbe:	ce06                	sw	ra,28(sp)
    3cc0:	c62e                	sw	a1,12(sp)
    3cc2:	c42a                	sw	a0,8(sp)
    3cc4:	895ff0ef          	jal	ra,3558 <__sinit>
    3cc8:	4522                	lw	a0,8(sp)
    3cca:	45b2                	lw	a1,12(sp)
    3ccc:	40f2                	lw	ra,28(sp)
    3cce:	4510                	lw	a2,8(a0)
    3cd0:	6105                	addi	sp,sp,32
    3cd2:	a019                	j	3cd8 <_putc_r>
    3cd4:	4510                	lw	a2,8(a0)
    3cd6:	bff5                	j	3cd2 <putchar+0x26>

00003cd8 <_putc_r>:
    3cd8:	1101                	addi	sp,sp,-32
    3cda:	cc22                	sw	s0,24(sp)
    3cdc:	ce06                	sw	ra,28(sp)
    3cde:	842a                	mv	s0,a0
    3ce0:	c909                	beqz	a0,3cf2 <_putc_r+0x1a>
    3ce2:	4d1c                	lw	a5,24(a0)
    3ce4:	e799                	bnez	a5,3cf2 <_putc_r+0x1a>
    3ce6:	c632                	sw	a2,12(sp)
    3ce8:	c42e                	sw	a1,8(sp)
    3cea:	86fff0ef          	jal	ra,3558 <__sinit>
    3cee:	4632                	lw	a2,12(sp)
    3cf0:	45a2                	lw	a1,8(sp)
    3cf2:	000807b7          	lui	a5,0x80
    3cf6:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    3cfa:	02f61663          	bne	a2,a5,3d26 <_putc_r+0x4e>
    3cfe:	4050                	lw	a2,4(s0)
    3d00:	461c                	lw	a5,8(a2)
    3d02:	17fd                	addi	a5,a5,-1
    3d04:	c61c                	sw	a5,8(a2)
    3d06:	0407d063          	bgez	a5,3d46 <_putc_r+0x6e>
    3d0a:	4e18                	lw	a4,24(a2)
    3d0c:	00e7c763          	blt	a5,a4,3d1a <_putc_r+0x42>
    3d10:	0ff5f793          	zext.b	a5,a1
    3d14:	4729                	li	a4,10
    3d16:	02e79863          	bne	a5,a4,3d46 <_putc_r+0x6e>
    3d1a:	8522                	mv	a0,s0
    3d1c:	4462                	lw	s0,24(sp)
    3d1e:	40f2                	lw	ra,28(sp)
    3d20:	6105                	addi	sp,sp,32
    3d22:	a86ff06f          	j	2fa8 <__swbuf_r>
    3d26:	000807b7          	lui	a5,0x80
    3d2a:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    3d2e:	00f61463          	bne	a2,a5,3d36 <_putc_r+0x5e>
    3d32:	4410                	lw	a2,8(s0)
    3d34:	b7f1                	j	3d00 <_putc_r+0x28>
    3d36:	000807b7          	lui	a5,0x80
    3d3a:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    3d3e:	fcf611e3          	bne	a2,a5,3d00 <_putc_r+0x28>
    3d42:	4450                	lw	a2,12(s0)
    3d44:	bf75                	j	3d00 <_putc_r+0x28>
    3d46:	421c                	lw	a5,0(a2)
    3d48:	0ff5f513          	zext.b	a0,a1
    3d4c:	00178713          	addi	a4,a5,1
    3d50:	c218                	sw	a4,0(a2)
    3d52:	00b78023          	sb	a1,0(a5)
    3d56:	40f2                	lw	ra,28(sp)
    3d58:	4462                	lw	s0,24(sp)
    3d5a:	6105                	addi	sp,sp,32
    3d5c:	8082                	ret

00003d5e <putc>:
    3d5e:	000807b7          	lui	a5,0x80
    3d62:	862e                	mv	a2,a1
    3d64:	85aa                	mv	a1,a0
    3d66:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    3d6a:	b7bd                	j	3cd8 <_putc_r>

00003d6c <__sfputc_r>:
    3d6c:	461c                	lw	a5,8(a2)
    3d6e:	17fd                	addi	a5,a5,-1
    3d70:	c61c                	sw	a5,8(a2)
    3d72:	0007da63          	bgez	a5,3d86 <__sfputc_r+0x1a>
    3d76:	4e18                	lw	a4,24(a2)
    3d78:	00e7c563          	blt	a5,a4,3d82 <__sfputc_r+0x16>
    3d7c:	47a9                	li	a5,10
    3d7e:	00f59463          	bne	a1,a5,3d86 <__sfputc_r+0x1a>
    3d82:	a26ff06f          	j	2fa8 <__swbuf_r>
    3d86:	421c                	lw	a5,0(a2)
    3d88:	852e                	mv	a0,a1
    3d8a:	00178713          	addi	a4,a5,1
    3d8e:	c218                	sw	a4,0(a2)
    3d90:	00b78023          	sb	a1,0(a5)
    3d94:	8082                	ret

00003d96 <__sfputs_r>:
    3d96:	1101                	addi	sp,sp,-32
    3d98:	cc22                	sw	s0,24(sp)
    3d9a:	ca26                	sw	s1,20(sp)
    3d9c:	c84a                	sw	s2,16(sp)
    3d9e:	c64e                	sw	s3,12(sp)
    3da0:	c452                	sw	s4,8(sp)
    3da2:	ce06                	sw	ra,28(sp)
    3da4:	892a                	mv	s2,a0
    3da6:	89ae                	mv	s3,a1
    3da8:	8432                	mv	s0,a2
    3daa:	00d604b3          	add	s1,a2,a3
    3dae:	5a7d                	li	s4,-1
    3db0:	00941463          	bne	s0,s1,3db8 <__sfputs_r+0x22>
    3db4:	4501                	li	a0,0
    3db6:	a809                	j	3dc8 <__sfputs_r+0x32>
    3db8:	00044583          	lbu	a1,0(s0)
    3dbc:	864e                	mv	a2,s3
    3dbe:	854a                	mv	a0,s2
    3dc0:	3775                	jal	3d6c <__sfputc_r>
    3dc2:	0405                	addi	s0,s0,1
    3dc4:	ff4516e3          	bne	a0,s4,3db0 <__sfputs_r+0x1a>
    3dc8:	40f2                	lw	ra,28(sp)
    3dca:	4462                	lw	s0,24(sp)
    3dcc:	44d2                	lw	s1,20(sp)
    3dce:	4942                	lw	s2,16(sp)
    3dd0:	49b2                	lw	s3,12(sp)
    3dd2:	4a22                	lw	s4,8(sp)
    3dd4:	6105                	addi	sp,sp,32
    3dd6:	8082                	ret

00003dd8 <__sprint_r>:
    3dd8:	461c                	lw	a5,8(a2)
    3dda:	1141                	addi	sp,sp,-16
    3ddc:	c422                	sw	s0,8(sp)
    3dde:	c606                	sw	ra,12(sp)
    3de0:	8432                	mv	s0,a2
    3de2:	cb91                	beqz	a5,3df6 <__sprint_r+0x1e>
    3de4:	24d1                	jal	40a8 <__sfvwrite_r>
    3de6:	00042423          	sw	zero,8(s0)
    3dea:	40b2                	lw	ra,12(sp)
    3dec:	00042223          	sw	zero,4(s0)
    3df0:	4422                	lw	s0,8(sp)
    3df2:	0141                	addi	sp,sp,16
    3df4:	8082                	ret
    3df6:	4501                	li	a0,0
    3df8:	bfcd                	j	3dea <__sprint_r+0x12>

00003dfa <_vfiprintf_r>:
    3dfa:	7171                	addi	sp,sp,-176
    3dfc:	d522                	sw	s0,168(sp)
    3dfe:	d326                	sw	s1,164(sp)
    3e00:	d14a                	sw	s2,160(sp)
    3e02:	cf4e                	sw	s3,156(sp)
    3e04:	d706                	sw	ra,172(sp)
    3e06:	cd52                	sw	s4,152(sp)
    3e08:	cb56                	sw	s5,148(sp)
    3e0a:	c95a                	sw	s6,144(sp)
    3e0c:	c75e                	sw	s7,140(sp)
    3e0e:	c562                	sw	s8,136(sp)
    3e10:	c366                	sw	s9,132(sp)
    3e12:	c16a                	sw	s10,128(sp)
    3e14:	deee                	sw	s11,124(sp)
    3e16:	89aa                	mv	s3,a0
    3e18:	84ae                	mv	s1,a1
    3e1a:	8932                	mv	s2,a2
    3e1c:	8436                	mv	s0,a3
    3e1e:	c509                	beqz	a0,3e28 <_vfiprintf_r+0x2e>
    3e20:	4d1c                	lw	a5,24(a0)
    3e22:	e399                	bnez	a5,3e28 <_vfiprintf_r+0x2e>
    3e24:	f34ff0ef          	jal	ra,3558 <__sinit>
    3e28:	000807b7          	lui	a5,0x80
    3e2c:	46078793          	addi	a5,a5,1120 # 80460 <__sf_fake_stdin>
    3e30:	0ef49363          	bne	s1,a5,3f16 <_vfiprintf_r+0x11c>
    3e34:	0049a483          	lw	s1,4(s3)
    3e38:	00c4d783          	lhu	a5,12(s1)
    3e3c:	8ba1                	andi	a5,a5,8
    3e3e:	0e078e63          	beqz	a5,3f3a <_vfiprintf_r+0x140>
    3e42:	489c                	lw	a5,16(s1)
    3e44:	0e078b63          	beqz	a5,3f3a <_vfiprintf_r+0x140>
    3e48:	02000793          	li	a5,32
    3e4c:	02f104a3          	sb	a5,41(sp)
    3e50:	03000793          	li	a5,48
    3e54:	d202                	sw	zero,36(sp)
    3e56:	02f10523          	sb	a5,42(sp)
    3e5a:	c622                	sw	s0,12(sp)
    3e5c:	02500c93          	li	s9,37
    3e60:	00080b37          	lui	s6,0x80
    3e64:	00080bb7          	lui	s7,0x80
    3e68:	00080d37          	lui	s10,0x80
    3e6c:	6c11                	lui	s8,0x4
    3e6e:	00000a93          	li	s5,0
    3e72:	844a                	mv	s0,s2
    3e74:	00044783          	lbu	a5,0(s0)
    3e78:	c399                	beqz	a5,3e7e <_vfiprintf_r+0x84>
    3e7a:	0f979663          	bne	a5,s9,3f66 <_vfiprintf_r+0x16c>
    3e7e:	41240db3          	sub	s11,s0,s2
    3e82:	01240d63          	beq	s0,s2,3e9c <_vfiprintf_r+0xa2>
    3e86:	86ee                	mv	a3,s11
    3e88:	864a                	mv	a2,s2
    3e8a:	85a6                	mv	a1,s1
    3e8c:	854e                	mv	a0,s3
    3e8e:	3721                	jal	3d96 <__sfputs_r>
    3e90:	57fd                	li	a5,-1
    3e92:	1ef50363          	beq	a0,a5,4078 <_vfiprintf_r+0x27e>
    3e96:	5792                	lw	a5,36(sp)
    3e98:	97ee                	add	a5,a5,s11
    3e9a:	d23e                	sw	a5,36(sp)
    3e9c:	00044783          	lbu	a5,0(s0)
    3ea0:	1c078c63          	beqz	a5,4078 <_vfiprintf_r+0x27e>
    3ea4:	57fd                	li	a5,-1
    3ea6:	00140913          	addi	s2,s0,1
    3eaa:	c802                	sw	zero,16(sp)
    3eac:	ce02                	sw	zero,28(sp)
    3eae:	ca3e                	sw	a5,20(sp)
    3eb0:	cc02                	sw	zero,24(sp)
    3eb2:	040109a3          	sb	zero,83(sp)
    3eb6:	d482                	sw	zero,104(sp)
    3eb8:	4d85                	li	s11,1
    3eba:	00094583          	lbu	a1,0(s2)
    3ebe:	4615                	li	a2,5
    3ec0:	4a0b0513          	addi	a0,s6,1184 # 804a0 <__sf_fake_stdout+0x20>
    3ec4:	2945                	jal	4374 <memchr>
    3ec6:	47c2                	lw	a5,16(sp)
    3ec8:	00190413          	addi	s0,s2,1
    3ecc:	ed59                	bnez	a0,3f6a <_vfiprintf_r+0x170>
    3ece:	0107f713          	andi	a4,a5,16
    3ed2:	c709                	beqz	a4,3edc <_vfiprintf_r+0xe2>
    3ed4:	02000713          	li	a4,32
    3ed8:	04e109a3          	sb	a4,83(sp)
    3edc:	0087f713          	andi	a4,a5,8
    3ee0:	c709                	beqz	a4,3eea <_vfiprintf_r+0xf0>
    3ee2:	02b00713          	li	a4,43
    3ee6:	04e109a3          	sb	a4,83(sp)
    3eea:	00094683          	lbu	a3,0(s2)
    3eee:	02a00713          	li	a4,42
    3ef2:	08e68563          	beq	a3,a4,3f7c <_vfiprintf_r+0x182>
    3ef6:	47f2                	lw	a5,28(sp)
    3ef8:	844a                	mv	s0,s2
    3efa:	4681                	li	a3,0
    3efc:	4625                	li	a2,9
    3efe:	4529                	li	a0,10
    3f00:	00044703          	lbu	a4,0(s0)
    3f04:	00140593          	addi	a1,s0,1
    3f08:	fd070713          	addi	a4,a4,-48 # fd0 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery+0x1e>
    3f0c:	0ae67d63          	bgeu	a2,a4,3fc6 <_vfiprintf_r+0x1cc>
    3f10:	ceb5                	beqz	a3,3f8c <_vfiprintf_r+0x192>
    3f12:	ce3e                	sw	a5,28(sp)
    3f14:	a8a5                	j	3f8c <_vfiprintf_r+0x192>
    3f16:	000807b7          	lui	a5,0x80
    3f1a:	48078793          	addi	a5,a5,1152 # 80480 <__sf_fake_stdout>
    3f1e:	00f49563          	bne	s1,a5,3f28 <_vfiprintf_r+0x12e>
    3f22:	0089a483          	lw	s1,8(s3)
    3f26:	bf09                	j	3e38 <_vfiprintf_r+0x3e>
    3f28:	000807b7          	lui	a5,0x80
    3f2c:	44078793          	addi	a5,a5,1088 # 80440 <__sf_fake_stderr>
    3f30:	f0f494e3          	bne	s1,a5,3e38 <_vfiprintf_r+0x3e>
    3f34:	00c9a483          	lw	s1,12(s3)
    3f38:	b701                	j	3e38 <_vfiprintf_r+0x3e>
    3f3a:	85a6                	mv	a1,s1
    3f3c:	854e                	mv	a0,s3
    3f3e:	938ff0ef          	jal	ra,3076 <__swsetup_r>
    3f42:	f00503e3          	beqz	a0,3e48 <_vfiprintf_r+0x4e>
    3f46:	557d                	li	a0,-1
    3f48:	50ba                	lw	ra,172(sp)
    3f4a:	542a                	lw	s0,168(sp)
    3f4c:	549a                	lw	s1,164(sp)
    3f4e:	590a                	lw	s2,160(sp)
    3f50:	49fa                	lw	s3,156(sp)
    3f52:	4a6a                	lw	s4,152(sp)
    3f54:	4ada                	lw	s5,148(sp)
    3f56:	4b4a                	lw	s6,144(sp)
    3f58:	4bba                	lw	s7,140(sp)
    3f5a:	4c2a                	lw	s8,136(sp)
    3f5c:	4c9a                	lw	s9,132(sp)
    3f5e:	4d0a                	lw	s10,128(sp)
    3f60:	5df6                	lw	s11,124(sp)
    3f62:	614d                	addi	sp,sp,176
    3f64:	8082                	ret
    3f66:	0405                	addi	s0,s0,1
    3f68:	b731                	j	3e74 <_vfiprintf_r+0x7a>
    3f6a:	4a0b0713          	addi	a4,s6,1184
    3f6e:	8d19                	sub	a0,a0,a4
    3f70:	00ad9533          	sll	a0,s11,a0
    3f74:	8fc9                	or	a5,a5,a0
    3f76:	c83e                	sw	a5,16(sp)
    3f78:	8922                	mv	s2,s0
    3f7a:	b781                	j	3eba <_vfiprintf_r+0xc0>
    3f7c:	4732                	lw	a4,12(sp)
    3f7e:	00470693          	addi	a3,a4,4
    3f82:	4318                	lw	a4,0(a4)
    3f84:	c636                	sw	a3,12(sp)
    3f86:	02074963          	bltz	a4,3fb8 <_vfiprintf_r+0x1be>
    3f8a:	ce3a                	sw	a4,28(sp)
    3f8c:	00044703          	lbu	a4,0(s0)
    3f90:	02e00793          	li	a5,46
    3f94:	06f71063          	bne	a4,a5,3ff4 <_vfiprintf_r+0x1fa>
    3f98:	00144703          	lbu	a4,1(s0)
    3f9c:	02a00793          	li	a5,42
    3fa0:	02f71b63          	bne	a4,a5,3fd6 <_vfiprintf_r+0x1dc>
    3fa4:	47b2                	lw	a5,12(sp)
    3fa6:	0409                	addi	s0,s0,2
    3fa8:	00478713          	addi	a4,a5,4
    3fac:	439c                	lw	a5,0(a5)
    3fae:	c63a                	sw	a4,12(sp)
    3fb0:	0207c163          	bltz	a5,3fd2 <_vfiprintf_r+0x1d8>
    3fb4:	ca3e                	sw	a5,20(sp)
    3fb6:	a83d                	j	3ff4 <_vfiprintf_r+0x1fa>
    3fb8:	40e00733          	neg	a4,a4
    3fbc:	0027e793          	ori	a5,a5,2
    3fc0:	ce3a                	sw	a4,28(sp)
    3fc2:	c83e                	sw	a5,16(sp)
    3fc4:	b7e1                	j	3f8c <_vfiprintf_r+0x192>
    3fc6:	02a787b3          	mul	a5,a5,a0
    3fca:	842e                	mv	s0,a1
    3fcc:	4685                	li	a3,1
    3fce:	97ba                	add	a5,a5,a4
    3fd0:	bf05                	j	3f00 <_vfiprintf_r+0x106>
    3fd2:	57fd                	li	a5,-1
    3fd4:	b7c5                	j	3fb4 <_vfiprintf_r+0x1ba>
    3fd6:	0405                	addi	s0,s0,1
    3fd8:	ca02                	sw	zero,20(sp)
    3fda:	4681                	li	a3,0
    3fdc:	4781                	li	a5,0
    3fde:	4625                	li	a2,9
    3fe0:	4529                	li	a0,10
    3fe2:	00044703          	lbu	a4,0(s0)
    3fe6:	00140593          	addi	a1,s0,1
    3fea:	fd070713          	addi	a4,a4,-48
    3fee:	04e67d63          	bgeu	a2,a4,4048 <_vfiprintf_r+0x24e>
    3ff2:	f2e9                	bnez	a3,3fb4 <_vfiprintf_r+0x1ba>
    3ff4:	00044583          	lbu	a1,0(s0)
    3ff8:	460d                	li	a2,3
    3ffa:	4a8b8513          	addi	a0,s7,1192 # 804a8 <__sf_fake_stdout+0x28>
    3ffe:	2e9d                	jal	4374 <memchr>
    4000:	cd01                	beqz	a0,4018 <_vfiprintf_r+0x21e>
    4002:	4a8b8793          	addi	a5,s7,1192
    4006:	8d1d                	sub	a0,a0,a5
    4008:	47c2                	lw	a5,16(sp)
    400a:	04000713          	li	a4,64
    400e:	00a71733          	sll	a4,a4,a0
    4012:	8fd9                	or	a5,a5,a4
    4014:	0405                	addi	s0,s0,1
    4016:	c83e                	sw	a5,16(sp)
    4018:	00044583          	lbu	a1,0(s0)
    401c:	4619                	li	a2,6
    401e:	4acd0513          	addi	a0,s10,1196 # 804ac <__sf_fake_stdout+0x2c>
    4022:	00140913          	addi	s2,s0,1
    4026:	02b10423          	sb	a1,40(sp)
    402a:	26a9                	jal	4374 <memchr>
    402c:	cd31                	beqz	a0,4088 <_vfiprintf_r+0x28e>
    402e:	020a9763          	bnez	s5,405c <_vfiprintf_r+0x262>
    4032:	4742                	lw	a4,16(sp)
    4034:	47b2                	lw	a5,12(sp)
    4036:	10077713          	andi	a4,a4,256
    403a:	cf09                	beqz	a4,4054 <_vfiprintf_r+0x25a>
    403c:	0791                	addi	a5,a5,4
    403e:	c63e                	sw	a5,12(sp)
    4040:	5792                	lw	a5,36(sp)
    4042:	97d2                	add	a5,a5,s4
    4044:	d23e                	sw	a5,36(sp)
    4046:	b535                	j	3e72 <_vfiprintf_r+0x78>
    4048:	02a787b3          	mul	a5,a5,a0
    404c:	842e                	mv	s0,a1
    404e:	4685                	li	a3,1
    4050:	97ba                	add	a5,a5,a4
    4052:	bf41                	j	3fe2 <_vfiprintf_r+0x1e8>
    4054:	079d                	addi	a5,a5,7
    4056:	9be1                	andi	a5,a5,-8
    4058:	07a1                	addi	a5,a5,8
    405a:	b7d5                	j	403e <_vfiprintf_r+0x244>
    405c:	0078                	addi	a4,sp,12
    405e:	d96c0693          	addi	a3,s8,-618 # 3d96 <__sfputs_r>
    4062:	8626                	mv	a2,s1
    4064:	080c                	addi	a1,sp,16
    4066:	854e                	mv	a0,s3
    4068:	00000097          	auipc	ra,0x0
    406c:	000000e7          	jalr	zero # 0 <__vector_start>
    4070:	57fd                	li	a5,-1
    4072:	8a2a                	mv	s4,a0
    4074:	fcf516e3          	bne	a0,a5,4040 <_vfiprintf_r+0x246>
    4078:	00c4d783          	lhu	a5,12(s1)
    407c:	0407f793          	andi	a5,a5,64
    4080:	ec0793e3          	bnez	a5,3f46 <_vfiprintf_r+0x14c>
    4084:	5512                	lw	a0,36(sp)
    4086:	b5c9                	j	3f48 <_vfiprintf_r+0x14e>
    4088:	0078                	addi	a4,sp,12
    408a:	d96c0693          	addi	a3,s8,-618
    408e:	8626                	mv	a2,s1
    4090:	080c                	addi	a1,sp,16
    4092:	854e                	mv	a0,s3
    4094:	2175                	jal	4540 <_printf_i>
    4096:	bfe9                	j	4070 <_vfiprintf_r+0x276>

00004098 <vfiprintf>:
    4098:	000807b7          	lui	a5,0x80
    409c:	86b2                	mv	a3,a2
    409e:	862e                	mv	a2,a1
    40a0:	85aa                	mv	a1,a0
    40a2:	69c7a503          	lw	a0,1692(a5) # 8069c <_impure_ptr>
    40a6:	bb91                	j	3dfa <_vfiprintf_r>

000040a8 <__sfvwrite_r>:
    40a8:	461c                	lw	a5,8(a2)
    40aa:	e781                	bnez	a5,40b2 <__sfvwrite_r+0xa>
    40ac:	4781                	li	a5,0
    40ae:	853e                	mv	a0,a5
    40b0:	8082                	ret
    40b2:	00c5d783          	lhu	a5,12(a1)
    40b6:	715d                	addi	sp,sp,-80
    40b8:	c4a2                	sw	s0,72(sp)
    40ba:	c0ca                	sw	s2,64(sp)
    40bc:	dc52                	sw	s4,56(sp)
    40be:	c686                	sw	ra,76(sp)
    40c0:	c2a6                	sw	s1,68(sp)
    40c2:	de4e                	sw	s3,60(sp)
    40c4:	da56                	sw	s5,52(sp)
    40c6:	d85a                	sw	s6,48(sp)
    40c8:	d65e                	sw	s7,44(sp)
    40ca:	d462                	sw	s8,40(sp)
    40cc:	d266                	sw	s9,36(sp)
    40ce:	d06a                	sw	s10,32(sp)
    40d0:	ce6e                	sw	s11,28(sp)
    40d2:	8ba1                	andi	a5,a5,8
    40d4:	892a                	mv	s2,a0
    40d6:	842e                	mv	s0,a1
    40d8:	8a32                	mv	s4,a2
    40da:	cbd9                	beqz	a5,4170 <handler.c.0b49bfed+0x51>
    40dc:	499c                	lw	a5,16(a1)
    40de:	cbc9                	beqz	a5,4170 <handler.c.0b49bfed+0x51>
    40e0:	00c45783          	lhu	a5,12(s0)
    40e4:	000a2983          	lw	s3,0(s4)
    40e8:	0027f713          	andi	a4,a5,2
    40ec:	e37d                	bnez	a4,41d2 <handler.c.0b49bfed+0xb3>
    40ee:	8b85                	andi	a5,a5,1
    40f0:	14078f63          	beqz	a5,424e <handler.c.0b49bfed+0x12f>
    40f4:	4b81                	li	s7,0
    40f6:	4501                	li	a0,0
    40f8:	4b01                	li	s6,0
    40fa:	4a81                	li	s5,0
    40fc:	220a8e63          	beqz	s5,4338 <handler.c.0b49bfed+0x219>
    4100:	e919                	bnez	a0,4116 <__sfvwrite_r+0x6e>
    4102:	8656                	mv	a2,s5
    4104:	45a9                	li	a1,10
    4106:	855a                	mv	a0,s6
    4108:	24b5                	jal	4374 <memchr>
    410a:	001a8b93          	addi	s7,s5,1
    410e:	c501                	beqz	a0,4116 <__sfvwrite_r+0x6e>
    4110:	0505                	addi	a0,a0,1
    4112:	41650bb3          	sub	s7,a0,s6
    4116:	8c5e                	mv	s8,s7
    4118:	017af363          	bgeu	s5,s7,411e <__sfvwrite_r+0x76>
    411c:	8c56                	mv	s8,s5
    411e:	4008                	lw	a0,0(s0)
    4120:	481c                	lw	a5,16(s0)
    4122:	4404                	lw	s1,8(s0)
    4124:	4854                	lw	a3,20(s0)
    4126:	22a7f063          	bgeu	a5,a0,4346 <handler.c.0b49bfed+0x227>
    412a:	94b6                	add	s1,s1,a3
    412c:	2184dd63          	bge	s1,s8,4346 <handler.c.0b49bfed+0x227>
    4130:	85da                	mv	a1,s6
    4132:	8626                	mv	a2,s1
    4134:	2ca9                	jal	438e <memmove>
    4136:	401c                	lw	a5,0(s0)
    4138:	85a2                	mv	a1,s0
    413a:	854a                	mv	a0,s2
    413c:	97a6                	add	a5,a5,s1
    413e:	c01c                	sw	a5,0(s0)
    4140:	ad4ff0ef          	jal	ra,3414 <_fflush_r>
    4144:	0e051d63          	bnez	a0,423e <handler.c.0b49bfed+0x11f>
    4148:	409b8bb3          	sub	s7,s7,s1
    414c:	4505                	li	a0,1
    414e:	000b9763          	bnez	s7,415c <handler.c.0b49bfed+0x3d>
    4152:	85a2                	mv	a1,s0
    4154:	854a                	mv	a0,s2
    4156:	abeff0ef          	jal	ra,3414 <_fflush_r>
    415a:	e175                	bnez	a0,423e <handler.c.0b49bfed+0x11f>
    415c:	008a2783          	lw	a5,8(s4)
    4160:	9b26                	add	s6,s6,s1
    4162:	409a8ab3          	sub	s5,s5,s1
    4166:	8f85                	sub	a5,a5,s1
    4168:	00fa2423          	sw	a5,8(s4)
    416c:	fbc1                	bnez	a5,40fc <__sfvwrite_r+0x54>
    416e:	a089                	j	41b0 <handler.c.0b49bfed+0x91>
    4170:	85a2                	mv	a1,s0
    4172:	854a                	mv	a0,s2
    4174:	f03fe0ef          	jal	ra,3076 <__swsetup_r>
    4178:	57fd                	li	a5,-1
    417a:	d13d                	beqz	a0,40e0 <__sfvwrite_r+0x38>
    417c:	a81d                	j	41b2 <handler.c.0b49bfed+0x93>
    417e:	0009aa83          	lw	s5,0(s3)
    4182:	0049a483          	lw	s1,4(s3)
    4186:	09a1                	addi	s3,s3,8
    4188:	541c                	lw	a5,40(s0)
    418a:	500c                	lw	a1,32(s0)
    418c:	d8ed                	beqz	s1,417e <handler.c.0b49bfed+0x5f>
    418e:	86a6                	mv	a3,s1
    4190:	009b7363          	bgeu	s6,s1,4196 <handler.c.0b49bfed+0x77>
    4194:	86da                	mv	a3,s6
    4196:	8656                	mv	a2,s5
    4198:	854a                	mv	a0,s2
    419a:	9782                	jalr	a5
    419c:	0aa05163          	blez	a0,423e <handler.c.0b49bfed+0x11f>
    41a0:	008a2783          	lw	a5,8(s4)
    41a4:	9aaa                	add	s5,s5,a0
    41a6:	8c89                	sub	s1,s1,a0
    41a8:	8f89                	sub	a5,a5,a0
    41aa:	00fa2423          	sw	a5,8(s4)
    41ae:	ffe9                	bnez	a5,4188 <handler.c.0b49bfed+0x69>
    41b0:	4781                	li	a5,0
    41b2:	40b6                	lw	ra,76(sp)
    41b4:	4426                	lw	s0,72(sp)
    41b6:	4496                	lw	s1,68(sp)
    41b8:	4906                	lw	s2,64(sp)
    41ba:	59f2                	lw	s3,60(sp)
    41bc:	5a62                	lw	s4,56(sp)
    41be:	5ad2                	lw	s5,52(sp)
    41c0:	5b42                	lw	s6,48(sp)
    41c2:	5bb2                	lw	s7,44(sp)
    41c4:	5c22                	lw	s8,40(sp)
    41c6:	5c92                	lw	s9,36(sp)
    41c8:	5d02                	lw	s10,32(sp)
    41ca:	4df2                	lw	s11,28(sp)
    41cc:	853e                	mv	a0,a5
    41ce:	6161                	addi	sp,sp,80
    41d0:	8082                	ret
    41d2:	80000b37          	lui	s6,0x80000
    41d6:	4a81                	li	s5,0
    41d8:	4481                	li	s1,0
    41da:	c00b4b13          	xori	s6,s6,-1024
    41de:	b76d                	j	4188 <handler.c.0b49bfed+0x69>
    41e0:	0009aa83          	lw	s5,0(s3)
    41e4:	0049ad03          	lw	s10,4(s3)
    41e8:	09a1                	addi	s3,s3,8
    41ea:	00c41703          	lh	a4,12(s0)
    41ee:	4008                	lw	a0,0(s0)
    41f0:	4410                	lw	a2,8(s0)
    41f2:	fe0d07e3          	beqz	s10,41e0 <handler.c.0b49bfed+0xc1>
    41f6:	01071793          	slli	a5,a4,0x10
    41fa:	20077713          	andi	a4,a4,512
    41fe:	83c1                	srli	a5,a5,0x10
    4200:	c36d                	beqz	a4,42e2 <handler.c.0b49bfed+0x1c3>
    4202:	08cd6763          	bltu	s10,a2,4290 <handler.c.0b49bfed+0x171>
    4206:	4807f713          	andi	a4,a5,1152
    420a:	c359                	beqz	a4,4290 <handler.c.0b49bfed+0x171>
    420c:	4844                	lw	s1,20(s0)
    420e:	480c                	lw	a1,16(s0)
    4210:	029c04b3          	mul	s1,s8,s1
    4214:	40b50db3          	sub	s11,a0,a1
    4218:	001d8713          	addi	a4,s11,1
    421c:	976a                	add	a4,a4,s10
    421e:	0394c4b3          	div	s1,s1,s9
    4222:	00e4f363          	bgeu	s1,a4,4228 <handler.c.0b49bfed+0x109>
    4226:	84ba                	mv	s1,a4
    4228:	4007f793          	andi	a5,a5,1024
    422c:	cbd9                	beqz	a5,42c2 <handler.c.0b49bfed+0x1a3>
    422e:	85a6                	mv	a1,s1
    4230:	854a                	mv	a0,s2
    4232:	eb8ff0ef          	jal	ra,38ea <_malloc_r>
    4236:	e51d                	bnez	a0,4264 <handler.c.0b49bfed+0x145>
    4238:	47b1                	li	a5,12
    423a:	00f92023          	sw	a5,0(s2)
    423e:	00c45783          	lhu	a5,12(s0)
    4242:	0407e793          	ori	a5,a5,64
    4246:	00f41623          	sh	a5,12(s0)
    424a:	57fd                	li	a5,-1
    424c:	b79d                	j	41b2 <handler.c.0b49bfed+0x93>
    424e:	80000b37          	lui	s6,0x80000
    4252:	ffeb4b93          	xori	s7,s6,-2
    4256:	4a81                	li	s5,0
    4258:	4d01                	li	s10,0
    425a:	fffb4b13          	not	s6,s6
    425e:	4c0d                	li	s8,3
    4260:	4c89                	li	s9,2
    4262:	b761                	j	41ea <handler.c.0b49bfed+0xcb>
    4264:	480c                	lw	a1,16(s0)
    4266:	866e                	mv	a2,s11
    4268:	c62a                	sw	a0,12(sp)
    426a:	995ff0ef          	jal	ra,3bfe <memcpy>
    426e:	00c45703          	lhu	a4,12(s0)
    4272:	47b2                	lw	a5,12(sp)
    4274:	b7f77713          	andi	a4,a4,-1153
    4278:	08076713          	ori	a4,a4,128
    427c:	00e41623          	sh	a4,12(s0)
    4280:	c81c                	sw	a5,16(s0)
    4282:	c844                	sw	s1,20(s0)
    4284:	97ee                	add	a5,a5,s11
    4286:	41b484b3          	sub	s1,s1,s11
    428a:	c01c                	sw	a5,0(s0)
    428c:	866a                	mv	a2,s10
    428e:	c404                	sw	s1,8(s0)
    4290:	84ea                	mv	s1,s10
    4292:	00cd7363          	bgeu	s10,a2,4298 <handler.c.0b49bfed+0x179>
    4296:	866a                	mv	a2,s10
    4298:	4008                	lw	a0,0(s0)
    429a:	85d6                	mv	a1,s5
    429c:	c632                	sw	a2,12(sp)
    429e:	28c5                	jal	438e <memmove>
    42a0:	441c                	lw	a5,8(s0)
    42a2:	4632                	lw	a2,12(sp)
    42a4:	8f91                	sub	a5,a5,a2
    42a6:	c41c                	sw	a5,8(s0)
    42a8:	401c                	lw	a5,0(s0)
    42aa:	97b2                	add	a5,a5,a2
    42ac:	c01c                	sw	a5,0(s0)
    42ae:	008a2783          	lw	a5,8(s4)
    42b2:	9aa6                	add	s5,s5,s1
    42b4:	409d0d33          	sub	s10,s10,s1
    42b8:	8f85                	sub	a5,a5,s1
    42ba:	00fa2423          	sw	a5,8(s4)
    42be:	f795                	bnez	a5,41ea <handler.c.0b49bfed+0xcb>
    42c0:	bdc5                	j	41b0 <handler.c.0b49bfed+0x91>
    42c2:	8626                	mv	a2,s1
    42c4:	854a                	mv	a0,s2
    42c6:	20fd                	jal	43b4 <_realloc_r>
    42c8:	87aa                	mv	a5,a0
    42ca:	f95d                	bnez	a0,4280 <handler.c.0b49bfed+0x161>
    42cc:	480c                	lw	a1,16(s0)
    42ce:	854a                	mv	a0,s2
    42d0:	d78ff0ef          	jal	ra,3848 <_free_r>
    42d4:	00c45783          	lhu	a5,12(s0)
    42d8:	f7f7f793          	andi	a5,a5,-129
    42dc:	00f41623          	sh	a5,12(s0)
    42e0:	bfa1                	j	4238 <handler.c.0b49bfed+0x119>
    42e2:	481c                	lw	a5,16(s0)
    42e4:	00a7e563          	bltu	a5,a0,42ee <handler.c.0b49bfed+0x1cf>
    42e8:	4854                	lw	a3,20(s0)
    42ea:	02dd7663          	bgeu	s10,a3,4316 <handler.c.0b49bfed+0x1f7>
    42ee:	84b2                	mv	s1,a2
    42f0:	00cd7363          	bgeu	s10,a2,42f6 <handler.c.0b49bfed+0x1d7>
    42f4:	84ea                	mv	s1,s10
    42f6:	8626                	mv	a2,s1
    42f8:	85d6                	mv	a1,s5
    42fa:	2851                	jal	438e <memmove>
    42fc:	441c                	lw	a5,8(s0)
    42fe:	4018                	lw	a4,0(s0)
    4300:	8f85                	sub	a5,a5,s1
    4302:	9726                	add	a4,a4,s1
    4304:	c41c                	sw	a5,8(s0)
    4306:	c018                	sw	a4,0(s0)
    4308:	f3dd                	bnez	a5,42ae <handler.c.0b49bfed+0x18f>
    430a:	85a2                	mv	a1,s0
    430c:	854a                	mv	a0,s2
    430e:	906ff0ef          	jal	ra,3414 <_fflush_r>
    4312:	dd51                	beqz	a0,42ae <handler.c.0b49bfed+0x18f>
    4314:	b72d                	j	423e <handler.c.0b49bfed+0x11f>
    4316:	87da                	mv	a5,s6
    4318:	01abe363          	bltu	s7,s10,431e <handler.c.0b49bfed+0x1ff>
    431c:	87ea                	mv	a5,s10
    431e:	02d7c7b3          	div	a5,a5,a3
    4322:	5418                	lw	a4,40(s0)
    4324:	500c                	lw	a1,32(s0)
    4326:	8656                	mv	a2,s5
    4328:	854a                	mv	a0,s2
    432a:	02d786b3          	mul	a3,a5,a3
    432e:	9702                	jalr	a4
    4330:	84aa                	mv	s1,a0
    4332:	f6a04ee3          	bgtz	a0,42ae <handler.c.0b49bfed+0x18f>
    4336:	b721                	j	423e <handler.c.0b49bfed+0x11f>
    4338:	0009ab03          	lw	s6,0(s3)
    433c:	0049aa83          	lw	s5,4(s3)
    4340:	4501                	li	a0,0
    4342:	09a1                	addi	s3,s3,8
    4344:	bb65                	j	40fc <__sfvwrite_r+0x54>
    4346:	00dc4b63          	blt	s8,a3,435c <handler.c.0b49bfed+0x23d>
    434a:	541c                	lw	a5,40(s0)
    434c:	500c                	lw	a1,32(s0)
    434e:	865a                	mv	a2,s6
    4350:	854a                	mv	a0,s2
    4352:	9782                	jalr	a5
    4354:	84aa                	mv	s1,a0
    4356:	dea049e3          	bgtz	a0,4148 <handler.c.0b49bfed+0x29>
    435a:	b5d5                	j	423e <handler.c.0b49bfed+0x11f>
    435c:	8662                	mv	a2,s8
    435e:	85da                	mv	a1,s6
    4360:	203d                	jal	438e <memmove>
    4362:	441c                	lw	a5,8(s0)
    4364:	84e2                	mv	s1,s8
    4366:	418787b3          	sub	a5,a5,s8
    436a:	c41c                	sw	a5,8(s0)
    436c:	401c                	lw	a5,0(s0)
    436e:	97e2                	add	a5,a5,s8
    4370:	c01c                	sw	a5,0(s0)
    4372:	bbd9                	j	4148 <handler.c.0b49bfed+0x29>

00004374 <memchr>:
    4374:	0ff5f593          	zext.b	a1,a1
    4378:	962a                	add	a2,a2,a0
    437a:	00c51463          	bne	a0,a2,4382 <mmio.c.1d292ae4+0xb>
    437e:	4501                	li	a0,0
    4380:	8082                	ret
    4382:	00054783          	lbu	a5,0(a0)
    4386:	feb78de3          	beq	a5,a1,4380 <mmio.c.1d292ae4+0x9>
    438a:	0505                	addi	a0,a0,1
    438c:	b7fd                	j	437a <mmio.c.1d292ae4+0x3>

0000438e <memmove>:
    438e:	c215                	beqz	a2,43b2 <memmove+0x24>
    4390:	832a                	mv	t1,a0
    4392:	4685                	li	a3,1
    4394:	00b56763          	bltu	a0,a1,43a2 <memmove+0x14>
    4398:	56fd                	li	a3,-1
    439a:	fff60713          	addi	a4,a2,-1
    439e:	933a                	add	t1,t1,a4
    43a0:	95ba                	add	a1,a1,a4
    43a2:	00058383          	lb	t2,0(a1)
    43a6:	00730023          	sb	t2,0(t1)
    43aa:	167d                	addi	a2,a2,-1
    43ac:	9336                	add	t1,t1,a3
    43ae:	95b6                	add	a1,a1,a3
    43b0:	fa6d                	bnez	a2,43a2 <memmove+0x14>
    43b2:	8082                	ret

000043b4 <_realloc_r>:
    43b4:	1101                	addi	sp,sp,-32
    43b6:	cc22                	sw	s0,24(sp)
    43b8:	ce06                	sw	ra,28(sp)
    43ba:	ca26                	sw	s1,20(sp)
    43bc:	c84a                	sw	s2,16(sp)
    43be:	c64e                	sw	s3,12(sp)
    43c0:	c452                	sw	s4,8(sp)
    43c2:	8432                	mv	s0,a2
    43c4:	e999                	bnez	a1,43da <_realloc_r+0x26>
    43c6:	4462                	lw	s0,24(sp)
    43c8:	40f2                	lw	ra,28(sp)
    43ca:	44d2                	lw	s1,20(sp)
    43cc:	4942                	lw	s2,16(sp)
    43ce:	49b2                	lw	s3,12(sp)
    43d0:	4a22                	lw	s4,8(sp)
    43d2:	85b2                	mv	a1,a2
    43d4:	6105                	addi	sp,sp,32
    43d6:	d14ff06f          	j	38ea <_malloc_r>
    43da:	ee09                	bnez	a2,43f4 <_realloc_r+0x40>
    43dc:	c6cff0ef          	jal	ra,3848 <_free_r>
    43e0:	4481                	li	s1,0
    43e2:	40f2                	lw	ra,28(sp)
    43e4:	4462                	lw	s0,24(sp)
    43e6:	4942                	lw	s2,16(sp)
    43e8:	49b2                	lw	s3,12(sp)
    43ea:	4a22                	lw	s4,8(sp)
    43ec:	8526                	mv	a0,s1
    43ee:	44d2                	lw	s1,20(sp)
    43f0:	6105                	addi	sp,sp,32
    43f2:	8082                	ret
    43f4:	8a2a                	mv	s4,a0
    43f6:	892e                	mv	s2,a1
    43f8:	2675                	jal	47a4 <_malloc_usable_size_r>
    43fa:	89aa                	mv	s3,a0
    43fc:	00856763          	bltu	a0,s0,440a <_realloc_r+0x56>
    4400:	00155793          	srli	a5,a0,0x1
    4404:	84ca                	mv	s1,s2
    4406:	fc87eee3          	bltu	a5,s0,43e2 <_realloc_r+0x2e>
    440a:	85a2                	mv	a1,s0
    440c:	8552                	mv	a0,s4
    440e:	cdcff0ef          	jal	ra,38ea <_malloc_r>
    4412:	84aa                	mv	s1,a0
    4414:	d579                	beqz	a0,43e2 <_realloc_r+0x2e>
    4416:	8622                	mv	a2,s0
    4418:	0089f363          	bgeu	s3,s0,441e <_realloc_r+0x6a>
    441c:	864e                	mv	a2,s3
    441e:	85ca                	mv	a1,s2
    4420:	8526                	mv	a0,s1
    4422:	fdcff0ef          	jal	ra,3bfe <memcpy>
    4426:	85ca                	mv	a1,s2
    4428:	8552                	mv	a0,s4
    442a:	c1eff0ef          	jal	ra,3848 <_free_r>
    442e:	bf55                	j	43e2 <_realloc_r+0x2e>

00004430 <_printf_common>:
    4430:	7179                	addi	sp,sp,-48
    4432:	cc52                	sw	s4,24(sp)
    4434:	499c                	lw	a5,16(a1)
    4436:	8a3a                	mv	s4,a4
    4438:	4598                	lw	a4,8(a1)
    443a:	d422                	sw	s0,40(sp)
    443c:	d04a                	sw	s2,32(sp)
    443e:	ce4e                	sw	s3,28(sp)
    4440:	ca56                	sw	s5,20(sp)
    4442:	d606                	sw	ra,44(sp)
    4444:	d226                	sw	s1,36(sp)
    4446:	c85a                	sw	s6,16(sp)
    4448:	c65e                	sw	s7,12(sp)
    444a:	89aa                	mv	s3,a0
    444c:	842e                	mv	s0,a1
    444e:	8932                	mv	s2,a2
    4450:	8ab6                	mv	s5,a3
    4452:	00e7d363          	bge	a5,a4,4458 <_printf_common+0x28>
    4456:	87ba                	mv	a5,a4
    4458:	00f92023          	sw	a5,0(s2)
    445c:	04344703          	lbu	a4,67(s0)
    4460:	c701                	beqz	a4,4468 <_printf_common+0x38>
    4462:	0785                	addi	a5,a5,1
    4464:	00f92023          	sw	a5,0(s2)
    4468:	401c                	lw	a5,0(s0)
    446a:	0207f793          	andi	a5,a5,32
    446e:	c791                	beqz	a5,447a <_printf_common+0x4a>
    4470:	00092783          	lw	a5,0(s2)
    4474:	0789                	addi	a5,a5,2
    4476:	00f92023          	sw	a5,0(s2)
    447a:	4004                	lw	s1,0(s0)
    447c:	8899                	andi	s1,s1,6
    447e:	e891                	bnez	s1,4492 <_printf_common+0x62>
    4480:	01940b13          	addi	s6,s0,25
    4484:	5bfd                	li	s7,-1
    4486:	445c                	lw	a5,12(s0)
    4488:	00092703          	lw	a4,0(s2)
    448c:	8f99                	sub	a5,a5,a4
    448e:	04f4cc63          	blt	s1,a5,44e6 <_printf_common+0xb6>
    4492:	04344783          	lbu	a5,67(s0)
    4496:	00f036b3          	snez	a3,a5
    449a:	401c                	lw	a5,0(s0)
    449c:	0207f793          	andi	a5,a5,32
    44a0:	eba5                	bnez	a5,4510 <_printf_common+0xe0>
    44a2:	04340613          	addi	a2,s0,67
    44a6:	85d6                	mv	a1,s5
    44a8:	854e                	mv	a0,s3
    44aa:	9a02                	jalr	s4
    44ac:	57fd                	li	a5,-1
    44ae:	04f50363          	beq	a0,a5,44f4 <_printf_common+0xc4>
    44b2:	401c                	lw	a5,0(s0)
    44b4:	4711                	li	a4,4
    44b6:	4481                	li	s1,0
    44b8:	8b99                	andi	a5,a5,6
    44ba:	00e79963          	bne	a5,a4,44cc <_printf_common+0x9c>
    44be:	4444                	lw	s1,12(s0)
    44c0:	00092783          	lw	a5,0(s2)
    44c4:	8c9d                	sub	s1,s1,a5
    44c6:	0004d363          	bgez	s1,44cc <_printf_common+0x9c>
    44ca:	4481                	li	s1,0
    44cc:	441c                	lw	a5,8(s0)
    44ce:	4818                	lw	a4,16(s0)
    44d0:	00f75463          	bge	a4,a5,44d8 <_printf_common+0xa8>
    44d4:	8f99                	sub	a5,a5,a4
    44d6:	94be                	add	s1,s1,a5
    44d8:	4901                	li	s2,0
    44da:	0469                	addi	s0,s0,26
    44dc:	5b7d                	li	s6,-1
    44de:	05249863          	bne	s1,s2,452e <_printf_common+0xfe>
    44e2:	4501                	li	a0,0
    44e4:	a809                	j	44f6 <_printf_common+0xc6>
    44e6:	4685                	li	a3,1
    44e8:	865a                	mv	a2,s6
    44ea:	85d6                	mv	a1,s5
    44ec:	854e                	mv	a0,s3
    44ee:	9a02                	jalr	s4
    44f0:	01751e63          	bne	a0,s7,450c <_printf_common+0xdc>
    44f4:	557d                	li	a0,-1
    44f6:	50b2                	lw	ra,44(sp)
    44f8:	5422                	lw	s0,40(sp)
    44fa:	5492                	lw	s1,36(sp)
    44fc:	5902                	lw	s2,32(sp)
    44fe:	49f2                	lw	s3,28(sp)
    4500:	4a62                	lw	s4,24(sp)
    4502:	4ad2                	lw	s5,20(sp)
    4504:	4b42                	lw	s6,16(sp)
    4506:	4bb2                	lw	s7,12(sp)
    4508:	6145                	addi	sp,sp,48
    450a:	8082                	ret
    450c:	0485                	addi	s1,s1,1
    450e:	bfa5                	j	4486 <_printf_common+0x56>
    4510:	00d40733          	add	a4,s0,a3
    4514:	03000613          	li	a2,48
    4518:	04c701a3          	sb	a2,67(a4)
    451c:	04544703          	lbu	a4,69(s0)
    4520:	00168793          	addi	a5,a3,1 # 1001 <PQCLEAN_KYBER768_CLEAN_poly_basemul_montgomery+0x4f>
    4524:	97a2                	add	a5,a5,s0
    4526:	0689                	addi	a3,a3,2
    4528:	04e781a3          	sb	a4,67(a5)
    452c:	bf9d                	j	44a2 <_printf_common+0x72>
    452e:	4685                	li	a3,1
    4530:	8622                	mv	a2,s0
    4532:	85d6                	mv	a1,s5
    4534:	854e                	mv	a0,s3
    4536:	9a02                	jalr	s4
    4538:	fb650ee3          	beq	a0,s6,44f4 <_printf_common+0xc4>
    453c:	0905                	addi	s2,s2,1
    453e:	b745                	j	44de <_printf_common+0xae>

00004540 <_printf_i>:
    4540:	7179                	addi	sp,sp,-48
    4542:	d422                	sw	s0,40(sp)
    4544:	d226                	sw	s1,36(sp)
    4546:	d04a                	sw	s2,32(sp)
    4548:	ce4e                	sw	s3,28(sp)
    454a:	d606                	sw	ra,44(sp)
    454c:	cc52                	sw	s4,24(sp)
    454e:	ca56                	sw	s5,20(sp)
    4550:	c85a                	sw	s6,16(sp)
    4552:	0185c883          	lbu	a7,24(a1)
    4556:	07800793          	li	a5,120
    455a:	84aa                	mv	s1,a0
    455c:	842e                	mv	s0,a1
    455e:	8932                	mv	s2,a2
    4560:	89b6                	mv	s3,a3
    4562:	0117ee63          	bltu	a5,a7,457e <_printf_i+0x3e>
    4566:	06200793          	li	a5,98
    456a:	04358693          	addi	a3,a1,67
    456e:	0117ed63          	bltu	a5,a7,4588 <_printf_i+0x48>
    4572:	1a088e63          	beqz	a7,472e <_printf_i+0x1ee>
    4576:	05800793          	li	a5,88
    457a:	16f88f63          	beq	a7,a5,46f8 <_printf_i+0x1b8>
    457e:	04240a93          	addi	s5,s0,66
    4582:	05140123          	sb	a7,66(s0)
    4586:	a80d                	j	45b8 <_printf_i+0x78>
    4588:	f9d88793          	addi	a5,a7,-99
    458c:	0ff7f793          	zext.b	a5,a5
    4590:	4655                	li	a2,21
    4592:	fef666e3          	bltu	a2,a5,457e <_printf_i+0x3e>
    4596:	00080637          	lui	a2,0x80
    459a:	078a                	slli	a5,a5,0x2
    459c:	4dc60613          	addi	a2,a2,1244 # 804dc <__sf_fake_stdout+0x5c>
    45a0:	97b2                	add	a5,a5,a2
    45a2:	439c                	lw	a5,0(a5)
    45a4:	8782                	jr	a5
    45a6:	431c                	lw	a5,0(a4)
    45a8:	04258a93          	addi	s5,a1,66
    45ac:	00478693          	addi	a3,a5,4
    45b0:	439c                	lw	a5,0(a5)
    45b2:	c314                	sw	a3,0(a4)
    45b4:	04f58123          	sb	a5,66(a1)
    45b8:	4785                	li	a5,1
    45ba:	aa71                	j	4756 <_printf_i+0x216>
    45bc:	419c                	lw	a5,0(a1)
    45be:	4308                	lw	a0,0(a4)
    45c0:	0807f613          	andi	a2,a5,128
    45c4:	00450593          	addi	a1,a0,4
    45c8:	c20d                	beqz	a2,45ea <_printf_i+0xaa>
    45ca:	411c                	lw	a5,0(a0)
    45cc:	c30c                	sw	a1,0(a4)
    45ce:	00080837          	lui	a6,0x80
    45d2:	0007d863          	bgez	a5,45e2 <_printf_i+0xa2>
    45d6:	02d00713          	li	a4,45
    45da:	40f007b3          	neg	a5,a5
    45de:	04e401a3          	sb	a4,67(s0)
    45e2:	4b480813          	addi	a6,a6,1204 # 804b4 <__sf_fake_stdout+0x34>
    45e6:	4729                	li	a4,10
    45e8:	a0a1                	j	4630 <_printf_i+0xf0>
    45ea:	0407f613          	andi	a2,a5,64
    45ee:	411c                	lw	a5,0(a0)
    45f0:	c30c                	sw	a1,0(a4)
    45f2:	de71                	beqz	a2,45ce <_printf_i+0x8e>
    45f4:	07c2                	slli	a5,a5,0x10
    45f6:	87c1                	srai	a5,a5,0x10
    45f8:	bfd9                	j	45ce <_printf_i+0x8e>
    45fa:	4190                	lw	a2,0(a1)
    45fc:	431c                	lw	a5,0(a4)
    45fe:	08067513          	andi	a0,a2,128
    4602:	00478593          	addi	a1,a5,4
    4606:	c501                	beqz	a0,460e <_printf_i+0xce>
    4608:	c30c                	sw	a1,0(a4)
    460a:	439c                	lw	a5,0(a5)
    460c:	a039                	j	461a <_printf_i+0xda>
    460e:	04067613          	andi	a2,a2,64
    4612:	c30c                	sw	a1,0(a4)
    4614:	da7d                	beqz	a2,460a <_printf_i+0xca>
    4616:	0007d783          	lhu	a5,0(a5)
    461a:	00080837          	lui	a6,0x80
    461e:	06f00713          	li	a4,111
    4622:	4b480813          	addi	a6,a6,1204 # 804b4 <__sf_fake_stdout+0x34>
    4626:	0ce88e63          	beq	a7,a4,4702 <_printf_i+0x1c2>
    462a:	4729                	li	a4,10
    462c:	040401a3          	sb	zero,67(s0)
    4630:	4050                	lw	a2,4(s0)
    4632:	c410                	sw	a2,8(s0)
    4634:	00064563          	bltz	a2,463e <_printf_i+0xfe>
    4638:	400c                	lw	a1,0(s0)
    463a:	99ed                	andi	a1,a1,-5
    463c:	c00c                	sw	a1,0(s0)
    463e:	e399                	bnez	a5,4644 <_printf_i+0x104>
    4640:	8ab6                	mv	s5,a3
    4642:	ce19                	beqz	a2,4660 <_printf_i+0x120>
    4644:	8ab6                	mv	s5,a3
    4646:	02e7f633          	remu	a2,a5,a4
    464a:	1afd                	addi	s5,s5,-1
    464c:	9642                	add	a2,a2,a6
    464e:	00064603          	lbu	a2,0(a2)
    4652:	00ca8023          	sb	a2,0(s5)
    4656:	863e                	mv	a2,a5
    4658:	02e7d7b3          	divu	a5,a5,a4
    465c:	fee675e3          	bgeu	a2,a4,4646 <_printf_i+0x106>
    4660:	47a1                	li	a5,8
    4662:	00f71e63          	bne	a4,a5,467e <_printf_i+0x13e>
    4666:	401c                	lw	a5,0(s0)
    4668:	8b85                	andi	a5,a5,1
    466a:	cb91                	beqz	a5,467e <_printf_i+0x13e>
    466c:	4058                	lw	a4,4(s0)
    466e:	481c                	lw	a5,16(s0)
    4670:	00e7c763          	blt	a5,a4,467e <_printf_i+0x13e>
    4674:	03000793          	li	a5,48
    4678:	fefa8fa3          	sb	a5,-1(s5)
    467c:	1afd                	addi	s5,s5,-1
    467e:	415686b3          	sub	a3,a3,s5
    4682:	c814                	sw	a3,16(s0)
    4684:	874e                	mv	a4,s3
    4686:	86ca                	mv	a3,s2
    4688:	0070                	addi	a2,sp,12
    468a:	85a2                	mv	a1,s0
    468c:	8526                	mv	a0,s1
    468e:	334d                	jal	4430 <_printf_common>
    4690:	5a7d                	li	s4,-1
    4692:	0d451663          	bne	a0,s4,475e <_printf_i+0x21e>
    4696:	557d                	li	a0,-1
    4698:	50b2                	lw	ra,44(sp)
    469a:	5422                	lw	s0,40(sp)
    469c:	5492                	lw	s1,36(sp)
    469e:	5902                	lw	s2,32(sp)
    46a0:	49f2                	lw	s3,28(sp)
    46a2:	4a62                	lw	s4,24(sp)
    46a4:	4ad2                	lw	s5,20(sp)
    46a6:	4b42                	lw	s6,16(sp)
    46a8:	6145                	addi	sp,sp,48
    46aa:	8082                	ret
    46ac:	419c                	lw	a5,0(a1)
    46ae:	0207e793          	ori	a5,a5,32
    46b2:	c19c                	sw	a5,0(a1)
    46b4:	00080837          	lui	a6,0x80
    46b8:	07800893          	li	a7,120
    46bc:	4c880813          	addi	a6,a6,1224 # 804c8 <__sf_fake_stdout+0x48>
    46c0:	051402a3          	sb	a7,69(s0)
    46c4:	4010                	lw	a2,0(s0)
    46c6:	430c                	lw	a1,0(a4)
    46c8:	08067513          	andi	a0,a2,128
    46cc:	419c                	lw	a5,0(a1)
    46ce:	0591                	addi	a1,a1,4
    46d0:	e511                	bnez	a0,46dc <_printf_i+0x19c>
    46d2:	04067513          	andi	a0,a2,64
    46d6:	c119                	beqz	a0,46dc <_printf_i+0x19c>
    46d8:	07c2                	slli	a5,a5,0x10
    46da:	83c1                	srli	a5,a5,0x10
    46dc:	c30c                	sw	a1,0(a4)
    46de:	00167713          	andi	a4,a2,1
    46e2:	c701                	beqz	a4,46ea <_printf_i+0x1aa>
    46e4:	02066613          	ori	a2,a2,32
    46e8:	c010                	sw	a2,0(s0)
    46ea:	4741                	li	a4,16
    46ec:	f3a1                	bnez	a5,462c <_printf_i+0xec>
    46ee:	4010                	lw	a2,0(s0)
    46f0:	fdf67613          	andi	a2,a2,-33
    46f4:	c010                	sw	a2,0(s0)
    46f6:	bf1d                	j	462c <_printf_i+0xec>
    46f8:	00080837          	lui	a6,0x80
    46fc:	4b480813          	addi	a6,a6,1204 # 804b4 <__sf_fake_stdout+0x34>
    4700:	b7c1                	j	46c0 <_printf_i+0x180>
    4702:	4721                	li	a4,8
    4704:	b725                	j	462c <_printf_i+0xec>
    4706:	4190                	lw	a2,0(a1)
    4708:	431c                	lw	a5,0(a4)
    470a:	49cc                	lw	a1,20(a1)
    470c:	08067813          	andi	a6,a2,128
    4710:	00478513          	addi	a0,a5,4
    4714:	00080663          	beqz	a6,4720 <_printf_i+0x1e0>
    4718:	c308                	sw	a0,0(a4)
    471a:	439c                	lw	a5,0(a5)
    471c:	c38c                	sw	a1,0(a5)
    471e:	a801                	j	472e <_printf_i+0x1ee>
    4720:	c308                	sw	a0,0(a4)
    4722:	04067613          	andi	a2,a2,64
    4726:	439c                	lw	a5,0(a5)
    4728:	da75                	beqz	a2,471c <_printf_i+0x1dc>
    472a:	00b79023          	sh	a1,0(a5)
    472e:	00042823          	sw	zero,16(s0)
    4732:	8ab6                	mv	s5,a3
    4734:	bf81                	j	4684 <_printf_i+0x144>
    4736:	431c                	lw	a5,0(a4)
    4738:	41d0                	lw	a2,4(a1)
    473a:	4581                	li	a1,0
    473c:	00478693          	addi	a3,a5,4
    4740:	c314                	sw	a3,0(a4)
    4742:	0007aa83          	lw	s5,0(a5)
    4746:	8556                	mv	a0,s5
    4748:	c2dff0ef          	jal	ra,4374 <memchr>
    474c:	c501                	beqz	a0,4754 <_printf_i+0x214>
    474e:	41550533          	sub	a0,a0,s5
    4752:	c048                	sw	a0,4(s0)
    4754:	405c                	lw	a5,4(s0)
    4756:	c81c                	sw	a5,16(s0)
    4758:	040401a3          	sb	zero,67(s0)
    475c:	b725                	j	4684 <_printf_i+0x144>
    475e:	4814                	lw	a3,16(s0)
    4760:	8656                	mv	a2,s5
    4762:	85ca                	mv	a1,s2
    4764:	8526                	mv	a0,s1
    4766:	9982                	jalr	s3
    4768:	f34507e3          	beq	a0,s4,4696 <_printf_i+0x156>
    476c:	401c                	lw	a5,0(s0)
    476e:	8b89                	andi	a5,a5,2
    4770:	e78d                	bnez	a5,479a <_printf_i+0x25a>
    4772:	47b2                	lw	a5,12(sp)
    4774:	4448                	lw	a0,12(s0)
    4776:	f2f551e3          	bge	a0,a5,4698 <_printf_i+0x158>
    477a:	853e                	mv	a0,a5
    477c:	bf31                	j	4698 <_printf_i+0x158>
    477e:	4685                	li	a3,1
    4780:	8656                	mv	a2,s5
    4782:	85ca                	mv	a1,s2
    4784:	8526                	mv	a0,s1
    4786:	9982                	jalr	s3
    4788:	f16507e3          	beq	a0,s6,4696 <_printf_i+0x156>
    478c:	0a05                	addi	s4,s4,1
    478e:	445c                	lw	a5,12(s0)
    4790:	4732                	lw	a4,12(sp)
    4792:	8f99                	sub	a5,a5,a4
    4794:	fefa45e3          	blt	s4,a5,477e <_printf_i+0x23e>
    4798:	bfe9                	j	4772 <_printf_i+0x232>
    479a:	4a01                	li	s4,0
    479c:	01940a93          	addi	s5,s0,25
    47a0:	5b7d                	li	s6,-1
    47a2:	b7f5                	j	478e <_printf_i+0x24e>

000047a4 <_malloc_usable_size_r>:
    47a4:	ffc5a783          	lw	a5,-4(a1)
    47a8:	ffc78513          	addi	a0,a5,-4
    47ac:	0007d563          	bgez	a5,47b6 <_malloc_usable_size_r+0x12>
    47b0:	95aa                	add	a1,a1,a0
    47b2:	419c                	lw	a5,0(a1)
    47b4:	953e                	add	a0,a0,a5
    47b6:	8082                	ret

000047b8 <__divdi3>:
    47b8:	832a                	mv	t1,a0
    47ba:	8e2e                	mv	t3,a1
    47bc:	4881                	li	a7,0
    47be:	0005db63          	bgez	a1,47d4 <__divdi3+0x1c>
    47c2:	00a037b3          	snez	a5,a0
    47c6:	40b00e33          	neg	t3,a1
    47ca:	40fe0e33          	sub	t3,t3,a5
    47ce:	40a00333          	neg	t1,a0
    47d2:	58fd                	li	a7,-1
    47d4:	0006db63          	bgez	a3,47ea <__divdi3+0x32>
    47d8:	00c037b3          	snez	a5,a2
    47dc:	40d006b3          	neg	a3,a3
    47e0:	fff8c893          	not	a7,a7
    47e4:	8e9d                	sub	a3,a3,a5
    47e6:	40c00633          	neg	a2,a2
    47ea:	8732                	mv	a4,a2
    47ec:	881a                	mv	a6,t1
    47ee:	87f2                	mv	a5,t3
    47f0:	20069f63          	bnez	a3,4a0e <__divdi3+0x256>
    47f4:	000805b7          	lui	a1,0x80
    47f8:	53458593          	addi	a1,a1,1332 # 80534 <__clz_tab>
    47fc:	0cce7163          	bgeu	t3,a2,48be <__divdi3+0x106>
    4800:	66c1                	lui	a3,0x10
    4802:	0ad67763          	bgeu	a2,a3,48b0 <__divdi3+0xf8>
    4806:	10063693          	sltiu	a3,a2,256
    480a:	0016c693          	xori	a3,a3,1
    480e:	068e                	slli	a3,a3,0x3
    4810:	00d65533          	srl	a0,a2,a3
    4814:	95aa                	add	a1,a1,a0
    4816:	0005c583          	lbu	a1,0(a1)
    481a:	02000513          	li	a0,32
    481e:	96ae                	add	a3,a3,a1
    4820:	40d505b3          	sub	a1,a0,a3
    4824:	00d50b63          	beq	a0,a3,483a <__divdi3+0x82>
    4828:	00be17b3          	sll	a5,t3,a1
    482c:	00d356b3          	srl	a3,t1,a3
    4830:	00b61733          	sll	a4,a2,a1
    4834:	8fd5                	or	a5,a5,a3
    4836:	00b31833          	sll	a6,t1,a1
    483a:	01075593          	srli	a1,a4,0x10
    483e:	02b7de33          	divu	t3,a5,a1
    4842:	01071613          	slli	a2,a4,0x10
    4846:	8241                	srli	a2,a2,0x10
    4848:	02b7f7b3          	remu	a5,a5,a1
    484c:	8572                	mv	a0,t3
    484e:	03c60333          	mul	t1,a2,t3
    4852:	01079693          	slli	a3,a5,0x10
    4856:	01085793          	srli	a5,a6,0x10
    485a:	8fd5                	or	a5,a5,a3
    485c:	0067fc63          	bgeu	a5,t1,4874 <__divdi3+0xbc>
    4860:	97ba                	add	a5,a5,a4
    4862:	fffe0513          	addi	a0,t3,-1
    4866:	00e7e763          	bltu	a5,a4,4874 <__divdi3+0xbc>
    486a:	0067f563          	bgeu	a5,t1,4874 <__divdi3+0xbc>
    486e:	ffee0513          	addi	a0,t3,-2
    4872:	97ba                	add	a5,a5,a4
    4874:	406787b3          	sub	a5,a5,t1
    4878:	02b7d333          	divu	t1,a5,a1
    487c:	0842                	slli	a6,a6,0x10
    487e:	01085813          	srli	a6,a6,0x10
    4882:	02b7f7b3          	remu	a5,a5,a1
    4886:	026606b3          	mul	a3,a2,t1
    488a:	07c2                	slli	a5,a5,0x10
    488c:	00f86833          	or	a6,a6,a5
    4890:	879a                	mv	a5,t1
    4892:	00d87b63          	bgeu	a6,a3,48a8 <__divdi3+0xf0>
    4896:	983a                	add	a6,a6,a4
    4898:	fff30793          	addi	a5,t1,-1
    489c:	00e86663          	bltu	a6,a4,48a8 <__divdi3+0xf0>
    48a0:	00d87463          	bgeu	a6,a3,48a8 <__divdi3+0xf0>
    48a4:	ffe30793          	addi	a5,t1,-2
    48a8:	0542                	slli	a0,a0,0x10
    48aa:	8d5d                	or	a0,a0,a5
    48ac:	4581                	li	a1,0
    48ae:	a84d                	j	4960 <__divdi3+0x1a8>
    48b0:	01000537          	lui	a0,0x1000
    48b4:	46c1                	li	a3,16
    48b6:	f4a66de3          	bltu	a2,a0,4810 <__divdi3+0x58>
    48ba:	46e1                	li	a3,24
    48bc:	bf91                	j	4810 <__divdi3+0x58>
    48be:	e211                	bnez	a2,48c2 <__divdi3+0x10a>
    48c0:	9002                	ebreak
    48c2:	67c1                	lui	a5,0x10
    48c4:	0af67863          	bgeu	a2,a5,4974 <__divdi3+0x1bc>
    48c8:	10063693          	sltiu	a3,a2,256
    48cc:	0016c693          	xori	a3,a3,1
    48d0:	068e                	slli	a3,a3,0x3
    48d2:	00d657b3          	srl	a5,a2,a3
    48d6:	95be                	add	a1,a1,a5
    48d8:	0005c783          	lbu	a5,0(a1)
    48dc:	97b6                	add	a5,a5,a3
    48de:	02000693          	li	a3,32
    48e2:	40f685b3          	sub	a1,a3,a5
    48e6:	08f69e63          	bne	a3,a5,4982 <__divdi3+0x1ca>
    48ea:	40ce07b3          	sub	a5,t3,a2
    48ee:	4585                	li	a1,1
    48f0:	01075313          	srli	t1,a4,0x10
    48f4:	0267deb3          	divu	t4,a5,t1
    48f8:	01071613          	slli	a2,a4,0x10
    48fc:	8241                	srli	a2,a2,0x10
    48fe:	01085693          	srli	a3,a6,0x10
    4902:	0267f7b3          	remu	a5,a5,t1
    4906:	8576                	mv	a0,t4
    4908:	03d60e33          	mul	t3,a2,t4
    490c:	07c2                	slli	a5,a5,0x10
    490e:	8fd5                	or	a5,a5,a3
    4910:	01c7fc63          	bgeu	a5,t3,4928 <__divdi3+0x170>
    4914:	97ba                	add	a5,a5,a4
    4916:	fffe8513          	addi	a0,t4,-1
    491a:	00e7e763          	bltu	a5,a4,4928 <__divdi3+0x170>
    491e:	01c7f563          	bgeu	a5,t3,4928 <__divdi3+0x170>
    4922:	ffee8513          	addi	a0,t4,-2
    4926:	97ba                	add	a5,a5,a4
    4928:	41c787b3          	sub	a5,a5,t3
    492c:	0267de33          	divu	t3,a5,t1
    4930:	0842                	slli	a6,a6,0x10
    4932:	01085813          	srli	a6,a6,0x10
    4936:	0267f7b3          	remu	a5,a5,t1
    493a:	03c606b3          	mul	a3,a2,t3
    493e:	07c2                	slli	a5,a5,0x10
    4940:	00f86833          	or	a6,a6,a5
    4944:	87f2                	mv	a5,t3
    4946:	00d87b63          	bgeu	a6,a3,495c <__divdi3+0x1a4>
    494a:	983a                	add	a6,a6,a4
    494c:	fffe0793          	addi	a5,t3,-1
    4950:	00e86663          	bltu	a6,a4,495c <__divdi3+0x1a4>
    4954:	00d87463          	bgeu	a6,a3,495c <__divdi3+0x1a4>
    4958:	ffee0793          	addi	a5,t3,-2
    495c:	0542                	slli	a0,a0,0x10
    495e:	8d5d                	or	a0,a0,a5
    4960:	00088963          	beqz	a7,4972 <__divdi3+0x1ba>
    4964:	00a037b3          	snez	a5,a0
    4968:	40b005b3          	neg	a1,a1
    496c:	8d9d                	sub	a1,a1,a5
    496e:	40a00533          	neg	a0,a0
    4972:	8082                	ret
    4974:	010007b7          	lui	a5,0x1000
    4978:	46c1                	li	a3,16
    497a:	f4f66ce3          	bltu	a2,a5,48d2 <__divdi3+0x11a>
    497e:	46e1                	li	a3,24
    4980:	bf89                	j	48d2 <__divdi3+0x11a>
    4982:	00b61733          	sll	a4,a2,a1
    4986:	00fe56b3          	srl	a3,t3,a5
    498a:	01075513          	srli	a0,a4,0x10
    498e:	00be1e33          	sll	t3,t3,a1
    4992:	00f357b3          	srl	a5,t1,a5
    4996:	01c7e7b3          	or	a5,a5,t3
    499a:	02a6de33          	divu	t3,a3,a0
    499e:	01071613          	slli	a2,a4,0x10
    49a2:	8241                	srli	a2,a2,0x10
    49a4:	00b31833          	sll	a6,t1,a1
    49a8:	02a6f6b3          	remu	a3,a3,a0
    49ac:	03c60333          	mul	t1,a2,t3
    49b0:	01069593          	slli	a1,a3,0x10
    49b4:	0107d693          	srli	a3,a5,0x10
    49b8:	8ecd                	or	a3,a3,a1
    49ba:	85f2                	mv	a1,t3
    49bc:	0066fc63          	bgeu	a3,t1,49d4 <__divdi3+0x21c>
    49c0:	96ba                	add	a3,a3,a4
    49c2:	fffe0593          	addi	a1,t3,-1
    49c6:	00e6e763          	bltu	a3,a4,49d4 <__divdi3+0x21c>
    49ca:	0066f563          	bgeu	a3,t1,49d4 <__divdi3+0x21c>
    49ce:	ffee0593          	addi	a1,t3,-2
    49d2:	96ba                	add	a3,a3,a4
    49d4:	406686b3          	sub	a3,a3,t1
    49d8:	02a6d333          	divu	t1,a3,a0
    49dc:	07c2                	slli	a5,a5,0x10
    49de:	83c1                	srli	a5,a5,0x10
    49e0:	02a6f6b3          	remu	a3,a3,a0
    49e4:	02660633          	mul	a2,a2,t1
    49e8:	06c2                	slli	a3,a3,0x10
    49ea:	8fd5                	or	a5,a5,a3
    49ec:	869a                	mv	a3,t1
    49ee:	00c7fc63          	bgeu	a5,a2,4a06 <__divdi3+0x24e>
    49f2:	97ba                	add	a5,a5,a4
    49f4:	fff30693          	addi	a3,t1,-1
    49f8:	00e7e763          	bltu	a5,a4,4a06 <__divdi3+0x24e>
    49fc:	00c7f563          	bgeu	a5,a2,4a06 <__divdi3+0x24e>
    4a00:	ffe30693          	addi	a3,t1,-2
    4a04:	97ba                	add	a5,a5,a4
    4a06:	05c2                	slli	a1,a1,0x10
    4a08:	8f91                	sub	a5,a5,a2
    4a0a:	8dd5                	or	a1,a1,a3
    4a0c:	b5d5                	j	48f0 <__divdi3+0x138>
    4a0e:	14de6163          	bltu	t3,a3,4b50 <bitfield.c.ab41fd61+0x120>
    4a12:	67c1                	lui	a5,0x10
    4a14:	02f6ff63          	bgeu	a3,a5,4a52 <bitfield.c.ab41fd61+0x22>
    4a18:	1006b713          	sltiu	a4,a3,256
    4a1c:	00174713          	xori	a4,a4,1
    4a20:	070e                	slli	a4,a4,0x3
    4a22:	000807b7          	lui	a5,0x80
    4a26:	00e6d5b3          	srl	a1,a3,a4
    4a2a:	53478793          	addi	a5,a5,1332 # 80534 <__clz_tab>
    4a2e:	97ae                	add	a5,a5,a1
    4a30:	0007c783          	lbu	a5,0(a5)
    4a34:	97ba                	add	a5,a5,a4
    4a36:	02000713          	li	a4,32
    4a3a:	40f705b3          	sub	a1,a4,a5
    4a3e:	02f71163          	bne	a4,a5,4a60 <bitfield.c.ab41fd61+0x30>
    4a42:	4505                	li	a0,1
    4a44:	f1c6eee3          	bltu	a3,t3,4960 <__divdi3+0x1a8>
    4a48:	00c33533          	sltu	a0,t1,a2
    4a4c:	00154513          	xori	a0,a0,1
    4a50:	bf01                	j	4960 <__divdi3+0x1a8>
    4a52:	010007b7          	lui	a5,0x1000
    4a56:	4741                	li	a4,16
    4a58:	fcf6e5e3          	bltu	a3,a5,4a22 <__divdi3+0x26a>
    4a5c:	4761                	li	a4,24
    4a5e:	b7d1                	j	4a22 <__divdi3+0x26a>
    4a60:	00f65733          	srl	a4,a2,a5
    4a64:	00b696b3          	sll	a3,a3,a1
    4a68:	8ed9                	or	a3,a3,a4
    4a6a:	00fe5733          	srl	a4,t3,a5
    4a6e:	00be1e33          	sll	t3,t3,a1
    4a72:	00f357b3          	srl	a5,t1,a5
    4a76:	01c7e7b3          	or	a5,a5,t3
    4a7a:	0106de13          	srli	t3,a3,0x10
    4a7e:	03c75f33          	divu	t5,a4,t3
    4a82:	01069813          	slli	a6,a3,0x10
    4a86:	01085813          	srli	a6,a6,0x10
    4a8a:	00b61633          	sll	a2,a2,a1
    4a8e:	03c77733          	remu	a4,a4,t3
    4a92:	03e80eb3          	mul	t4,a6,t5
    4a96:	01071513          	slli	a0,a4,0x10
    4a9a:	0107d713          	srli	a4,a5,0x10
    4a9e:	8f49                	or	a4,a4,a0
    4aa0:	857a                	mv	a0,t5
    4aa2:	01d77c63          	bgeu	a4,t4,4aba <bitfield.c.ab41fd61+0x8a>
    4aa6:	9736                	add	a4,a4,a3
    4aa8:	ffff0513          	addi	a0,t5,-1
    4aac:	00d76763          	bltu	a4,a3,4aba <bitfield.c.ab41fd61+0x8a>
    4ab0:	01d77563          	bgeu	a4,t4,4aba <bitfield.c.ab41fd61+0x8a>
    4ab4:	ffef0513          	addi	a0,t5,-2
    4ab8:	9736                	add	a4,a4,a3
    4aba:	41d70733          	sub	a4,a4,t4
    4abe:	03c75eb3          	divu	t4,a4,t3
    4ac2:	07c2                	slli	a5,a5,0x10
    4ac4:	83c1                	srli	a5,a5,0x10
    4ac6:	03c77733          	remu	a4,a4,t3
    4aca:	03d80833          	mul	a6,a6,t4
    4ace:	0742                	slli	a4,a4,0x10
    4ad0:	8fd9                	or	a5,a5,a4
    4ad2:	8776                	mv	a4,t4
    4ad4:	0107fc63          	bgeu	a5,a6,4aec <bitfield.c.ab41fd61+0xbc>
    4ad8:	97b6                	add	a5,a5,a3
    4ada:	fffe8713          	addi	a4,t4,-1
    4ade:	00d7e763          	bltu	a5,a3,4aec <bitfield.c.ab41fd61+0xbc>
    4ae2:	0107f563          	bgeu	a5,a6,4aec <bitfield.c.ab41fd61+0xbc>
    4ae6:	ffee8713          	addi	a4,t4,-2
    4aea:	97b6                	add	a5,a5,a3
    4aec:	0542                	slli	a0,a0,0x10
    4aee:	6ec1                	lui	t4,0x10
    4af0:	8d59                	or	a0,a0,a4
    4af2:	fffe8693          	addi	a3,t4,-1 # ffff <randombytes.c.5b81a8f2+0xbe8>
    4af6:	00d57733          	and	a4,a0,a3
    4afa:	410787b3          	sub	a5,a5,a6
    4afe:	8ef1                	and	a3,a3,a2
    4b00:	01055813          	srli	a6,a0,0x10
    4b04:	8241                	srli	a2,a2,0x10
    4b06:	02d70e33          	mul	t3,a4,a3
    4b0a:	02d806b3          	mul	a3,a6,a3
    4b0e:	02c70733          	mul	a4,a4,a2
    4b12:	02c80833          	mul	a6,a6,a2
    4b16:	00d70633          	add	a2,a4,a3
    4b1a:	010e5713          	srli	a4,t3,0x10
    4b1e:	9732                	add	a4,a4,a2
    4b20:	00d77363          	bgeu	a4,a3,4b26 <bitfield.c.ab41fd61+0xf6>
    4b24:	9876                	add	a6,a6,t4
    4b26:	01075693          	srli	a3,a4,0x10
    4b2a:	96c2                	add	a3,a3,a6
    4b2c:	02d7e063          	bltu	a5,a3,4b4c <bitfield.c.ab41fd61+0x11c>
    4b30:	d6d79ee3          	bne	a5,a3,48ac <__divdi3+0xf4>
    4b34:	67c1                	lui	a5,0x10
    4b36:	17fd                	addi	a5,a5,-1
    4b38:	8f7d                	and	a4,a4,a5
    4b3a:	0742                	slli	a4,a4,0x10
    4b3c:	00fe7e33          	and	t3,t3,a5
    4b40:	00b31333          	sll	t1,t1,a1
    4b44:	9772                	add	a4,a4,t3
    4b46:	4581                	li	a1,0
    4b48:	e0e37ce3          	bgeu	t1,a4,4960 <__divdi3+0x1a8>
    4b4c:	157d                	addi	a0,a0,-1
    4b4e:	bbb9                	j	48ac <__divdi3+0xf4>
    4b50:	4581                	li	a1,0
    4b52:	4501                	li	a0,0
    4b54:	b531                	j	4960 <__divdi3+0x1a8>

00004b56 <__udivdi3>:
    4b56:	832a                	mv	t1,a0
    4b58:	88ae                	mv	a7,a1
    4b5a:	8732                	mv	a4,a2
    4b5c:	882a                	mv	a6,a0
    4b5e:	87ae                	mv	a5,a1
    4b60:	20069663          	bnez	a3,4d6c <memory.c.f6d1f22a+0xf4>
    4b64:	000805b7          	lui	a1,0x80
    4b68:	53458593          	addi	a1,a1,1332 # 80534 <__clz_tab>
    4b6c:	0cc8f163          	bgeu	a7,a2,4c2e <__udivdi3+0xd8>
    4b70:	66c1                	lui	a3,0x10
    4b72:	0ad67763          	bgeu	a2,a3,4c20 <__udivdi3+0xca>
    4b76:	10063693          	sltiu	a3,a2,256
    4b7a:	0016c693          	xori	a3,a3,1
    4b7e:	068e                	slli	a3,a3,0x3
    4b80:	00d65533          	srl	a0,a2,a3
    4b84:	95aa                	add	a1,a1,a0
    4b86:	0005c583          	lbu	a1,0(a1)
    4b8a:	02000513          	li	a0,32
    4b8e:	96ae                	add	a3,a3,a1
    4b90:	40d505b3          	sub	a1,a0,a3
    4b94:	00d50b63          	beq	a0,a3,4baa <__udivdi3+0x54>
    4b98:	00b897b3          	sll	a5,a7,a1
    4b9c:	00d356b3          	srl	a3,t1,a3
    4ba0:	00b61733          	sll	a4,a2,a1
    4ba4:	8fd5                	or	a5,a5,a3
    4ba6:	00b31833          	sll	a6,t1,a1
    4baa:	01075593          	srli	a1,a4,0x10
    4bae:	02b7d333          	divu	t1,a5,a1
    4bb2:	01071613          	slli	a2,a4,0x10
    4bb6:	8241                	srli	a2,a2,0x10
    4bb8:	02b7f7b3          	remu	a5,a5,a1
    4bbc:	851a                	mv	a0,t1
    4bbe:	026608b3          	mul	a7,a2,t1
    4bc2:	01079693          	slli	a3,a5,0x10
    4bc6:	01085793          	srli	a5,a6,0x10
    4bca:	8fd5                	or	a5,a5,a3
    4bcc:	0117fc63          	bgeu	a5,a7,4be4 <__udivdi3+0x8e>
    4bd0:	97ba                	add	a5,a5,a4
    4bd2:	fff30513          	addi	a0,t1,-1
    4bd6:	00e7e763          	bltu	a5,a4,4be4 <__udivdi3+0x8e>
    4bda:	0117f563          	bgeu	a5,a7,4be4 <__udivdi3+0x8e>
    4bde:	ffe30513          	addi	a0,t1,-2
    4be2:	97ba                	add	a5,a5,a4
    4be4:	411787b3          	sub	a5,a5,a7
    4be8:	02b7d8b3          	divu	a7,a5,a1
    4bec:	0842                	slli	a6,a6,0x10
    4bee:	01085813          	srli	a6,a6,0x10
    4bf2:	02b7f7b3          	remu	a5,a5,a1
    4bf6:	031606b3          	mul	a3,a2,a7
    4bfa:	07c2                	slli	a5,a5,0x10
    4bfc:	00f86833          	or	a6,a6,a5
    4c00:	87c6                	mv	a5,a7
    4c02:	00d87b63          	bgeu	a6,a3,4c18 <__udivdi3+0xc2>
    4c06:	983a                	add	a6,a6,a4
    4c08:	fff88793          	addi	a5,a7,-1
    4c0c:	00e86663          	bltu	a6,a4,4c18 <__udivdi3+0xc2>
    4c10:	00d87463          	bgeu	a6,a3,4c18 <__udivdi3+0xc2>
    4c14:	ffe88793          	addi	a5,a7,-2
    4c18:	0542                	slli	a0,a0,0x10
    4c1a:	8d5d                	or	a0,a0,a5
    4c1c:	4581                	li	a1,0
    4c1e:	8082                	ret
    4c20:	01000537          	lui	a0,0x1000
    4c24:	46c1                	li	a3,16
    4c26:	f4a66de3          	bltu	a2,a0,4b80 <__udivdi3+0x2a>
    4c2a:	46e1                	li	a3,24
    4c2c:	bf91                	j	4b80 <__udivdi3+0x2a>
    4c2e:	e211                	bnez	a2,4c32 <__udivdi3+0xdc>
    4c30:	9002                	ebreak
    4c32:	67c1                	lui	a5,0x10
    4c34:	08f67f63          	bgeu	a2,a5,4cd2 <memory.c.f6d1f22a+0x5a>
    4c38:	10063693          	sltiu	a3,a2,256
    4c3c:	0016c693          	xori	a3,a3,1
    4c40:	068e                	slli	a3,a3,0x3
    4c42:	00d657b3          	srl	a5,a2,a3
    4c46:	95be                	add	a1,a1,a5
    4c48:	0005c783          	lbu	a5,0(a1)
    4c4c:	97b6                	add	a5,a5,a3
    4c4e:	02000693          	li	a3,32
    4c52:	40f685b3          	sub	a1,a3,a5
    4c56:	08f69563          	bne	a3,a5,4ce0 <memory.c.f6d1f22a+0x68>
    4c5a:	40c887b3          	sub	a5,a7,a2
    4c5e:	4585                	li	a1,1
    4c60:	01075893          	srli	a7,a4,0x10
    4c64:	0317de33          	divu	t3,a5,a7
    4c68:	01071613          	slli	a2,a4,0x10
    4c6c:	8241                	srli	a2,a2,0x10
    4c6e:	01085693          	srli	a3,a6,0x10
    4c72:	0317f7b3          	remu	a5,a5,a7
    4c76:	8572                	mv	a0,t3
    4c78:	03c60333          	mul	t1,a2,t3
    4c7c:	07c2                	slli	a5,a5,0x10
    4c7e:	8fd5                	or	a5,a5,a3
    4c80:	0067fc63          	bgeu	a5,t1,4c98 <memory.c.f6d1f22a+0x20>
    4c84:	97ba                	add	a5,a5,a4
    4c86:	fffe0513          	addi	a0,t3,-1
    4c8a:	00e7e763          	bltu	a5,a4,4c98 <memory.c.f6d1f22a+0x20>
    4c8e:	0067f563          	bgeu	a5,t1,4c98 <memory.c.f6d1f22a+0x20>
    4c92:	ffee0513          	addi	a0,t3,-2
    4c96:	97ba                	add	a5,a5,a4
    4c98:	406787b3          	sub	a5,a5,t1
    4c9c:	0317d333          	divu	t1,a5,a7
    4ca0:	0842                	slli	a6,a6,0x10
    4ca2:	01085813          	srli	a6,a6,0x10
    4ca6:	0317f7b3          	remu	a5,a5,a7
    4caa:	026606b3          	mul	a3,a2,t1
    4cae:	07c2                	slli	a5,a5,0x10
    4cb0:	00f86833          	or	a6,a6,a5
    4cb4:	879a                	mv	a5,t1
    4cb6:	00d87b63          	bgeu	a6,a3,4ccc <memory.c.f6d1f22a+0x54>
    4cba:	983a                	add	a6,a6,a4
    4cbc:	fff30793          	addi	a5,t1,-1
    4cc0:	00e86663          	bltu	a6,a4,4ccc <memory.c.f6d1f22a+0x54>
    4cc4:	00d87463          	bgeu	a6,a3,4ccc <memory.c.f6d1f22a+0x54>
    4cc8:	ffe30793          	addi	a5,t1,-2
    4ccc:	0542                	slli	a0,a0,0x10
    4cce:	8d5d                	or	a0,a0,a5
    4cd0:	8082                	ret
    4cd2:	010007b7          	lui	a5,0x1000
    4cd6:	46c1                	li	a3,16
    4cd8:	f6f665e3          	bltu	a2,a5,4c42 <__udivdi3+0xec>
    4cdc:	46e1                	li	a3,24
    4cde:	b795                	j	4c42 <__udivdi3+0xec>
    4ce0:	00b61733          	sll	a4,a2,a1
    4ce4:	00f8d6b3          	srl	a3,a7,a5
    4ce8:	01075513          	srli	a0,a4,0x10
    4cec:	00f357b3          	srl	a5,t1,a5
    4cf0:	00b31833          	sll	a6,t1,a1
    4cf4:	02a6d333          	divu	t1,a3,a0
    4cf8:	01071613          	slli	a2,a4,0x10
    4cfc:	00b898b3          	sll	a7,a7,a1
    4d00:	8241                	srli	a2,a2,0x10
    4d02:	0117e7b3          	or	a5,a5,a7
    4d06:	02a6f6b3          	remu	a3,a3,a0
    4d0a:	026608b3          	mul	a7,a2,t1
    4d0e:	01069593          	slli	a1,a3,0x10
    4d12:	0107d693          	srli	a3,a5,0x10
    4d16:	8ecd                	or	a3,a3,a1
    4d18:	859a                	mv	a1,t1
    4d1a:	0116fc63          	bgeu	a3,a7,4d32 <memory.c.f6d1f22a+0xba>
    4d1e:	96ba                	add	a3,a3,a4
    4d20:	fff30593          	addi	a1,t1,-1
    4d24:	00e6e763          	bltu	a3,a4,4d32 <memory.c.f6d1f22a+0xba>
    4d28:	0116f563          	bgeu	a3,a7,4d32 <memory.c.f6d1f22a+0xba>
    4d2c:	ffe30593          	addi	a1,t1,-2
    4d30:	96ba                	add	a3,a3,a4
    4d32:	411686b3          	sub	a3,a3,a7
    4d36:	02a6d8b3          	divu	a7,a3,a0
    4d3a:	07c2                	slli	a5,a5,0x10
    4d3c:	83c1                	srli	a5,a5,0x10
    4d3e:	02a6f6b3          	remu	a3,a3,a0
    4d42:	03160633          	mul	a2,a2,a7
    4d46:	06c2                	slli	a3,a3,0x10
    4d48:	8fd5                	or	a5,a5,a3
    4d4a:	86c6                	mv	a3,a7
    4d4c:	00c7fc63          	bgeu	a5,a2,4d64 <memory.c.f6d1f22a+0xec>
    4d50:	97ba                	add	a5,a5,a4
    4d52:	fff88693          	addi	a3,a7,-1
    4d56:	00e7e763          	bltu	a5,a4,4d64 <memory.c.f6d1f22a+0xec>
    4d5a:	00c7f563          	bgeu	a5,a2,4d64 <memory.c.f6d1f22a+0xec>
    4d5e:	ffe88693          	addi	a3,a7,-2
    4d62:	97ba                	add	a5,a5,a4
    4d64:	05c2                	slli	a1,a1,0x10
    4d66:	8f91                	sub	a5,a5,a2
    4d68:	8dd5                	or	a1,a1,a3
    4d6a:	bddd                	j	4c60 <__udivdi3+0x10a>
    4d6c:	14d5e163          	bltu	a1,a3,4eae <soc_ctrl.c.866c9c8a+0xd2>
    4d70:	67c1                	lui	a5,0x10
    4d72:	02f6ff63          	bgeu	a3,a5,4db0 <memory.c.f6d1f22a+0x138>
    4d76:	1006b713          	sltiu	a4,a3,256
    4d7a:	00174713          	xori	a4,a4,1
    4d7e:	070e                	slli	a4,a4,0x3
    4d80:	000807b7          	lui	a5,0x80
    4d84:	00e6d5b3          	srl	a1,a3,a4
    4d88:	53478793          	addi	a5,a5,1332 # 80534 <__clz_tab>
    4d8c:	97ae                	add	a5,a5,a1
    4d8e:	0007c783          	lbu	a5,0(a5)
    4d92:	97ba                	add	a5,a5,a4
    4d94:	02000713          	li	a4,32
    4d98:	40f705b3          	sub	a1,a4,a5
    4d9c:	02f71163          	bne	a4,a5,4dbe <memory.c.f6d1f22a+0x146>
    4da0:	4505                	li	a0,1
    4da2:	e716eee3          	bltu	a3,a7,4c1e <__udivdi3+0xc8>
    4da6:	00c33533          	sltu	a0,t1,a2
    4daa:	00154513          	xori	a0,a0,1
    4dae:	8082                	ret
    4db0:	010007b7          	lui	a5,0x1000
    4db4:	4741                	li	a4,16
    4db6:	fcf6e5e3          	bltu	a3,a5,4d80 <memory.c.f6d1f22a+0x108>
    4dba:	4761                	li	a4,24
    4dbc:	b7d1                	j	4d80 <memory.c.f6d1f22a+0x108>
    4dbe:	00f65733          	srl	a4,a2,a5
    4dc2:	00b696b3          	sll	a3,a3,a1
    4dc6:	8ed9                	or	a3,a3,a4
    4dc8:	00f8d733          	srl	a4,a7,a5
    4dcc:	00b898b3          	sll	a7,a7,a1
    4dd0:	00f357b3          	srl	a5,t1,a5
    4dd4:	0117e7b3          	or	a5,a5,a7
    4dd8:	0106d893          	srli	a7,a3,0x10
    4ddc:	03175eb3          	divu	t4,a4,a7
    4de0:	01069813          	slli	a6,a3,0x10
    4de4:	01085813          	srli	a6,a6,0x10
    4de8:	00b61633          	sll	a2,a2,a1
    4dec:	03177733          	remu	a4,a4,a7
    4df0:	03d80e33          	mul	t3,a6,t4
    4df4:	01071513          	slli	a0,a4,0x10
    4df8:	0107d713          	srli	a4,a5,0x10
    4dfc:	8f49                	or	a4,a4,a0
    4dfe:	8576                	mv	a0,t4
    4e00:	01c77c63          	bgeu	a4,t3,4e18 <soc_ctrl.c.866c9c8a+0x3c>
    4e04:	9736                	add	a4,a4,a3
    4e06:	fffe8513          	addi	a0,t4,-1
    4e0a:	00d76763          	bltu	a4,a3,4e18 <soc_ctrl.c.866c9c8a+0x3c>
    4e0e:	01c77563          	bgeu	a4,t3,4e18 <soc_ctrl.c.866c9c8a+0x3c>
    4e12:	ffee8513          	addi	a0,t4,-2
    4e16:	9736                	add	a4,a4,a3
    4e18:	41c70733          	sub	a4,a4,t3
    4e1c:	03175e33          	divu	t3,a4,a7
    4e20:	07c2                	slli	a5,a5,0x10
    4e22:	83c1                	srli	a5,a5,0x10
    4e24:	03177733          	remu	a4,a4,a7
    4e28:	03c80833          	mul	a6,a6,t3
    4e2c:	0742                	slli	a4,a4,0x10
    4e2e:	8fd9                	or	a5,a5,a4
    4e30:	8772                	mv	a4,t3
    4e32:	0107fc63          	bgeu	a5,a6,4e4a <soc_ctrl.c.866c9c8a+0x6e>
    4e36:	97b6                	add	a5,a5,a3
    4e38:	fffe0713          	addi	a4,t3,-1
    4e3c:	00d7e763          	bltu	a5,a3,4e4a <soc_ctrl.c.866c9c8a+0x6e>
    4e40:	0107f563          	bgeu	a5,a6,4e4a <soc_ctrl.c.866c9c8a+0x6e>
    4e44:	ffee0713          	addi	a4,t3,-2
    4e48:	97b6                	add	a5,a5,a3
    4e4a:	0542                	slli	a0,a0,0x10
    4e4c:	6e41                	lui	t3,0x10
    4e4e:	8d59                	or	a0,a0,a4
    4e50:	fffe0693          	addi	a3,t3,-1 # ffff <randombytes.c.5b81a8f2+0xbe8>
    4e54:	00d57733          	and	a4,a0,a3
    4e58:	410787b3          	sub	a5,a5,a6
    4e5c:	8ef1                	and	a3,a3,a2
    4e5e:	01055813          	srli	a6,a0,0x10
    4e62:	8241                	srli	a2,a2,0x10
    4e64:	02d708b3          	mul	a7,a4,a3
    4e68:	02d806b3          	mul	a3,a6,a3
    4e6c:	02c70733          	mul	a4,a4,a2
    4e70:	02c80833          	mul	a6,a6,a2
    4e74:	00d70633          	add	a2,a4,a3
    4e78:	0108d713          	srli	a4,a7,0x10
    4e7c:	9732                	add	a4,a4,a2
    4e7e:	00d77363          	bgeu	a4,a3,4e84 <soc_ctrl.c.866c9c8a+0xa8>
    4e82:	9872                	add	a6,a6,t3
    4e84:	01075693          	srli	a3,a4,0x10
    4e88:	96c2                	add	a3,a3,a6
    4e8a:	02d7e063          	bltu	a5,a3,4eaa <soc_ctrl.c.866c9c8a+0xce>
    4e8e:	d8d797e3          	bne	a5,a3,4c1c <__udivdi3+0xc6>
    4e92:	67c1                	lui	a5,0x10
    4e94:	17fd                	addi	a5,a5,-1
    4e96:	8f7d                	and	a4,a4,a5
    4e98:	0742                	slli	a4,a4,0x10
    4e9a:	00f8f8b3          	and	a7,a7,a5
    4e9e:	00b31333          	sll	t1,t1,a1
    4ea2:	9746                	add	a4,a4,a7
    4ea4:	4581                	li	a1,0
    4ea6:	d6e37ce3          	bgeu	t1,a4,4c1e <__udivdi3+0xc8>
    4eaa:	157d                	addi	a0,a0,-1
    4eac:	bb85                	j	4c1c <__udivdi3+0xc6>
    4eae:	4581                	li	a1,0
    4eb0:	4501                	li	a0,0
    4eb2:	8082                	ret
